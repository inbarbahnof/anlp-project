{"id": 0, "code": "result = df.iloc[List]\n", "metadata": {"problem_id": 0, "library_problem_id": 0, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 1, "code": "result = df.iloc[List]\n", "metadata": {"problem_id": 1, "library_problem_id": 1, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"id": 2, "code": "result = df.copy()\nresult['Qu1'] = result['Qu1'].where(result['Qu1'].map(result['Qu1'].value_counts()) >= 2, 'other')\nresult['Qu3'] = result['Qu3'].where(result['Qu3'].map(result['Qu3'].value_counts()) >= 2, 'other')\n", "metadata": {"problem_id": 2, "library_problem_id": 2, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 2}}
{"id": 3, "code": "result = df.copy()\nresult['Qu1'] = result['Qu1'].map(lambda x: x if df['Qu1'].value_counts()[x] >= 3 else 'other')\nresult['Qu2'] = result['Qu2'].map(lambda x: x if df['Qu2'].value_counts()[x] >= 3 else 'other')\nresult['Qu3'] = result['Qu3'].map(lambda x: x if df['Qu3'].value_counts()[x] >= 3 else 'other')\n", "metadata": {"problem_id": 3, "library_problem_id": 3, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 2}}
{"id": 4, "code": " ###\n    result = example_df['datetime'].dt.strftime('%Y-%m-%d %H:%M:%S')\n    ### END SOLUTION ###\n    return result\n", "metadata": {"problem_id": 12, "library_problem_id": 12, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 5, "code": "df['datetime'] = df['datetime'].dt.tz_localize(None)\ndf['datetime'] = df['datetime'].dt.strftime('%d-%b-%Y %H:%M:%S')\n", "metadata": {"problem_id": 13, "library_problem_id": 13, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 11}}
{"id": 6, "code": "df['datetime'] = df['datetime'].dt.tz_localize(None)\ndf = df.sort_values(by='datetime')\n", "metadata": {"problem_id": 14, "library_problem_id": 14, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 11}}
{"id": 7, "code": "<code>\nresult = pd.DataFrame(columns=['name', 'status', 'number', 'job', 'money', 'wife', 'group', 'kids'])\nfor i, row in df.iterrows():\n    message = row['message'][1:-1].split(', ')\n    message_dict = {}\n    for item in message:\n        key, value = item.split(': ')\n        message_dict[key] = value\n    result.loc[i] = [row['name'], row['status'], row['number'], message_dict.get('job', 'none'), message_dict.get('money', 'none'), message_dict.get('wife', 'none'), message_dict.get('group', 'none'), message_dict.get('kids', 'none')]\n", "metadata": {"problem_id": 15, "library_problem_id": 15, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 15}}
{"id": 8, "code": "df.loc[df['product'].isin(products), 'score'] *= 10\n", "metadata": {"problem_id": 16, "library_problem_id": 16, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 9, "code": "df.loc[df['product'].isin(products), 'score'] = (df.loc[df['product'].isin(products), 'score'] - df.loc[df['product'].isin(products), 'score'].min()) / (df.loc[df['product'].isin(products), 'score'].max() - df.loc[df['product'].isin(products), 'score'].min())\n", "metadata": {"problem_id": 19, "library_problem_id": 19, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"id": 10, "code": "df['category'] = df.apply(lambda row: [col for col, val in row.iteritems() if val == 1], axis=1)\n", "metadata": {"problem_id": 22, "library_problem_id": 22, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 20}}
{"id": 11, "code": "df['Date'] = df['Date'].dt.strftime('%b-%Y')\n", "metadata": {"problem_id": 23, "library_problem_id": 23, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 23}}
{"id": 12, "code": "<code>\ndf = df.shift(1, axis=0)\ndf.loc['1980-01-05'] = df.iloc[0]\ndf = df.dropna()\n", "metadata": {"problem_id": 27, "library_problem_id": 27, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 26}}
{"id": 13, "code": "df = df.add_suffix('X')\n", "metadata": {"problem_id": 32, "library_problem_id": 32, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 30}}
{"id": 14, "code": "<code>\nresult = df.groupby('group').agg({\"group_color\": \"first\", **{col: \"mean\" for col in df.columns if \"val\" in col}})\n", "metadata": {"problem_id": 33, "library_problem_id": 33, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 33}}
{"id": 15, "code": "result = df.loc[row_list, column_list].sum()\n", "metadata": {"problem_id": 37, "library_problem_id": 37, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"id": 16, "code": "result = df.apply(pd.Series.value_counts).fillna(0).sum()\n", "metadata": {"problem_id": 39, "library_problem_id": 39, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 17, "code": "result = df.isnull().sum()\n", "metadata": {"problem_id": 40, "library_problem_id": 40, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 39}}
{"id": 18, "code": "result = ''\nfor col in df.columns:\n    result += f'---- {col} ----\\n{df[col].value_counts()}\\n'\n", "metadata": {"problem_id": 41, "library_problem_id": 41, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 39}}
{"id": 19, "code": "<code>\nresult = df.iloc[0].append(df.iloc[1]).reset_index(drop=True)\n", "metadata": {"problem_id": 43, "library_problem_id": 43, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 20, "code": "result = df.sort_values(by=['0','1','2'],ascending=[False,False,False])\n", "metadata": {"problem_id": 46, "library_problem_id": 46, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 44}}
{"id": 21, "code": "result = df.loc[df['value'] < thresh].sum().to_frame().T\nresult.loc['X'] = result.sum()\nresult = result.drop(result.index[-1])\n", "metadata": {"problem_id": 47, "library_problem_id": 47, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 22, "code": "result = df.copy()\nresult.columns = ['exp_' + col for col in result.columns]\nresult = result.apply(lambda x: x.apply(lambda y: np.exp(y)))\n", "metadata": {"problem_id": 51, "library_problem_id": 51, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 50}}
{"id": 23, "code": "result = pd.DataFrame({'dt': pd.date_range(df['dt'].min(), df['dt'].max()), 'user': df['user'].unique()[0], 'val': df['val'].max()})\n", "metadata": {"problem_id": 59, "library_problem_id": 59, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 56}}
{"id": 24, "code": "result = df.groupby('name').ngroup().add(1).astype(str).replace('0', '1').to_frame('a').join(df.drop('name', axis=1))\n", "metadata": {"problem_id": 62, "library_problem_id": 62, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 61}}
{"id": 25, "code": "\n    df['name'] = df['name'].astype('category').cat.codes\n    return df\n", "metadata": {"problem_id": 63, "library_problem_id": 63, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 61}}
{"id": 26, "code": "result = df.groupby(['name', 'a']).agg({'b': 'first', 'c': 'first'}).reset_index()\nresult['ID'] = result.groupby(['name', 'a']).ngroup() + 1\nresult = result[['ID', 'b', 'c']]\n", "metadata": {"problem_id": 64, "library_problem_id": 64, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 61}}
{"id": 27, "code": "<code>\ndf = df.melt(id_vars=['user', 'someBool'], var_name='date', value_name='value')\n", "metadata": {"problem_id": 65, "library_problem_id": 65, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"id": 28, "code": "\n    result = df[df.c > 0.5][columns].values\n    ### END SOLUTION\n    return result\n", "metadata": {"problem_id": 70, "library_problem_id": 70, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 29, "code": "\n    result = df[df.c > 0.5][columns]\n    result['sum'] = result.sum(axis=1)\n    return result\n", "metadata": {"problem_id": 71, "library_problem_id": 71, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 30, "code": "<code>\nresult = df.loc[df['date'].apply(lambda x: pd.to_datetime(x, format='%m/%d/%y') + pd.Timedelta(days=X)).isin(df['date'].apply(lambda x: pd.to_datetime(x, format='%m/%d/%y')))]\n", "metadata": {"problem_id": 73, "library_problem_id": 73, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 73}}
{"id": 31, "code": "<code>\ndf['date'] = pd.to_datetime(df['date'], format='%m/%d/%y')\ndf['date'] = df['date'].dt.strftime('%d-%b-%Y')\nresult = df[df['date'] != df['date'].shift(1).where(df['date'].diff().dt.days > X)]\n", "metadata": {"problem_id": 75, "library_problem_id": 75, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 73}}
{"id": 32, "code": "<code>\nresult = df.groupby(df.index // 3).agg({'col1': ['sum', 'mean']}).reset_index(level=0, drop=True)\n", "metadata": {"problem_id": 80, "library_problem_id": 80, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 76}}
{"id": 33, "code": "df = df.fillna(method='ffill')\n", "metadata": {"problem_id": 82, "library_problem_id": 82, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 34, "code": "df = df.fillna(method='ffill')\n", "metadata": {"problem_id": 83, "library_problem_id": 83, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 82}}
{"id": 35, "code": "df = df.fillna(df.groupby(df['A'].ne(0).cumsum()).transform('max'))\n", "metadata": {"problem_id": 84, "library_problem_id": 84, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 36, "code": "df['numer'] = df.duration.str.extract(r'(\\d+)')\ndf['time'] = df.duration.str.extract(r'(\\w+)')\ndf['time_days'] = df['time'].replace({'year': 365, 'month': 30, 'week': 7, 'day': 1})\n", "metadata": {"problem_id": 85, "library_problem_id": 85, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 37, "code": "df.index = pd.to_datetime(df.index.get_level_values('date'))\ndf = df.drop(columns=['date'])\n", "metadata": {"problem_id": 91, "library_problem_id": 91, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 91}}
{"id": 38, "code": "\n    df['date'] = pd.to_datetime(df['date'])\n    return df[['date', 'x', 'y']].values\n", "metadata": {"problem_id": 93, "library_problem_id": 93, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 91}}
{"id": 39, "code": "<code>\ndf = pd.melt(df, id_vars=['Country', 'Variable'], var_name='year', value_name='value')\ndf['year'] = df['year'].astype(int)\n", "metadata": {"problem_id": 95, "library_problem_id": 95, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"id": 40, "code": "<code>\ndf = df[abs(df[df.columns[2:]]) < 1]\n", "metadata": {"problem_id": 97, "library_problem_id": 97, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"id": 41, "code": "<code>\ndf = df.replace('&AMP;', '&', regex=True)\n", "metadata": {"problem_id": 100, "library_problem_id": 100, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 100}}
{"id": 42, "code": "<code>\ndf = df.replace('&LT;', '<', regex=True)\n", "metadata": {"problem_id": 101, "library_problem_id": 101, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 100}}
{"id": 43, "code": "\n    result = df.replace('&AMP;', '&', regex=True)\n    return result\n", "metadata": {"problem_id": 102, "library_problem_id": 102, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 100}}
{"id": 44, "code": "<code>\ndf = df.replace({'&AMP;': '&', '&LT;': '<', '&GT;': '>'}, regex=True)\n", "metadata": {"problem_id": 103, "library_problem_id": 103, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 100}}
{"id": 45, "code": "<code>\ndf['state'] = df['col1']\ndf.loc[df['col2'] > 50, 'state'] = df['col2']\ndf.loc[df['col3'] > 50, 'state'] = df['col3']\ndf.loc[df['col2'] > 50, 'state'] = df['col2']\ndf.loc[df['col3'] > 50, 'state'] = df['col3']\ndf.loc[df['col2'] > 50, 'state'] = df['col2']\ndf.loc[df['col3'] > 50, 'state'] = df['col3']\ndf.loc[df['col2'] > 50, 'state'] = df['col2']\ndf.loc[df['col3'] > 50, 'state'] = df['col3']\ndf.loc[df['col2'] > 50, 'state'] = df['col2']\ndf.loc[df['col3'] > 50, 'state'] = df['col3']\ndf.loc[df['col2'] > 50, 'state'] = df['col2']\ndf.loc[df['col3'] > 50, 'state'] = df['col3']\ndf.loc[df['col2'] > 50, 'state'] = df['col2']\ndf.loc[df['col3'] > 50, 'state'] = df['col3']\ndf.loc[df['col2'] > 50, 'state'] = df['col2']\ndf.loc[df['col3'] > 50, 'state'] = df['col3']\ndf.loc[df['col2'] > 50, 'state'] = df['col2']\ndf.loc[df['col3'] > 50, 'state'] = df['col3']\ndf.loc[df['col2'] > 50, 'state'] = df['col2']\ndf.loc[df['col3'] > 50, 'state'] = df['col3']\ndf.loc[df['col2'] > 50, 'state'] = df['col2']\ndf.loc[df['col3'] > 50, 'state'] = df['col3']\ndf.loc[df['col2'] > 50, 'state'] = df['col2']\ndf.loc[df['col3'] > 50, 'state'] = df['col3']\ndf.loc[df['col2'] > 50, 'state'] = df['col2']\ndf.loc[df['col3'] > 50, 'state'] = df['col3']\ndf.loc[df['col2'] > 50, 'state'] = df['col2']\ndf.loc[df['col3'] > 50, 'state'] = df['col3']\ndf.loc[df['col2'] > 50, 'state'] = df['col2']\ndf.loc[df['col3'] > 50, 'state'] = df['col3']\ndf.loc[df['col2'] > 50, 'state'] = df['col2']\ndf.loc[df['col3'] > 50, 'state'] = df['col3']\ndf.loc[df['col2'] > 50, 'state'] = df['col2']\ndf.loc[df['col3'] > 50, 'state'] = df['col3']\ndf.loc[df['col2'] > 50, 'state'] = df['col2']\ndf.loc[df['col3'] > 50, 'state'] = df['col3']\ndf.loc[df['col2'] > 50, 'state'] = df['col2']\ndf.loc[df['col3'] > 50, 'state'] = df['col3']\ndf.loc[df['col2'] > 50, 'state'] = df['col2']\ndf.loc[df['col3'] > 50, 'state'] = df['col3']\ndf.loc[df['col2'] > 50, 'state'] = df['col2']\ndf.loc[df['col3'] > 50, 'state'] = df['col3']\ndf.loc[df['col2'] > 50, 'state'] = df['col2']\ndf.loc[df['col3'] > 50, 'state'] = df['col", "metadata": {"problem_id": 111, "library_problem_id": 111, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 110}}
{"id": 46, "code": "result = df.loc[test]\n", "metadata": {"problem_id": 117, "library_problem_id": 117, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 117}}
{"id": 47, "code": "result = df.loc[test]\n", "metadata": {"problem_id": 118, "library_problem_id": 118, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 117}}
{"id": 48, "code": "<code>\nresult = df.drop(test)\n", "metadata": {"problem_id": 119, "library_problem_id": 119, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 117}}
{"id": 49, "code": "\n    result = df.loc[test]\n    result = result[~result.index.duplicated(keep='first')]\n    return result\n", "metadata": {"problem_id": 120, "library_problem_id": 120, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 117}}
{"id": 50, "code": "<code>\ndf2 = df.groupby('time').apply(lambda x: x.assign(nearest_neighbour=x.apply(lambda y: x[(x['car'] != y['car']) & (((x['x'] - y['x'])**2 + (x['y'] - y['y'])**2) == x[(x['car'] != y['car'])].apply(lambda z: ((z['x'] - y['x'])**2 + (z['y'] - y['y'])**2).min(), axis=1).min())].iloc[0]['car'], axis=1))).reset_index(drop=True)\ndf2['euclidean_distance'] = df2.apply(lambda x: ((x['x'] - df2[df2['car'] == x['nearest_neighbour']]['x'].values[0])**2 + (x['y'] - df2[df2['car'] == x['nearest_neighbour']]['y'].values[0])**2)**0.5, axis=1)\ndf2 = df2[['car', 'nearest_neighbour', 'euclidean_distance']]\n", "metadata": {"problem_id": 121, "library_problem_id": 121, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 121}}
{"id": 51, "code": "<code>\ndf2 = df.groupby('time').apply(lambda x: x.assign(farmost_neighbour=x.apply(lambda y: x[(x['x'] - y['x'])**2 + (x['y'] - y['y'])**2].idxmax(), axis=1), euclidean_distance=x.apply(lambda y: ((x['x'] - y['x'])**2 + (x['y'] - y['y'])**2)**0.5, axis=1))).reset_index(drop=True)\n", "metadata": {"problem_id": 122, "library_problem_id": 122, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 52, "code": "<code>\ndf[\"keywords_all\"] = df[[\"keywords_0\", \"keywords_1\", \"keywords_2\", \"keywords_3\"]].apply(lambda x: \"-\".join(x.dropna().astype(str)), axis=1)\n", "metadata": {"problem_id": 126, "library_problem_id": 126, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 53, "code": "<code>\ndf = df.sample(frac=0.2, random_state=0)\ndf.loc[df.index, 'Quantity'] = 0\n", "metadata": {"problem_id": 127, "library_problem_id": 127, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 127}}
{"id": 54, "code": "<code>\nresult = df.loc[df.duplicated(subset=['col1','col2', '3col'], keep='first')]\nresult['index_original'] = result.index\n", "metadata": {"problem_id": 133, "library_problem_id": 133, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 130}}
{"id": 55, "code": "<code>\nresult = df.loc[df.groupby(['Sp', 'Mt'])['count'].transform(max) == df['count']]\n", "metadata": {"problem_id": 135, "library_problem_id": 135, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 135}}
{"id": 56, "code": "result = df[df.groupby(['Sp','Mt'])['count'].transform('max') == df['count']]\n", "metadata": {"problem_id": 136, "library_problem_id": 136, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 135}}
{"id": 57, "code": "<code>\nresult = df.loc[df.groupby(['Sp','Value'])['count'].transform(max) == df['count']]\n", "metadata": {"problem_id": 138, "library_problem_id": 138, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 135}}
{"id": 58, "code": "result = df.melt(id_vars=df.columns[:3], value_vars=df.columns[3:], var_name='variable_0', value_name='value')\nresult['variable_1'] = result['variable_0'].str[0]\nresult['variable_2'] = result['variable_0'].str[1]\nresult = result.drop(columns=['variable_0'])\n", "metadata": {"problem_id": 142, "library_problem_id": 142, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 141}}
{"id": 59, "code": "<code>\ndf['cumsum'] = df.groupby('id').cumsum()['val']\n", "metadata": {"problem_id": 143, "library_problem_id": 143, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 143}}
{"id": 60, "code": "<code>\ndf['cumsum'] = df.groupby('id').cumsum()['val']\n", "metadata": {"problem_id": 145, "library_problem_id": 145, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 143}}
{"id": 61, "code": "result = df.groupby('r')['v'].sum()\n", "metadata": {"problem_id": 149, "library_problem_id": 149, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 148}}
{"id": 62, "code": "result = df.groupby('l').agg({'v': lambda x: x.sum(skipna=False)})\n", "metadata": {"problem_id": 150, "library_problem_id": 150, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 148}}
{"id": 63, "code": "result = df.corr().applymap(lambda x: 'one-to-one' if x == 1 else 'one-to-many' if x == 0 else 'many-to-many')\n", "metadata": {"problem_id": 153, "library_problem_id": 153, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"id": 64, "code": "result = df.groupby((df['SibSp'] > 0) | (df['Parch'] > 0)).mean()['Survived']\n", "metadata": {"problem_id": 157, "library_problem_id": 157, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 157}}
{"id": 65, "code": "result = df.groupby((df['Survived'] > 0) | (df['Parch'] > 0)).mean()['SibSp']\n", "metadata": {"problem_id": 158, "library_problem_id": 158, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 157}}
{"id": 66, "code": "result = df.groupby('cokey').apply(lambda x: x.sort_values(by='A', ascending=False)).reset_index(drop=True)\n", "metadata": {"problem_id": 161, "library_problem_id": 161, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 160}}
{"id": 67, "code": "df.columns = pd.MultiIndex.from_tuples(df.columns)\ndf.columns = df.columns.map(lambda x: x[1])\ndf.columns.name = 'Lower'\ndf.index.name = 'Caps'\ndf", "metadata": {"problem_id": 162, "library_problem_id": 162, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 162}}
{"id": 68, "code": "df.columns = pd.MultiIndex.from_tuples(df.columns)\ndf = df.stack().unstack(level=0).unstack(level=0)\n", "metadata": {"problem_id": 163, "library_problem_id": 163, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 162}}
{"id": 69, "code": "<code>\nresult = pd.DataFrame({'birdType': someTuple[0], 'birdCount': someTuple[1]})\n", "metadata": {"problem_id": 165, "library_problem_id": 165, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 165}}
{"id": 70, "code": "<code>\nresult = df[(df.sum(axis=1) != 0)]\n", "metadata": {"problem_id": 169, "library_problem_id": 169, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 169}}
{"id": 71, "code": "result = s.sort_values(ascending=False).sort_index()", "metadata": {"problem_id": 173, "library_problem_id": 173, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 173}}
{"id": 72, "code": "df = s.sort_values(ascending=False).reset_index().rename(columns={'index':'1'})\n", "metadata": {"problem_id": 174, "library_problem_id": 174, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 173}}
{"id": 73, "code": "<code>\nresult = df[df.groupby(['Sp', 'Mt'])['count'].transform('min') == df['count']]\n", "metadata": {"problem_id": 179, "library_problem_id": 179, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 177}}
{"id": 74, "code": "df['Date'] = df['Member'].map(dict).fillna(df['Date'])\n", "metadata": {"problem_id": 182, "library_problem_id": 182, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 181}}
{"id": 75, "code": "df['Date'] = df['Member'].map(dict).fillna('17/8/1926').apply(lambda x: pd.to_datetime(x, format='%d/%m/%Y').strftime('%d-%b-%Y'))\n", "metadata": {"problem_id": 184, "library_problem_id": 184, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 181}}
{"id": 76, "code": "df['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%y')\ndf['Count_d'] = df.groupby('Date').Date.transform('count')\ndf['Count_m'] = df.groupby([df['Date'].dt.year.rename('year'), df['Date'].dt.month.rename('month')]).Date.transform('count')\ndf['Count_y'] = df.groupby(df['Date'].dt.year.rename('year')).Date.transform('count')\ndf['Count_Val'] = df.groupby('Val').Date.transform('count')\ndf = df.drop_duplicates()\n", "metadata": {"problem_id": 186, "library_problem_id": 186, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 185}}
{"id": 77, "code": "result1 = df.groupby('Date').sum().apply(lambda x: x == 0).astype(int)\nresult2 = df.groupby('Date').sum().apply(lambda x: x != 0).astype(int)\n", "metadata": {"problem_id": 188, "library_problem_id": 188, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 188}}
{"id": 78, "code": "result1 = df.groupby('Date').apply(lambda x: (x % 2 == 0).sum())\nresult2 = df.groupby('Date').apply(lambda x: (x % 2 == 1).sum())\n", "metadata": {"problem_id": 189, "library_problem_id": 189, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 188}}
{"id": 79, "code": "result = pd.pivot_table(df, values=['D','E'], index=['B'], aggfunc={'D': np.sum, 'E': np.mean})", "metadata": {"problem_id": 191, "library_problem_id": 191, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 190}}
{"id": 80, "code": "<code>\nresult = pd.pivot_table(df, values=['D','E'], index=['B'], aggfunc={'D': np.sum, 'E': np.mean})\n", "metadata": {"problem_id": 192, "library_problem_id": 192, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 190}}
{"id": 81, "code": "<code>\nresult = pd.pivot_table(df, values=['D','E'], index=['B'], aggfunc={'D': np.max, 'E': np.min})\n", "metadata": {"problem_id": 193, "library_problem_id": 193, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 190}}
{"id": 82, "code": "<code>\nresult = df.assign(var2=df['var2'].str.split(',')).explode('var2')\n", "metadata": {"problem_id": 194, "library_problem_id": 194, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 194}}
{"id": 83, "code": "<code>\nresult = df.var2.str.split(',', expand=True).stack().reset_index(level=1, drop=True).to_frame('var2').join(df)\n", "metadata": {"problem_id": 195, "library_problem_id": 195, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 194}}
{"id": 84, "code": "<code>\nresult = pd.DataFrame({'var1': df['var1'].repeat(df['var2'].str.count('-') + 1), 'var2': df['var2'].str.split('-').explode()})\n", "metadata": {"problem_id": 196, "library_problem_id": 196, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 194}}
{"id": 85, "code": "<code>\ndf['fips'] = df['row'].str[:5]\ndf['row'] = df['row'].str[6:]\n", "metadata": {"problem_id": 199, "library_problem_id": 199, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 199}}
{"id": 86, "code": "<code>\ndf['2001'] = df['2001'].cumsum()\ndf['2002'] = df['2002'].cumsum()\ndf['2003'] = df['2003'].cumsum()\ndf['2004'] = df['2004'].cumsum()\ndf['2005'] = df['2005'].cumsum()\ndf['2006'] = df['2006'].cumsum()\ndf['2001'] = df['2001'].div(df['2001'].ne(0).sum(axis=1))\ndf['2002'] = df['2002'].div(df['2002'].ne(0).sum(axis=1))\ndf['2003'] = df['2003'].div(df['2003'].ne(0).sum(axis=1))\ndf['2004'] = df['2004'].div(df['2004'].ne(0).sum(axis=1))\ndf['2005'] = df['2005'].div(df['2005'].ne(0).sum(axis=1))\ndf['2006'] = df['2006'].div(df['2006'].ne(0).sum(axis=1))\n", "metadata": {"problem_id": 203, "library_problem_id": 203, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 202}}
{"id": 87, "code": "\n    result = df.copy()\n    result['2001'] = result['2001'].cumsum()\n    result['2002'] = result['2002'].cumsum()\n    result['2003'] = result['2003'].cumsum()\n    result['2004'] = result['2004'].cumsum()\n    result['2005'] = result['2005'].cumsum()\n    result['2006'] = result['2006'].cumsum()\n    result['2001'] = result['2001'] / (result['2001'] != 0).cumsum()\n    result['2002'] = result['2002'] / (result['2002'] != 0).cumsum()\n    result['2003'] = result['2003'] / (result['2003'] != 0).cumsum()\n    result['2004'] = result['2004'] / (result['2004'] != 0).cumsum()\n    result['2005'] = result['2005'] / (result['2005'] != 0).cumsum()\n    result['2006'] = result['2006'] / (result['2006'] != 0).cumsum()\n    return result\n", "metadata": {"problem_id": 204, "library_problem_id": 204, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 202}}
{"id": 88, "code": "<code>\ndf['label'] = df['Close'].diff().apply(lambda x: 1 if x > 0 else -1)\ndf['DateTime'] = df['DateTime'].dt.strftime('%d-%b-%Y')\ndf.loc[0, 'label'] = 1\n", "metadata": {"problem_id": 208, "library_problem_id": 208, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 206}}
{"id": 89, "code": "df['arrival_time'] = pd.to_datetime(df['arrival_time'])\ndf['departure_time'] = pd.to_datetime(df['departure_time'])\ndf['Duration'] = df['departure_time'] - df['arrival_time']\ndf['Duration'] = df['Duration'].apply(lambda x: x.total_seconds() / 3600)\ndf['Duration'] = df['Duration'].apply(lambda x: str(timedelta(seconds=x)))\ndf['Duration'] = df['Duration'].apply(lambda x: x.split('.')[0])\ndf['Duration'] = df['Duration'].apply(lambda x: x.split(' ')[0] if x != '0:00:00' else '')\ndf['arrival_time'] = df['arrival_time'].apply(lambda x: x.strftime('%Y-%m-%d %H:%M:%S') if x != '0000-00-00 00:00:00' else '')\ndf['departure_time'] = df['departure_time'].apply(lambda x: x.strftime('%Y-%m-%d %H:%M:%S') if x != '0000-00-00 00:00:00' else '')\ndf = df.replace('', pd.NA)\ndf = df.dropna()\ndf = df.reset_index(drop=True)\n", "metadata": {"problem_id": 209, "library_problem_id": 209, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 209}}
{"id": 90, "code": "df['arrival_time'] = pd.to_datetime(df['arrival_time'])\ndf['departure_time'] = pd.to_datetime(df['departure_time'])\ndf['Duration'] = df['departure_time'] - df['arrival_time']\ndf['Duration'] = df['Duration'].dt.total_seconds()\ndf.loc[df['arrival_time'] == '0', 'arrival_time'] = pd.NaT\ndf.loc[df['departure_time'] == '0', 'departure_time'] = pd.NaT\ndf['Duration'] = df['Duration'].fillna(0)\n", "metadata": {"problem_id": 210, "library_problem_id": 210, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 209}}
{"id": 91, "code": "result = df.groupby('key1').apply(lambda x: (x['key2'] == 'one').sum()).reset_index(name='count')\n", "metadata": {"problem_id": 212, "library_problem_id": 212, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 212}}
{"id": 92, "code": "max_result = df.index.max()\nmin_result = df.index.min()\n", "metadata": {"problem_id": 215, "library_problem_id": 215, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 215}}
{"id": 93, "code": "result = df[~((df['closing_price'] >= 99) & (df['closing_price'] <= 101))]\n", "metadata": {"problem_id": 218, "library_problem_id": 218, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 217}}
{"id": 94, "code": "<code>\ndf['SOURCE_NAME'] = df['SOURCE_NAME'].str.split('_').str[0]\n", "metadata": {"problem_id": 220, "library_problem_id": 220, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 220}}
{"id": 95, "code": "<code>\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].replace(np.nan, 1 - df['Column_x'].mean())\n", "metadata": {"problem_id": 223, "library_problem_id": 223, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 223}}
{"id": 96, "code": "<code>\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].replace(np.nan, 0)\ndf['Column_x'] = df['Column_x'].replace(0, 0.5)\ndf['Column_x'] = df['Column_x'].replace(1, 1)\n", "metadata": {"problem_id": 224, "library_problem_id": 224, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 223}}
{"id": 97, "code": "<code>\ndf['Column_x'] = df['Column_x'].fillna(0)\ndf['Column_x'] = df['Column_x'].astype(int)\ndf['Column_x'] = df['Column_x'].replace(0, df['Column_x'].value_counts().index[0])\ndf['Column_x'] = df['Column_x'].replace(1, df['Column_x'].value_counts().index[1])\n", "metadata": {"problem_id": 225, "library_problem_id": 225, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 223}}
{"id": 98, "code": "result = pd.DataFrame([[(a['one'][i], b['one'][i]), (a['two'][i], b['two'][i])] for i in range(len(a))], columns=['one', 'two'])\n", "metadata": {"problem_id": 226, "library_problem_id": 226, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 226}}
{"id": 99, "code": "result = pd.DataFrame(list(zip(a.values, b.values, c.values)), columns=['one', 'two'])\n", "metadata": {"problem_id": 227, "library_problem_id": 227, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 226}}
{"id": 100, "code": "result = pd.DataFrame(np.array([[(a.iloc[i, 0], b.iloc[i, 0]) for i in range(len(a))], [(a.iloc[i, 1], b.iloc[i, 1]) for i in range(len(a))]]), columns=['one', 'two'])\n", "metadata": {"problem_id": 228, "library_problem_id": 228, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 226}}
{"id": 101, "code": "result = pd.concat([C, D]).drop_duplicates(subset=\"A\", keep=\"first\")\n", "metadata": {"problem_id": 241, "library_problem_id": 241, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 240}}
{"id": 102, "code": "result = df.groupby('user').agg(lambda x: list(zip(x['time'], x['amount'])))\n", "metadata": {"problem_id": 244, "library_problem_id": 244, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 243}}
{"id": 103, "code": "result = df.groupby('user').agg(lambda x: list(zip(x['time'], x['amount'])))\n", "metadata": {"problem_id": 245, "library_problem_id": 245, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 243}}
{"id": 104, "code": "<code>\ndf = pd.DataFrame(series.values.tolist(), index=series.index)\n", "metadata": {"problem_id": 247, "library_problem_id": 247, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 246}}
{"id": 105, "code": "result = [col for col in df.columns if s in col]\n", "metadata": {"problem_id": 248, "library_problem_id": 248, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 248}}
{"id": 106, "code": "result = df.filter(regex=f'^(?!.*({s})$).*$').columns.tolist()\n", "metadata": {"problem_id": 249, "library_problem_id": 249, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 248}}
{"id": 107, "code": "result = ','.join(str(x) for x in df['col1'].sum())\n", "metadata": {"problem_id": 256, "library_problem_id": 256, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 254}}
{"id": 108, "code": "result = df[df.index.get_level_values('a').isin(filt[filt].index)]\n", "metadata": {"problem_id": 262, "library_problem_id": 262, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 262}}
{"id": 109, "code": "result = df.loc[0].where(df.loc[0] == df.loc[8]).dropna().index\n", "metadata": {"problem_id": 265, "library_problem_id": 265, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 264}}
{"id": 110, "code": "result = df.loc[0].ne(df.loc[8]).where(df.loc[0].ne(df.loc[8])).dropna().index.tolist()\n", "metadata": {"problem_id": 266, "library_problem_id": 266, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 264}}
{"id": 111, "code": "<code>\nresult = df.sort_values(by='VIM', ascending=True)\n", "metadata": {"problem_id": 277, "library_problem_id": 277, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 276}}
{"id": 112, "code": "result = corr[corr > 0.3].unstack().drop_duplicates()\n", "metadata": {"problem_id": 281, "library_problem_id": 281, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 280}}
{"id": 113, "code": "<code>\nresult = df.rename(columns={df.columns[-1]: 'Test'})\n", "metadata": {"problem_id": 282, "library_problem_id": 282, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 282}}
{"id": 114, "code": "<code>\ndf['frequent'] = df.apply(lambda row: row.value_counts().idxmax(), axis=1)\ndf['freq_count'] = df.apply(lambda row: row.value_counts().max(), axis=1)\n", "metadata": {"problem_id": 285, "library_problem_id": 285, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 284}}
{"id": 115, "code": "<code>\ndf['frequent'] = df.apply(lambda x: list(x.value_counts().index), axis=1)\ndf['freq_count'] = df.apply(lambda x: list(x.value_counts()), axis=1)\n", "metadata": {"problem_id": 286, "library_problem_id": 286, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 284}}
{"id": 116, "code": "result = df.groupby([\"id1\",\"id2\"]).agg({\"foo\": \"mean\", \"bar\": \"mean\"})\n", "metadata": {"problem_id": 287, "library_problem_id": 287, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 287}}
{"id": 117, "code": "result = df.groupby([\"id1\",\"id2\"]).agg({\"foo\": \"mean\", \"bar\": lambda x: x.replace(\"NULL\", 0).astype(float).mean()})\n", "metadata": {"problem_id": 288, "library_problem_id": 288, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 287}}
{"id": 118, "code": "result = x[~np.isnan(x).any(axis=1)].tolist()\n", "metadata": {"problem_id": 294, "library_problem_id": 3, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 1}}
{"id": 119, "code": "b = np.zeros((len(a), a.max() + 1))\nb[np.arange(len(a)), a] = 1\n", "metadata": {"problem_id": 297, "library_problem_id": 6, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 120, "code": "<code>\nb = np.zeros((len(a), len(a)))\nb[np.arange(len(a)), a.argsort()] = 1\n", "metadata": {"problem_id": 298, "library_problem_id": 7, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 121, "code": "<code>\nr_old = np.random.randint(3, size=(100, 2000)) - 1\nr_new = np.random.randint(3, size=(100, 2000)) - 1\n", "metadata": {"problem_id": 308, "library_problem_id": 17, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"id": 122, "code": "result = np.unravel_index(np.argmax(a), a.shape)\n", "metadata": {"problem_id": 309, "library_problem_id": 18, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 18}}
{"id": 123, "code": "result = np.unravel_index(np.argmin(a), a.shape)\n", "metadata": {"problem_id": 310, "library_problem_id": 19, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 124, "code": "result = np.array(a)\n", "metadata": {"problem_id": 317, "library_problem_id": 26, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 125, "code": "a = a[:, permutation]", "metadata": {"problem_id": 318, "library_problem_id": 27, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 27}}
{"id": 126, "code": "result = a[permutation]\n", "metadata": {"problem_id": 319, "library_problem_id": 28, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 27}}
{"id": 127, "code": "result = np.argwhere(a == a.min())\n", "metadata": {"problem_id": 322, "library_problem_id": 31, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 29}}
{"id": 128, "code": "<code>\nresult = np.sin(np.deg2rad(degree))\n", "metadata": {"problem_id": 323, "library_problem_id": 32, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 129, "code": "<code>\nresult = np.cos(np.deg2rad(degree))\n", "metadata": {"problem_id": 324, "library_problem_id": 33, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 130, "code": "result = np.pad(A, (0, length - len(A)), 'constant', constant_values=(0, 0))\n", "metadata": {"problem_id": 327, "library_problem_id": 36, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 131, "code": "\n    result = np.array(np.gcd(numerator, denominator))\n    result = (numerator // result, denominator // result)\n    return result\n", "metadata": {"problem_id": 332, "library_problem_id": 41, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 40}}
{"id": 132, "code": "result = (numerator // np.gcd(numerator, denominator), denominator // np.gcd(numerator, denominator))\n", "metadata": {"problem_id": 333, "library_problem_id": 42, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 40}}
{"id": 133, "code": "result = np.diag(a[::-1, ::-1])\n", "metadata": {"problem_id": 338, "library_problem_id": 47, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 45}}
{"id": 134, "code": "result = X.flatten().tolist()\n", "metadata": {"problem_id": 340, "library_problem_id": 49, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 135, "code": "result = X.flatten('C')\n", "metadata": {"problem_id": 341, "library_problem_id": 50, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 49}}
{"id": 136, "code": "\n    result = []\n    for row in X:\n        for element in row:\n            result.append(element)\n    return result\n", "metadata": {"problem_id": 342, "library_problem_id": 51, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 49}}
{"id": 137, "code": "result = X.flatten(order='F')\n", "metadata": {"problem_id": 343, "library_problem_id": 52, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 49}}
{"id": 138, "code": "<code>\np_value = scipy.stats.ttest_ind(a, b, equal_var=False).pvalue\n", "metadata": {"problem_id": 350, "library_problem_id": 59, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 59}}
{"id": 139, "code": "c = b[np.argsort(a, axis=0)]\n", "metadata": {"problem_id": 355, "library_problem_id": 64, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 140, "code": "result = b[np.argsort(a.sum(axis=(1, 2)))]\n", "metadata": {"problem_id": 358, "library_problem_id": 67, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 64}}
{"id": 141, "code": "<code>\na = np.delete(a, 2, axis=0)\n", "metadata": {"problem_id": 360, "library_problem_id": 69, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 68}}
{"id": 142, "code": "result = np.delete(a, del_col - 1, axis=1)", "metadata": {"problem_id": 362, "library_problem_id": 71, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 143, "code": "\n    a_l = a.tolist()\n    a_l.insert(pos, element)\n    return np.asarray(a_l)\n", "metadata": {"problem_id": 365, "library_problem_id": 74, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 72}}
{"id": 144, "code": "a = np.insert(a, pos, element, axis=0)", "metadata": {"problem_id": 366, "library_problem_id": 75, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 72}}
{"id": 145, "code": "result = array_of_arrays.copy()\n", "metadata": {"problem_id": 367, "library_problem_id": 76, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 146, "code": "<code>\nlow = np.min(grades)\nhigh = np.max(grades)\n", "metadata": {"problem_id": 375, "library_problem_id": 84, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 147, "code": "a_np = a.numpy()", "metadata": {"problem_id": 379, "library_problem_id": 88, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 88}}
{"id": 148, "code": "a_tf = tf.convert_to_tensor(a)", "metadata": {"problem_id": 380, "library_problem_id": 89, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 88}}
{"id": 149, "code": "result = np.argsort(a)[::-1]\n", "metadata": {"problem_id": 381, "library_problem_id": 90, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 150, "code": "result = A**n\n", "metadata": {"problem_id": 384, "library_problem_id": 93, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 93}}
{"id": 151, "code": "result = a.reshape(2, 2, 2, 2).transpose(0, 2, 1, 3).reshape(2, 2, 4)\n", "metadata": {"problem_id": 387, "library_problem_id": 96, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 94}}
{"id": 152, "code": "a = np.array(eval(string))", "metadata": {"problem_id": 394, "library_problem_id": 103, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 103}}
{"id": 153, "code": "\n    result = np.exp(np.random.uniform(np.log(min), np.log(max), n))\n    return result\n", "metadata": {"problem_id": 397, "library_problem_id": 106, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"id": 154, "code": "<code>\nresult = np.array([])\n", "metadata": {"problem_id": 400, "library_problem_id": 109, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"id": 155, "code": "result = np.maximum.reduceat(a, np.where(np.diff(index))[0] + 1)", "metadata": {"problem_id": 406, "library_problem_id": 115, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 114}}
{"id": 156, "code": "result = a[np.unique(index[index >= 0])][np.bincount(index[index >= 0]).argmax()]\n", "metadata": {"problem_id": 408, "library_problem_id": 117, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 114}}
{"id": 157, "code": "result = np.pad(a, ((0, high_index), (0, high_index)), mode='constant')[low_index:high_index, low_index:high_index]\n", "metadata": {"problem_id": 411, "library_problem_id": 120, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 120}}
{"id": 158, "code": "<code>\nbin_data_mean = np.mean(data.reshape(-1, bin_size), axis=1)\n", "metadata": {"problem_id": 414, "library_problem_id": 123, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 123}}
{"id": 159, "code": "<code>\nbin_data = [np.array_split(row, len(row) // bin_size) for row in data]\nbin_data_mean = [np.mean(bin, axis=0) for bin in bin_data]\n", "metadata": {"problem_id": 419, "library_problem_id": 128, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 160, "code": "result = df.values.reshape(15, 4, 5)", "metadata": {"problem_id": 424, "library_problem_id": 133, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 132}}
{"id": 161, "code": "result = np.unpackbits(a.astype(np.uint8), axis=1)[:, -m:]\n", "metadata": {"problem_id": 425, "library_problem_id": 134, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 134}}
{"id": 162, "code": "result = np.array([np.unpackbits(np.uint8(i), 'little') for i in a])\nresult = np.bitwise_xor.reduce(result, axis=0)\nresult = result.reshape(1, m)\n", "metadata": {"problem_id": 427, "library_problem_id": 136, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 134}}
{"id": 163, "code": "result = (a.mean() - 3 * a.std(), a.mean() + 3 * a.std())\n", "metadata": {"problem_id": 428, "library_problem_id": 137, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 137}}
{"id": 164, "code": "result = (a.mean() - 2 * a.std(), a.mean() + 2 * a.std())\n", "metadata": {"problem_id": 429, "library_problem_id": 138, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 137}}
{"id": 165, "code": "\n    result = (np.mean(a) - 3 * np.std(a), np.mean(a) + 3 * np.std(a))\n    return result\n", "metadata": {"problem_id": 430, "library_problem_id": 139, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 137}}
{"id": 166, "code": "<code>\na[1:, 0] = 0\na[0, 1:] = 0\n", "metadata": {"problem_id": 435, "library_problem_id": 144, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 142}}
{"id": 167, "code": "mask = a == np.amax(a, axis=1, keepdims=True)\n", "metadata": {"problem_id": 436, "library_problem_id": 145, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 145}}
{"id": 168, "code": "C = A[(A >= B[0]) & (A <= B[1]) | (A >= B[1]) & (A <= B[2])]\n", "metadata": {"problem_id": 444, "library_problem_id": 153, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"id": 169, "code": "<code>\nresult = len(a) - rankdata(a).astype(int)\n", "metadata": {"problem_id": 445, "library_problem_id": 154, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 154}}
{"id": 170, "code": "<code>\nresult = np.argsort(rankdata(a, method='dense')[::-1])\n", "metadata": {"problem_id": 446, "library_problem_id": 155, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 154}}
{"id": 171, "code": "result = X/np.array([LA.norm(v,ord=1) for v in X]).reshape(5,1)\n", "metadata": {"problem_id": 452, "library_problem_id": 161, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 161}}
{"id": 172, "code": "result = X / np.linalg.norm(X, axis=1, keepdims=True)\n", "metadata": {"problem_id": 453, "library_problem_id": 162, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 161}}
{"id": 173, "code": "result = np.select([df['a'].str.contains(target)], [choices], default=np.nan)", "metadata": {"problem_id": 455, "library_problem_id": 164, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 164}}
{"id": 174, "code": "result = np.sqrt(((a[:, None, :] - a) ** 2).sum(axis=2))\n", "metadata": {"problem_id": 456, "library_problem_id": 165, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 165}}
{"id": 175, "code": "result = np.sqrt(np.sum((a[:, np.newaxis, :] - a)**2, axis=2))\n", "metadata": {"problem_id": 457, "library_problem_id": 166, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 165}}
{"id": 176, "code": "result = np.zeros((a.shape[0], a.shape[0]))\nfor i in range(a.shape[0]):\n    for j in range(i, a.shape[0]):\n        result[i, j] = np.linalg.norm(a[i] - a[j])\nresult += result.T", "metadata": {"problem_id": 458, "library_problem_id": 167, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 165}}
{"id": 177, "code": "AVG = np.mean(np.asarray(A, dtype=float), axis=0)\n", "metadata": {"problem_id": 461, "library_problem_id": 170, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 168}}
{"id": 178, "code": "result = np.unique(a[a.nonzero()], axis=0)\n", "metadata": {"problem_id": 463, "library_problem_id": 172, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 171}}
{"id": 179, "code": "result = np.lib.stride_tricks.sliding_window_view(a, size)[:, :, :, :]\n", "metadata": {"problem_id": 468, "library_problem_id": 177, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 176}}
{"id": 180, "code": "result = np.mean(a.real)\n", "metadata": {"problem_id": 469, "library_problem_id": 178, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 178}}
{"id": 181, "code": "a[~np.eye(a.shape[0], dtype=bool)] = 0\n", "metadata": {"problem_id": 478, "library_problem_id": 187, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 187}}
{"id": 182, "code": "result = np.where((x == a) & (y == b))[0]\n", "metadata": {"problem_id": 481, "library_problem_id": 190, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 189}}
{"id": 183, "code": "result = np.polyfit(x, y, 2)\n", "metadata": {"problem_id": 482, "library_problem_id": 191, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 191}}
{"id": 184, "code": "result = np.polyfit(x, y, degree)\n", "metadata": {"problem_id": 483, "library_problem_id": 192, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 191}}
{"id": 185, "code": "<code>\nresult = MinMaxScaler().fit_transform(arr)\n", "metadata": {"problem_id": 487, "library_problem_id": 196, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 195}}
{"id": 186, "code": "<code>\nscaler = MinMaxScaler()\nresult = scaler.fit_transform(a.reshape(-1, a.shape[-1])).reshape(a.shape)\n", "metadata": {"problem_id": 488, "library_problem_id": 197, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 195}}
{"id": 187, "code": "arr = arr.copy()\nfor i in range(5):\n    mask = arr < n1[i]\n    mask2 = arr >= n2[i]\n    arr[mask] = 0\n    arr[mask2] = 30\n    arr[~mask & ~mask2] += 5\n", "metadata": {"problem_id": 490, "library_problem_id": 199, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 198}}
{"id": 188, "code": "result = all(np.array_equal(a[0], x) for x in a)", "metadata": {"problem_id": 493, "library_problem_id": 202, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Origin", "perturbation_origin_id": 202}}
{"id": 189, "code": "result = np.pad(a, ((0, shape[0] - a.shape[0]), (0, shape[1] - a.shape[1])), 'constant', constant_values=element)", "metadata": {"problem_id": 497, "library_problem_id": 206, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 204}}
{"id": 190, "code": "\n    result = np.zeros(shape)\n    result[:arr.shape[0], :arr.shape[1]] = arr\n    return result\n", "metadata": {"problem_id": 498, "library_problem_id": 207, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 204}}
{"id": 191, "code": "result = a[np.arange(b.shape[0]), np.arange(b.shape[1]), b]\n", "metadata": {"problem_id": 501, "library_problem_id": 210, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 210}}
{"id": 192, "code": "result = np.sum(a[np.arange(b.shape[0]), np.arange(b.shape[1]), b])\n", "metadata": {"problem_id": 504, "library_problem_id": 213, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 210}}
{"id": 193, "code": "result = np.sum(a[np.arange(a.shape[0]), np.arange(a.shape[1]), b])\n", "metadata": {"problem_id": 505, "library_problem_id": 214, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 210}}
{"id": 194, "code": "<code>\nresult = df.loc[df['a'].between(1, 4), 'b']\n", "metadata": {"problem_id": 506, "library_problem_id": 215, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 215}}
{"id": 195, "code": "for i, ls in enumerate(plt.linestyle.LineStyle):\n    plt.plot(x, np.random.rand(10), ls=ls, label=ls)\nplt.legend()\nplt.show()", "metadata": {"problem_id": 515, "library_problem_id": 4, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 196, "code": "for i, ls in enumerate(plt.linestyle.LineStyle):\n    plt.plot(x, np.random.rand(10), ls=ls, label=ls)\nplt.legend()\nplt.show()", "metadata": {"problem_id": 516, "library_problem_id": 5, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 197, "code": "plt.axvspan(2, 4, color='red', alpha=0.2)\n", "metadata": {"problem_id": 520, "library_problem_id": 9, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 198, "code": "seaborn.relplot(data=df, x=\"Height (cm)\", y=\"Weight (kg)\", hue=\"Gender\", kind=\"scatter\")\nplt.show()", "metadata": {"problem_id": 523, "library_problem_id": 12, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 12}}
{"id": 199, "code": "plt.xticks(rotation=45)\n", "metadata": {"problem_id": 533, "library_problem_id": 22, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 21}}
{"id": 200, "code": "plt.xticks(np.arange(0, 2 * np.pi, np.pi / 2))\n", "metadata": {"problem_id": 534, "library_problem_id": 23, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 21}}
{"id": 201, "code": "plt.imshow(H, cmap='gray')\nplt.show()\n", "metadata": {"problem_id": 537, "library_problem_id": 26, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 25}}
{"id": 202, "code": "myTitle = myTitle.replace(\" - \", \"\\n\")\n", "metadata": {"problem_id": 540, "library_problem_id": 29, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 29}}
{"id": 203, "code": "y = y[::-1]\n", "metadata": {"problem_id": 541, "library_problem_id": 30, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 204, "code": "plt.xticks([0, 1.5])\nplt.yticks([0, 1.5])\n", "metadata": {"problem_id": 542, "library_problem_id": 31, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 31}}
{"id": 205, "code": "plt.scatter(x, y, edgecolor='black', facecolor='blue')\nplt.show()", "metadata": {"problem_id": 545, "library_problem_id": 34, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 34}}
{"id": 206, "code": "plt.ticklabel_format(style='plain', axis='y')\n", "metadata": {"problem_id": 547, "library_problem_id": 36, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 207, "code": "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\nax1.plot(x, y1)\nax1.set_title('sin(x)')\nax1.set_xlabel('x')\nax1.set_ylabel('sin(x)')\nax1.spines['top'].set_visible(False)\nax1.spines['right'].set_visible(False)\nax2.plot(x, y2)\nax2.set_title('cos(x)')\nax2.set_xlabel('x')\nax2.set_ylabel('cos(x)')\nax2.spines['top'].set_visible(False)\nax2.spines['right'].set_visible(False)\nplt.show()", "metadata": {"problem_id": 550, "library_problem_id": 39, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 38}}
{"id": 208, "code": "plt.xticks([3, 4])\nplt.grid(axis='x')\n", "metadata": {"problem_id": 553, "library_problem_id": 42, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 209, "code": "plt.grid()\n", "metadata": {"problem_id": 556, "library_problem_id": 45, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 210, "code": "plt.legend(loc=\"lower right\")\n", "metadata": {"problem_id": 557, "library_problem_id": 46, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 46}}
{"id": 211, "code": "ax.xaxis.tick_top()\n", "metadata": {"problem_id": 560, "library_problem_id": 49, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 212, "code": "plt.plot(x, y)\nplt.xlabel('X')\nplt.xlim(xmin=-20)\n", "metadata": {"problem_id": 561, "library_problem_id": 50, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 50}}
{"id": 213, "code": "plt.plot(x, y)\nplt.yticks(y, rotation=90)\nplt.ylabel(\"Y\")\n", "metadata": {"problem_id": 564, "library_problem_id": 53, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 52}}
{"id": 214, "code": "sns.jointplot(x='total_bill', y='tip', data=tips, kind='reg', color='green', scatter_kws={'color': 'blue'})\n", "metadata": {"problem_id": 565, "library_problem_id": 54, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 215, "code": "plt.plot(x, y)\nplt.xlabel('X')\nplt.xlim(0, 10)\nplt.ylim(0, 10)\nplt.show()", "metadata": {"problem_id": 571, "library_problem_id": 60, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 59}}
{"id": 216, "code": "plt.axvline(0.22058956, color='red')\nplt.axvline(0.33088437, color='red')\nplt.axvline(2.20589566, color='red')\n", "metadata": {"problem_id": 573, "library_problem_id": 62, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"id": 217, "code": "plt.imshow(rand_mat, cmap='hot', interpolation='nearest')\nplt.xticks(range(len(xlabels)), xlabels)\nplt.yticks(range(len(ylabels)), ylabels[::-1])\nplt.xlabel('x-axis')\nplt.ylabel('y-axis')\nplt.show()", "metadata": {"problem_id": 574, "library_problem_id": 63, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 218, "code": "plt.hist(x, edgecolor='k', linewidth=1.2)\nplt.show()\n", "metadata": {"problem_id": 581, "library_problem_id": 70, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 70}}
{"id": 219, "code": "fig, ax = plt.subplots(1, 2, figsize=(10, 5))\nax[0].set_box_aspect(1)\nax[1].set_box_aspect(1)\n", "metadata": {"problem_id": 582, "library_problem_id": 71, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"id": 220, "code": "plt.hist(x, bins=bins, alpha=0.5, label='x')\nplt.hist(y, bins=bins, alpha=0.5, label='y')\nplt.legend()\nplt.show()", "metadata": {"problem_id": 583, "library_problem_id": 72, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 72}}
{"id": 221, "code": "plt.plot(x[:, 0], label='a')\nplt.plot(x[:, 1], label='b')\nplt.legend()\nplt.show()", "metadata": {"problem_id": 587, "library_problem_id": 76, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 222, "code": "plt.plot([p[0] for p in points], [p[1] for p in points])\nplt.yscale('log')\nplt.show()", "metadata": {"problem_id": 589, "library_problem_id": 78, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 78}}
{"id": 223, "code": "plt.plot(x, y)\nplt.xscale('log')\nplt.yscale('log')\nplt.xticks(x, x)\nplt.yticks(y, y)\nplt.show()", "metadata": {"problem_id": 593, "library_problem_id": 82, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 224, "code": "fig, (ax1, ax2) = plt.subplots(1, 2)\nax1.plot(x, y, label='y')\nax2.plot(z, a, label='a')\nfig.legend()\nplt.show()", "metadata": {"problem_id": 597, "library_problem_id": 86, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 86}}
{"id": 225, "code": "plt.xticks(range(0, 10, 2), [2.1, 3, 7.6])\n", "metadata": {"problem_id": 601, "library_problem_id": 90, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 226, "code": "plt.yticks(rotation=-60)\nplt.xticks(rotation=90, verticalalignment='top')\n", "metadata": {"problem_id": 603, "library_problem_id": 92, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 91}}
{"id": 227, "code": "plt.xticks(x, alpha=0.5)\n", "metadata": {"problem_id": 604, "library_problem_id": 93, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 91}}
{"id": 228, "code": "df.plot(kind=\"line\", xlabel=\"X\", ylabel=\"Y\")\n", "metadata": {"problem_id": 608, "library_problem_id": 97, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"id": 229, "code": "plt.scatter(x, y, marker=(5, 0), edgecolors='none')\nplt.show()", "metadata": {"problem_id": 610, "library_problem_id": 99, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"id": 230, "code": "plt.scatter(x, y, marker='*', edgecolors='black')\nplt.show()", "metadata": {"problem_id": 611, "library_problem_id": 100, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"id": 231, "code": "plt.axvline(x=3, color='red', label='cutoff')\nplt.legend()\nplt.show()", "metadata": {"problem_id": 616, "library_problem_id": 105, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 105}}
{"id": 232, "code": "fig, ax = plt.subplots(subplot_kw=dict(projection=\"polar\"))\nax.bar(x=[0, 1], height=height, width=0.5)\nax.set_xticks([0, 1])\nax.set_xticklabels(labels)\n", "metadata": {"problem_id": 617, "library_problem_id": 106, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 106}}
{"id": 233, "code": "plt.pie(data, labels=l, wedgeprops={\"width\": 0.4})\nplt.show()", "metadata": {"problem_id": 618, "library_problem_id": 107, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"id": 234, "code": "plt.plot(x, y)\nplt.minorticks_on()\nplt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\nplt.grid(which='major', linestyle='-', linewidth='0.5', color='gray')\nplt.show()", "metadata": {"problem_id": 620, "library_problem_id": 109, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"id": 235, "code": "plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\nplt.title(\"Activity Pie Chart\")\nplt.show()", "metadata": {"problem_id": 622, "library_problem_id": 111, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 111}}
{"id": 236, "code": "plt.axvline(x=55, color=\"green\")\n", "metadata": {"problem_id": 624, "library_problem_id": 113, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 113}}
{"id": 237, "code": "x = np.arange(len(blue_bar))\nplt.bar(x - 0.2, blue_bar, width=0.4, label='Blue')\nplt.bar(x + 0.2, orange_bar, width=0.4, label='Orange')\nplt.legend()\nplt.show()", "metadata": {"problem_id": 625, "library_problem_id": 114, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"id": 238, "code": "fig, ax = plt.subplots(1, 2, figsize=(10, 5))\nax[0].plot(x, y, label='y')\nax[0].plot(x, z, label='z')\nax[0].legend()\nax[1].plot(a, z)\n", "metadata": {"problem_id": 626, "library_problem_id": 115, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 115}}
{"id": 239, "code": "plt.scatter(x, y, c=y, cmap='Spectral')\nplt.colorbar()\nplt.show()", "metadata": {"problem_id": 627, "library_problem_id": 116, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 116}}
{"id": 240, "code": "plt.plot(x, y, label=\"Line\", marker=\"o\")\nplt.legend(handles=[plt.plot([], [], marker=\"o\", label=\"Line\", ms=0.3)[0]])\n", "metadata": {"problem_id": 633, "library_problem_id": 122, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 241, "code": "plt.legend()\nplt.show()", "metadata": {"problem_id": 635, "library_problem_id": 124, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 242, "code": "plt.plot(x, y, clip_on=False)\nplt.xlim(0, 10)\nplt.ylim(0, 10)\n", "metadata": {"problem_id": 640, "library_problem_id": 129, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 129}}
{"id": 243, "code": "plt.contour(x, y, z, colors='white')\n", "metadata": {"problem_id": 645, "library_problem_id": 134, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 134}}
{"id": 244, "code": "fig, axs = plt.subplots(4, 4, figsize=(5, 5))\nfor i in range(4):\n    for j in range(4):\n        axs[i, j].plot(x, y)\n        axs[i, j].set_xticks([])\n        axs[i, j].set_yticks([])\n        axs[i, j].set_xlabel('')\n        axs[i, j].set_ylabel('')\n        axs[i, j].set_title('')\nplt.subplots_adjust(wspace=0.5, hspace=0.5)\n", "metadata": {"problem_id": 648, "library_problem_id": 137, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 137}}
{"id": 245, "code": "plt.matshow(d, cmap=plt.cm.Blues, fignum=1, figsize=(8, 8))\nplt.show()", "metadata": {"problem_id": 649, "library_problem_id": 138, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 138}}
{"id": 246, "code": "fig, ax = plt.subplots()\nax.axis(\"off\")\nax.table(cellText=df.values, colLabels=df.columns, loc=\"center\")\nax.set_title(\"Penguin Data\")\nplt.show()", "metadata": {"problem_id": 650, "library_problem_id": 139, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 139}}
{"id": 247, "code": "plt.plot(x, y)\nplt.xticks(x, rotation=90)\nplt.yticks(y)\nplt.show()\n", "metadata": {"problem_id": 652, "library_problem_id": 141, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 140}}
{"id": 248, "code": "sns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"swarm\")\nplt.xlabel(\"Exercise Time\")\nplt.ylabel(\"Exercise Pulse\")\n", "metadata": {"problem_id": 655, "library_problem_id": 144, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"id": 249, "code": "sns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"swarm\")\nplt.ylabel(\"\")\nplt.show()", "metadata": {"problem_id": 656, "library_problem_id": 145, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"id": 250, "code": "g = sns.FacetGrid(df, col=\"b\", hue=\"b\", sharey=False)\ng.map(sns.pointplot, \"a\", \"c\")\ng.set_xticks(np.arange(1, 31, 2))\ng.set_xticklabels(np.arange(1, 31, 2))\n", "metadata": {"problem_id": 662, "library_problem_id": 151, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 151}}
{"id": 251, "code": "fig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(x, y, z)\nax.view_init(azim=100, elev=50)\n", "metadata": {"problem_id": 663, "library_problem_id": 152, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 152}}
{"id": 252, "code": "plt.plot(x, y)\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.xticks([])\nplt.yticks([])\n", "metadata": {"problem_id": 664, "library_problem_id": 153, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 153}}
{"id": 253, "code": "x.assign(1)\n", "metadata": {"problem_id": 666, "library_problem_id": 0, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 254, "code": "result = tf.one_hot(labels, 10, dtype=tf.int32)\n", "metadata": {"problem_id": 672, "library_problem_id": 6, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 2}}
{"id": 255, "code": "result = []\nfor i in input:\n  result.append(i)\n  result.append(i+1)\n  result.append(i+2)\n", "metadata": {"problem_id": 673, "library_problem_id": 7, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 7}}
{"id": 256, "code": "<code>\nresult = tf.pad(tf.cast(tf.one_hot(lengths, 8), tf.int32), [[0, 0], [0, 8 - tf.reduce_max(lengths)]])\n", "metadata": {"problem_id": 676, "library_problem_id": 10, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 9}}
{"id": 257, "code": "\n    result = tf.sequence_mask(lengths, maxlen=max(lengths))\n    return result\n", "metadata": {"problem_id": 678, "library_problem_id": 12, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 258, "code": "<code>\nresult = tf.pad(tf.cast(tf.one_hot(lengths, max(lengths) + 1), tf.float32), [[0, 0], [1, 0]])\n", "metadata": {"problem_id": 679, "library_problem_id": 13, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 259, "code": "\n    result = tf.reshape(tf.stack([tf.tile(a, [len(b)])] + [tf.repeat(b, len(a))]), [-1, 2])\n    ### END SOLUTION\n    return result\n", "metadata": {"problem_id": 681, "library_problem_id": 15, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 14}}
{"id": 260, "code": "<code>\nresult = tf.reshape(a, (50, 100, 512))\n", "metadata": {"problem_id": 682, "library_problem_id": 16, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 261, "code": "<code>\nresult = tf.expand_dims(tf.expand_dims(a, axis=2), axis=3)\n", "metadata": {"problem_id": 684, "library_problem_id": 18, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"id": 262, "code": "result = tf.reduce_sum(tf.square(tf.subtract(a, b)), axis=1)\n", "metadata": {"problem_id": 688, "library_problem_id": 22, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 22}}
{"id": 263, "code": "result = tf.reduce_sum(tf.square(tf.subtract(a, b)), axis=1)\n", "metadata": {"problem_id": 689, "library_problem_id": 23, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 22}}
{"id": 264, "code": "result = tf.gather_nd(x, tf.stack([row, col], axis=1))\n", "metadata": {"problem_id": 692, "library_problem_id": 26, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 25}}
{"id": 265, "code": "result = tf.reduce_sum(tf.multiply(A, B), axis=2)\n", "metadata": {"problem_id": 694, "library_problem_id": 28, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"id": 266, "code": "result = tf.matmul(A, B, transpose_b=True)\n", "metadata": {"problem_id": 695, "library_problem_id": 29, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 28}}
{"id": 267, "code": "result = [i.decode('utf-8') for i in x]\n", "metadata": {"problem_id": 696, "library_problem_id": 30, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 268, "code": "\n    result = [x.decode('utf-8') for x in x]\n    ### END SOLUTION\n    return result\n", "metadata": {"problem_id": 697, "library_problem_id": 31, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 30}}
{"id": 269, "code": "<code>\nresult = tf.math.reduce_variance(x, axis=-2, keepdims=True)\n", "metadata": {"problem_id": 699, "library_problem_id": 33, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 270, "code": "\n    result = tf.math.divide(tf.reduce_sum(x, axis=-2), tf.reduce_sum(tf.cast(x != 0, tf.float32), axis=-2))\n    return result\n", "metadata": {"problem_id": 700, "library_problem_id": 34, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 271, "code": "result = tf.random.set_seed(seed_x)\n", "metadata": {"problem_id": 707, "library_problem_id": 41, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"id": 272, "code": "result = tf.random.uniform(shape=(114,), minval=2, maxval=6, dtype=tf.int32, seed=seed_x)\n", "metadata": {"problem_id": 708, "library_problem_id": 42, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 41}}
{"id": 273, "code": "statistic, p_value = stats.ks_2samp(x, y)\n", "metadata": {"problem_id": 714, "library_problem_id": 3, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 3}}
{"id": 274, "code": "result = optimize.minimize(lambda x: ((x[0] + x[1] - x[2]) - 2)**2 + ((3*x[0] - x[1] - x[2]))**2 + sin(x[1]) + cos(x[1]) + 4, initial_guess).x\n", "metadata": {"problem_id": 716, "library_problem_id": 5, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 5}}
{"id": 275, "code": "<code>\np_values = scipy.stats.norm.cdf(z_scores)\n", "metadata": {"problem_id": 717, "library_problem_id": 6, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 6}}
{"id": 276, "code": "p_values = scipy.stats.norm.cdf(z_scores, loc=mu, scale=sigma)\n", "metadata": {"problem_id": 718, "library_problem_id": 7, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 6}}
{"id": 277, "code": "result = stats.lognorm.cdf(x, s=stddev, scale=np.exp(mu))\n", "metadata": {"problem_id": 720, "library_problem_id": 9, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 278, "code": "result = sa * sb\n", "metadata": {"problem_id": 722, "library_problem_id": 11, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"id": 279, "code": "\n    result = sA.multiply(sB)\n    return result\n", "metadata": {"problem_id": 723, "library_problem_id": 12, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 280, "code": "result = M.diagonal()", "metadata": {"problem_id": 727, "library_problem_id": 16, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 281, "code": "result = scipy.optimize.linear_sum_assignment(scipy.spatial.distance.cdist(points1, points2))[1]\n", "metadata": {"problem_id": 735, "library_problem_id": 24, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 23}}
{"id": 282, "code": "b = sparse.csr_matrix(b.toarray())", "metadata": {"problem_id": 736, "library_problem_id": 25, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 283, "code": "result = ndimage.label(img > threshold)[1]\n", "metadata": {"problem_id": 737, "library_problem_id": 26, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 284, "code": "square = scipy.ndimage.grey_erosion(square, size = (3, 3))\nsquare = scipy.ndimage.grey_dilation(square, size = (3, 3))\n", "metadata": {"problem_id": 744, "library_problem_id": 33, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 285, "code": "Median = np.median(col.toarray())\nMode = np.argmax(np.bincount(col.toarray().flatten()))\n", "metadata": {"problem_id": 747, "library_problem_id": 36, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 34}}
{"id": 286, "code": "<code>\nresult = scipy.spatial.distance.cdist(np.where(example_array > 0)[0].reshape(-1, 1), np.where(example_array > 0)[1].reshape(-1, 1), metric='euclidean')\n", "metadata": {"problem_id": 749, "library_problem_id": 38, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 38}}
{"id": 287, "code": " ###\n    # Get unique IDs\n    unique_ids = np.unique(example_array)\n    # Create a mask for each ID\n    masks = np.zeros_like(example_array, dtype=bool)\n    for id in unique_ids:\n        masks[example_array == id] = True\n    # Calculate pairwise distances between masks\n    distances = scipy.spatial.distance.cdist(masks.reshape(-1, 1), masks.reshape(-1, 1), metric='cityblock')\n    # Convert distances to metres\n    distances *= 10\n    # Create a result array\n    result = np.zeros((len(unique_ids), len(unique_ids)), dtype=float)\n    for i in range(len(unique_ids)):\n        for j in range(len(unique_ids)):\n            result[i, j] = distances[i, j]\n    return result\n", "metadata": {"problem_id": 751, "library_problem_id": 40, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 38}}
{"id": 288, "code": "<code>\np_value = stats.ranksums(pre_course_scores, during_course_scores).pvalue\n", "metadata": {"problem_id": 759, "library_problem_id": 48, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"id": 289, "code": "result = M[row, column].toarray().flatten()\n", "metadata": {"problem_id": 770, "library_problem_id": 59, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 58}}
{"id": 290, "code": "new_array = np.zeros((100, 10, 10))\nfor i in range(10):\n    for j in range(10):\n        f = scipy.interpolate.interp1d(x, array[:, i, j])\n        new_array[:, i, j] = f(x_new)\n", "metadata": {"problem_id": 771, "library_problem_id": 60, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 60}}
{"id": 291, "code": "prob = scipy.integrate.quad(NDfx, -np.inf, x)[0]\n", "metadata": {"problem_id": 772, "library_problem_id": 61, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 292, "code": "\n    dev = abs((x-u)/o2)\n    P_inner = scipy.integrate.quad(NDfx,-dev,dev)[0]\n    P_outer = 1 - P_inner\n    P = P_inner + P_outer/2\n    return(P)\n", "metadata": {"problem_id": 773, "library_problem_id": 62, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 61}}
{"id": 293, "code": "<code>\nresult = sf.dct(np.eye(N), norm='ortho')\n", "metadata": {"problem_id": 774, "library_problem_id": 63, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 294, "code": "result = sparse.diags(matrix, [-1,0,1], (5, 5)).toarray()\n", "metadata": {"problem_id": 775, "library_problem_id": 64, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 295, "code": "<code>\nresult = scipy.stats.binom.pmf(np.arange(N+1), N, p)\n", "metadata": {"problem_id": 776, "library_problem_id": 65, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"id": 296, "code": "result = df.apply(stats.zscore)", "metadata": {"problem_id": 777, "library_problem_id": 66, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"id": 297, "code": "result = scipy.ndimage.zoom(x, (shape[0] / x.shape[0], shape[1] / x.shape[1]), order=1)", "metadata": {"problem_id": 785, "library_problem_id": 74, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Origin", "perturbation_origin_id": 74}}
{"id": 298, "code": "\n<code>\ndef dN1_dt_simple(t, N1):\n    return -100 * N1 + np.sin(t)\nsol = scipy.integrate.solve_ivp(fun=dN1_dt_simple, t_span=time_span, y0=[N0,])\nresult = sol.y\n", "metadata": {"problem_id": 788, "library_problem_id": 77, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 77}}
{"id": 299, "code": "\nfor t in range (4):\n    def const(x):    \n        y=x[t]\n        return y\n    cons.append({'type':'ineq', 'fun': const})\n\nout=minimize(function, x0, method=\"SLSQP\", constraints=cons)\nx=out[\"x\"]\n", "metadata": {"problem_id": 791, "library_problem_id": 80, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 300, "code": "result = scipy.integrate.quad(lambda x: 2*c*x, low, high)[0]\n", "metadata": {"problem_id": 794, "library_problem_id": 83, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 83}}
{"id": 301, "code": "<code>\na = a > 0\n", "metadata": {"problem_id": 801, "library_problem_id": 90, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 302, "code": "<code>\na = a > 0\n", "metadata": {"problem_id": 802, "library_problem_id": 91, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 90}}
{"id": 303, "code": "<code>\nresult = np.argmin(scipy.spatial.distance.cdist(data, centroids), axis=1)\n", "metadata": {"problem_id": 803, "library_problem_id": 92, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 92}}
{"id": 304, "code": "<code>\nresult = np.array([np.argsort(scipy.spatial.distance.cdist(data, [centroids[i]]).ravel())[:k] for i in range(len(centroids))])\n", "metadata": {"problem_id": 805, "library_problem_id": 94, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 92}}
{"id": 305, "code": "result = np.array([fsolve(eqn, x0=0.5, args=(x, a)) for x, a in zip(xdata, adata)])\n", "metadata": {"problem_id": 807, "library_problem_id": 96, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 95}}
{"id": 306, "code": "integral_df = df.groupby(pd.Grouper(freq='25S')).apply(integrate.trapz)\n", "metadata": {"problem_id": 810, "library_problem_id": 99, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 99}}
{"id": 307, "code": "weights = a.A1.value_counts(normalize=True).sort_index().values\n", "metadata": {"problem_id": 812, "library_problem_id": 101, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 101}}
{"id": 308, "code": "result = sciopt.fminbound(e, pmin, pmax, args=(x,y))\n", "metadata": {"problem_id": 813, "library_problem_id": 102, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 102}}
{"id": 309, "code": "<code>\ndata1 = pd.DataFrame(data.data, columns=data.feature_names)\ndata1['target'] = data.target\n", "metadata": {"problem_id": 817, "library_problem_id": 0, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 310, "code": "<code>\ndata1 = pd.DataFrame(data.data, columns=data.feature_names)\ndata1['target'] = data.target\n", "metadata": {"problem_id": 818, "library_problem_id": 1, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 311, "code": "<code>\ndf_out = pd.get_dummies(df.Col3.apply(pd.Series).stack()).sum(level=0).astype(bool).astype(int)\ndf_out.index = df.index\ndf_out = df.join(df_out)\n", "metadata": {"problem_id": 821, "library_problem_id": 4, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 312, "code": "<code>\ndf_out = df.copy()\ndf_out['Apple'] = df_out['Col3'].apply(lambda x: 1 if 'Apple' in x else 0)\ndf_out['Orange'] = df_out['Col3'].apply(lambda x: 1 if 'Orange' in x else 0)\ndf_out['Banana'] = df_out['Col3'].apply(lambda x: 1 if 'Banana' in x else 0)\ndf_out['Grape'] = df_out['Col3'].apply(lambda x: 1 if 'Grape' in x else 0)\ndf_out = df_out.drop(columns=['Col3'])\n", "metadata": {"problem_id": 822, "library_problem_id": 5, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 313, "code": "<code>\ndf_out = pd.get_dummies(df.Col3.apply(pd.Series).stack()).sum(level=0).astype(bool).astype(int)\ndf_out.index = df.index\ndf = df.join(df_out)\n", "metadata": {"problem_id": 824, "library_problem_id": 7, "library": "Sklearn", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 314, "code": "<code>\ndf_out = df.join(pd.get_dummies(df.Col3.apply(pd.Series).stack()).sum(level=0))\n", "metadata": {"problem_id": 825, "library_problem_id": 8, "library": "Sklearn", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 315, "code": "<code>\nproba = 1 / (1 + np.exp(-model.decision_function(x_predict)))\n", "metadata": {"problem_id": 827, "library_problem_id": 10, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 316, "code": "<code>\ndf = pd.concat([df_origin, pd.DataFrame(transform_output.toarray(), columns=[f'feature_{i}' for i in range(transform_output.shape[1])])], axis=1)\n", "metadata": {"problem_id": 828, "library_problem_id": 11, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"id": 317, "code": "<code>\ndf = pd.concat([df_origin, pd.DataFrame(transform_output.toarray(), columns=['col' + str(i) for i in range(transform_output.shape[1])])], axis=1)\n", "metadata": {"problem_id": 829, "library_problem_id": 12, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 318, "code": "\nclf.steps.pop(1)\n", "metadata": {"problem_id": 831, "library_problem_id": 14, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 14}}
{"id": 319, "code": "\nclf.steps.pop(1)\n", "metadata": {"problem_id": 833, "library_problem_id": 16, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 14}}
{"id": 320, "code": "\nclf.steps.insert(1, ('poly', PolynomialFeatures()))\n", "metadata": {"problem_id": 834, "library_problem_id": 17, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"id": 321, "code": "<code>\nproba = []\nfor train_index, test_index in cv:\n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n    logreg.fit(X_train, y_train)\n    proba.append(logreg.predict_proba(X_test))\nproba = np.concatenate(proba)\n", "metadata": {"problem_id": 840, "library_problem_id": 23, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 22}}
{"id": 322, "code": "inversed = scaler.inverse_transform(scaled)", "metadata": {"problem_id": 841, "library_problem_id": 24, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 24}}
{"id": 323, "code": "<code>\nmodel_name = model.__class__.__name__\n", "metadata": {"problem_id": 844, "library_problem_id": 27, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 26}}
{"id": 324, "code": "<code>\ntf_idf_out = pipe.fit_transform(data.test)\n", "metadata": {"problem_id": 847, "library_problem_id": 30, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 29}}
{"id": 325, "code": "\n<code>\nclf = GridSearchCV(bc, param_grid, cv=5)\nclf.fit(X_train, y_train)\nproba = clf.predict_proba(X_test)\n", "metadata": {"problem_id": 849, "library_problem_id": 32, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 326, "code": "\nregressor = RandomForestRegressor(n_estimators=150, min_samples_split=1.0, random_state=42)\nregressor.fit(X, y)\npredict = regressor.predict(X_test)\n", "metadata": {"problem_id": 851, "library_problem_id": 34, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 33}}
{"id": 327, "code": "\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>", "metadata": {"problem_id": 852, "library_problem_id": 35, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Origin", "perturbation_origin_id": 35}}
{"id": 328, "code": "<code>\ncoef = grid.best_estimator_.named_steps['model'].coef_\n", "metadata": {"problem_id": 856, "library_problem_id": 39, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 329, "code": "<code>\ncoef = grid.best_estimator_.named_steps['model'].coef_\n", "metadata": {"problem_id": 857, "library_problem_id": 40, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 39}}
{"id": 330, "code": "<code>\ncolumn_names = X.columns[model.get_support()]\n", "metadata": {"problem_id": 858, "library_problem_id": 41, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"id": 331, "code": "<code>\ncolumn_names = X.columns[model.get_support()]\n", "metadata": {"problem_id": 860, "library_problem_id": 43, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 41}}
{"id": 332, "code": "<code>\nclosest_50_samples = X[np.argsort(np.linalg.norm(X - km.cluster_centers_[p], axis=1))[:50]]\n", "metadata": {"problem_id": 862, "library_problem_id": 45, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 45}}
{"id": 333, "code": "<code>\nclosest_100_samples = X[np.argsort(np.linalg.norm(X - km.cluster_centers_[p], axis=1))[:100]]\n", "metadata": {"problem_id": 864, "library_problem_id": 47, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 334, "code": "\n    km.fit(X)\n    centers = km.cluster_centers_\n    distances = np.linalg.norm(centers - p, axis=1)\n    samples = X[np.argsort(distances)[:50]]\n    return samples\n", "metadata": {"problem_id": 865, "library_problem_id": 48, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 335, "code": "X_train = pd.get_dummies(X_train[0])\n", "metadata": {"problem_id": 866, "library_problem_id": 49, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 336, "code": "X_train = pd.get_dummies(X_train[0])\n", "metadata": {"problem_id": 867, "library_problem_id": 50, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 49}}
{"id": 337, "code": "<code>\npredict = clf.predict(X)\n", "metadata": {"problem_id": 868, "library_problem_id": 51, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 51}}
{"id": 338, "code": "<code>\npredict = SVR(kernel='poly', degree=2).fit(X, y).predict(X)\n", "metadata": {"problem_id": 870, "library_problem_id": 53, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 51}}
{"id": 339, "code": "<code>\ncosine_similarities_of_queries = np.array([tfidf.transform([query]).dot(tfidf.transform(documents).T).toarray()[0] for query in queries])\n", "metadata": {"problem_id": 872, "library_problem_id": 55, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 55}}
{"id": 340, "code": "<code>\nnew_f = pd.DataFrame(np.zeros((len(f), len(f[0]))), columns=[f[0][i] for i in range(len(f[0]))])\nfor i in range(len(f)):\n    new_f.loc[i, f[i]] = 1\n", "metadata": {"problem_id": 876, "library_problem_id": 59, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"id": 341, "code": "<code>\ncluster_labels = sklearn.cluster.AgglomerativeClustering(n_clusters=2).fit_predict(data_matrix)\n", "metadata": {"problem_id": 880, "library_problem_id": 63, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 342, "code": "<code>\ncluster_labels = sklearn.cluster.AgglomerativeClustering(n_clusters=2).fit_predict(data_matrix)\n", "metadata": {"problem_id": 881, "library_problem_id": 64, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 63}}
{"id": 343, "code": "<code>\ncluster_labels = scipy.cluster.hierarchy.fcluster(scipy.cluster.hierarchy.linkage(data_matrix), 2, criterion='maxclust')\n", "metadata": {"problem_id": 883, "library_problem_id": 66, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"id": 344, "code": "<code>\ncluster_labels = scipy.cluster.hierarchy.fcluster(scipy.cluster.hierarchy.linkage(data_matrix), 2, criterion='maxclust')\n", "metadata": {"problem_id": 884, "library_problem_id": 67, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 66}}
{"id": 345, "code": "<code>\ncentered_scaled_data = (data - data.mean(axis=0)) / data.std(axis=0)\n", "metadata": {"problem_id": 886, "library_problem_id": 69, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 69}}
{"id": 346, "code": "<code>\ncentered_scaled_data = (data - np.mean(data, axis=0)) / np.std(data, axis=0)\n", "metadata": {"problem_id": 887, "library_problem_id": 70, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 69}}
{"id": 347, "code": "<code>\nbox_cox_data = sklearn.preprocessing.power_transform(data, method='box-cox')\n", "metadata": {"problem_id": 888, "library_problem_id": 71, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"id": 348, "code": "<code>\nbox_cox_data, _ = sklearn.preprocessing.power_transform(data, method='box-cox')\n", "metadata": {"problem_id": 889, "library_problem_id": 72, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 71}}
{"id": 349, "code": "<code>\nyeo_johnson_data = sklearn.preprocessing.PowerTransformer(method='yeo-johnson').fit_transform(data)\n", "metadata": {"problem_id": 891, "library_problem_id": 74, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 73}}
{"id": 350, "code": "<code>\ntransformed_text = CountVectorizer(token_pattern=r'(?u)\\b\\w\\w+\\b', lowercase=False).fit_transform(text)\n", "metadata": {"problem_id": 892, "library_problem_id": 75, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 75}}
{"id": 351, "code": "<code>\nx_train, x_test, y_train, y_test = train_test_split(dataset.iloc[:,:-1], dataset.iloc[:,-1], test_size=0.2, random_state=42)\n", "metadata": {"problem_id": 893, "library_problem_id": 76, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 352, "code": "<code>\nx_train, x_test, y_train, y_test = train_test_split(dataset.iloc[:, :-1], dataset.iloc[:, -1], test_size=0.3, random_state=42)\n", "metadata": {"problem_id": 895, "library_problem_id": 78, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 353, "code": "\n    x = data.iloc[:, :-1]\n    y = data.iloc[:, -1]\n    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n    return x_train, y_train, x_test, y_test\n", "metadata": {"problem_id": 896, "library_problem_id": 79, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 354, "code": "<code>\nkmeans = KMeans(n_clusters=2, n_init=10).fit(df[['mse']])\nlabels = kmeans.predict(df[['mse']])\n", "metadata": {"problem_id": 897, "library_problem_id": 80, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 355, "code": "<code>\nselected_feature_names = np.asarray(vectorizer.get_feature_names())[X.toarray().sum(axis=0) > 0]\n", "metadata": {"problem_id": 900, "library_problem_id": 83, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 82}}
{"id": 356, "code": "<code>\nvectorizer = CountVectorizer(stop_words=\"english\", binary=True, lowercase=False, vocabulary={'Jscript', '.Net', 'TypeScript', 'NodeJS', 'Angular', 'Mongo', 'CSS', 'Python', 'PHP', 'Photoshop', 'Oracle', 'Linux', 'C++', 'Java', 'TeamCity', 'Frontend', 'Backend', 'Full stack', 'UI Design', 'Web', 'Integration', 'Database design', 'UX'})\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names()\n", "metadata": {"problem_id": 903, "library_problem_id": 86, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 85}}
{"id": 357, "code": "<code>\nvectorizer = CountVectorizer(stop_words=\"english\", binary=True, lowercase=False, vocabulary={'Jscript', '.Net', 'TypeScript', 'SQL', 'NodeJS', 'Angular', 'Mongo', 'CSS', 'Python', 'PHP', 'Photoshop', 'Oracle', 'Linux', 'C++', 'Java', 'TeamCity', 'Frontend', 'Backend', 'Full stack', 'UI Design', 'Web', 'Integration', 'Database design', 'UX'})\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names()\n", "metadata": {"problem_id": 904, "library_problem_id": 87, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 85}}
{"id": 358, "code": "<code>\nvectorizer = CountVectorizer(stop_words=\"english\", binary=True, lowercase=False, vocabulary={'Jscript', '.Net', 'TypeScript', 'NodeJS', 'Angular', 'Mongo', 'CSS', 'Python', 'PHP', 'Photoshop', 'Oracle', 'Linux', 'C++', 'Java', 'TeamCity', 'Frontend', 'Backend', 'Full stack', 'UI Design', 'Web', 'Integration', 'Database design', 'UX'})\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names()\n", "metadata": {"problem_id": 905, "library_problem_id": 88, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 85}}
{"id": 359, "code": "<code>\ntransformed_df = df.copy()\ntransformed_df['Sex'] = LabelEncoder().fit_transform(transformed_df['Sex'])\n", "metadata": {"problem_id": 909, "library_problem_id": 92, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 91}}
{"id": 360, "code": "<code>\nElasticNet = linear_model.ElasticNet()\nElasticNet.fit(X_train, y_train)\ntraining_set_score = ElasticNet.score(X_train, y_train)\ntest_set_score = ElasticNet.score(X_test, y_test)\n", "metadata": {"problem_id": 911, "library_problem_id": 94, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 94}}
{"id": 361, "code": "<code>\ntransformed = MinMaxScaler().fit_transform(np_array)\n", "metadata": {"problem_id": 912, "library_problem_id": 95, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"id": 362, "code": "<code>\ntransformed = MinMaxScaler().fit_transform(np_array)\n", "metadata": {"problem_id": 913, "library_problem_id": 96, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 95}}
{"id": 363, "code": "close_buy1 = close[:-1]\nm5 = ma_50[:-1]\nm10 = ma_100[:-1]\nma20 = ma_200[:-1]\nb = np.concatenate([close_buy1, m5, m10, ma20], axis=1)\npredict = clf.predict(b)\n", "metadata": {"problem_id": 915, "library_problem_id": 98, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 98}}
{"id": 364, "code": "\nnew_X = np.array(X, dtype=object)\nclf.fit(new_X, ['2', '3'])\n", "metadata": {"problem_id": 917, "library_problem_id": 100, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Surface", "perturbation_origin_id": 99}}
{"id": 365, "code": "\n<code>\nX = dataframe.iloc[:, :-1].astype(float)\ny = dataframe.iloc[:, -1]\nlogReg = LogisticRegression()\nlogReg.fit(X, y)\npredict = logReg.predict(X)\n", "metadata": {"problem_id": 920, "library_problem_id": 103, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 102}}
{"id": 366, "code": "<code>\ntrain_dataframe, test_dataframe = train_test_split(features_dataframe, test_size=0.2)\n", "metadata": {"problem_id": 921, "library_problem_id": 104, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 104}}
{"id": 367, "code": "\n    train_size = 0.2\n    train_dataframe, test_dataframe = train_test_split(features_dataframe, train_size=train_size)\n    train_dataframe = train_dataframe.sort_values(by='date')\n    test_dataframe = test_dataframe.sort_values(by='date')\n    return train_dataframe, test_dataframe\n", "metadata": {"problem_id": 923, "library_problem_id": 106, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"id": 368, "code": "df[['X2_scale', 'X3_scale']] = df.groupby('Month')[['X2', 'X3']].transform(lambda x: scaler.fit_transform(x))\n", "metadata": {"problem_id": 924, "library_problem_id": 107, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"id": 369, "code": "<code>\nmyData[['new_A2', 'new_A3']] = myData.groupby('Month')[['A2', 'A3']].transform(lambda x: scaler.fit_transform(x))\n", "metadata": {"problem_id": 925, "library_problem_id": 108, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 107}}
{"id": 370, "code": "<code>\nfull_results = pd.DataFrame(GridSearch_fitted.cv_results_)\nfull_results.sort_values(by='mean_fit_time', ascending=False)\n", "metadata": {"problem_id": 929, "library_problem_id": 112, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 111}}
{"id": 371, "code": "<code>\ntfidf_matrix = tfidf.fit_transform(df['description'])\ncosine_similarity_matrix = sklearn.metrics.pairwise.cosine_similarity(tfidf_matrix)\nsimilarity_df = pd.DataFrame(cosine_similarity_matrix, index=df['items'], columns=df['items'])\nsimilarity_df\n", "metadata": {"problem_id": 931, "library_problem_id": 114, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"id": 372, "code": "\noptim.param_groups[0]['lr'] = 0.001\n", "metadata": {"problem_id": 932, "library_problem_id": 0, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 373, "code": "\noptim.param_groups[0]['lr'] = 0.0005\n", "metadata": {"problem_id": 934, "library_problem_id": 2, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 374, "code": "\noptim.param_groups[0]['lr'] = 0.05\n", "metadata": {"problem_id": 935, "library_problem_id": 3, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"id": 375, "code": "embedded_input = torch.tensor(word2vec.wv[input_Tensor])\n", "metadata": {"problem_id": 936, "library_problem_id": 4, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 376, "code": "<code>\npx = pd.DataFrame(x.numpy())\n", "metadata": {"problem_id": 938, "library_problem_id": 6, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 6}}
{"id": 377, "code": "<code>\npx = pd.DataFrame(x.numpy())\n", "metadata": {"problem_id": 939, "library_problem_id": 7, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 6}}
{"id": 378, "code": "<code>\npx = pd.DataFrame(x.numpy())\n", "metadata": {"problem_id": 940, "library_problem_id": 8, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 6}}
{"id": 379, "code": "<code>\nx_tensor = torch.tensor(x_array)\n", "metadata": {"problem_id": 949, "library_problem_id": 17, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 16}}
{"id": 380, "code": "<code>\nmask = torch.tensor([[1] * l + [0] * (max_len - l) for l in lens])\n", "metadata": {"problem_id": 952, "library_problem_id": 20, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 19}}
{"id": 381, "code": "\n    result = torch.diag_embed(t)\n    ### END SOLUTION\n    return result\n", "metadata": {"problem_id": 956, "library_problem_id": 24, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 23}}
{"id": 382, "code": "\n    ab = torch.cat((a, b), dim=0)\n    return ab\n", "metadata": {"problem_id": 959, "library_problem_id": 27, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 25}}
{"id": 383, "code": "<code>\na[torch.arange(10), lengths, :] = 0\n", "metadata": {"problem_id": 960, "library_problem_id": 28, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"id": 384, "code": "<code>\na[:, :lengths, :] = 0\n", "metadata": {"problem_id": 962, "library_problem_id": 30, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 28}}
{"id": 385, "code": "<code>\nnew_tensors = torch.stack(list)\n", "metadata": {"problem_id": 965, "library_problem_id": 33, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 386, "code": "\n    tt = torch.stack(lt)\n    return tt\n", "metadata": {"problem_id": 966, "library_problem_id": 34, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 387, "code": "<code>\ntensor_of_tensors = torch.stack(list_of_tensors)\n", "metadata": {"problem_id": 967, "library_problem_id": 35, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 32}}
{"id": 388, "code": "<code>\nresult = t[idx == 1]\n", "metadata": {"problem_id": 970, "library_problem_id": 38, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"id": 389, "code": "<code>\nresult = x.gather(1, ids.unsqueeze(1)).squeeze(1)\n", "metadata": {"problem_id": 971, "library_problem_id": 39, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 390, "code": "<code>\ncnt_equal = torch.sum(A == B).item()\n", "metadata": {"problem_id": 980, "library_problem_id": 48, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"id": 391, "code": "<code>\ncnt_equal = torch.sum(A == B).item()\n", "metadata": {"problem_id": 981, "library_problem_id": 49, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 48}}
{"id": 392, "code": "<code>\ncnt_equal = torch.sum(A[:x] == B[:x]).item()\n", "metadata": {"problem_id": 984, "library_problem_id": 52, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 48}}
{"id": 393, "code": "\ntensors_31 = torch.chunk(a, 40, dim=3)\ntensors_31 = [torch.chunk(tensor, 10, dim=3) for tensor in tensors_31]\ntensors_31 = [tensor for sublist in tensors_31 for tensor in sublist]\n", "metadata": {"problem_id": 986, "library_problem_id": 54, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 394, "code": "<code>\noutput = clean_input_spectrogram * mask.unsqueeze(-1)\n", "metadata": {"problem_id": 988, "library_problem_id": 56, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 56}}
{"id": 395, "code": "\n    sign_x = torch.sign(x)\n    sign_y = torch.sign(y)\n    min = torch.min(torch.abs(x), torch.abs(y))\n    signed_min = sign_x * min + sign_y * min\n    return signed_min\n", "metadata": {"problem_id": 992, "library_problem_id": 60, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"id": 396, "code": "confidence_score = torch.softmax(MyNet(input), dim=1)\n", "metadata": {"problem_id": 993, "library_problem_id": 61, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 397, "code": "<code>\nresult = torch.cat((a, b[:, 1:]), dim=1)\nresult[:, 1] = (a[:, 2] + b[:, 0]) / 2\n", "metadata": {"problem_id": 994, "library_problem_id": 62, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"id": 398, "code": "<code>\nresult = torch.cat((t, torch.zeros(1, 1, 4)), dim=1)\n", "metadata": {"problem_id": 997, "library_problem_id": 65, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 64}}
{"id": 399, "code": "<code>\nresult = torch.cat([t, torch.ones(1, 4, 2) * -1], dim=0)\n", "metadata": {"problem_id": 998, "library_problem_id": 66, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 64}}
