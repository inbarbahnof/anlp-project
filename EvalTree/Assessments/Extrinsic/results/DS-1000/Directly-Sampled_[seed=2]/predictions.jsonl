{"id": 0, "code": "\nresult = df.iloc[List].reset_index(drop=True)\n", "metadata": {"problem_id": 0, "library_problem_id": 0, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 1, "code": "\nresult = df.iloc[List].reset_index(drop=True)\n", "metadata": {"problem_id": 1, "library_problem_id": 1, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"id": 2, "code": "\nresult = df.apply(lambda col: col.where(col.isin(col.value_counts()[col.value_counts() >= 2].index), 'other'))\n", "metadata": {"problem_id": 2, "library_problem_id": 2, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 2}}
{"id": 3, "code": "\nresult = df.apply(lambda col: col.where(col.map(col.value_counts()).ge(3), 'other'))\n", "metadata": {"problem_id": 3, "library_problem_id": 3, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 2}}
{"id": 4, "code": "\n    df['datetime'] = df['datetime'].dt.tz_localize(None)\n    df['datetime'] = df['datetime'].dt.strftime('%Y-%m-%d %H:%M:%S')\n    return df\n", "metadata": {"problem_id": 12, "library_problem_id": 12, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 5, "code": "\ndf['datetime'] = df['datetime'].dt.tz_localize(None).dt.strftime('%d-%b-%Y %H:%M:%S')\n", "metadata": {"problem_id": 13, "library_problem_id": 13, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 11}}
{"id": 6, "code": "\ndf['datetime'] = df['datetime'].dt.tz_localize(None).dt.strftime('%Y-%m-%d %H:%M:%S')\ndf = df.sort_values('datetime')\n", "metadata": {"problem_id": 14, "library_problem_id": 14, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 11}}
{"id": 7, "code": "\nresult = df.join(df['message'].str.findall(r'(\\w+):\\s*(\\w+)').apply(pd.Series).stack().reset_index(level=1, drop=True).rename_axis(['name', 'key'])).reset_index()\nresult = result.pivot(index=['name', 'status', 'number'], columns='key', values=0).reset_index()\nresult.fillna('none', inplace=True)\n", "metadata": {"problem_id": 15, "library_problem_id": 15, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 15}}
{"id": 8, "code": "\ndf.loc[df['product'].isin(products), 'score'] *= 10\n", "metadata": {"problem_id": 16, "library_problem_id": 16, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 9, "code": "\ndf.loc[df['product'].isin(products), 'score'] = (df.loc[df['product'].isin(products), 'score'] - df['score'].min()) / (df['score'].max() - df['score'].min())\n", "metadata": {"problem_id": 19, "library_problem_id": 19, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"id": 10, "code": "\ndf['category'] = df.apply(lambda row: [col for col, val in row.items() if val == 1], axis=1)\n", "metadata": {"problem_id": 22, "library_problem_id": 22, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 20}}
{"id": 11, "code": "\ndf['Date'] = df['Date'].dt.strftime('%b-%Y')\n", "metadata": {"problem_id": 23, "library_problem_id": 23, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 23}}
{"id": 12, "code": "\ndf = df.shift(1, axis=0).fillna(df.iloc[-1])\n", "metadata": {"problem_id": 27, "library_problem_id": 27, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 26}}
{"id": 13, "code": "\ndf.rename(columns=lambda col: col + 'X' if col[-1] != 'X' else col)\n", "metadata": {"problem_id": 32, "library_problem_id": 32, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 30}}
{"id": 14, "code": "\nresult = df.groupby('group').agg({\"group_color\": \"first\", **{col: \"mean\" for col in df.columns if \"val\" in col and col != \"group_color\"}})\n", "metadata": {"problem_id": 33, "library_problem_id": 33, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 33}}
{"id": 15, "code": "\nresult = df.loc[row_list, column_list].sum(axis=0)\n", "metadata": {"problem_id": 37, "library_problem_id": 37, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"id": 16, "code": "\nresult = df.apply(pd.Series.value_counts).fillna(0).sum()\n", "metadata": {"problem_id": 39, "library_problem_id": 39, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 17, "code": "\nresult = df.isnull().sum()\n", "metadata": {"problem_id": 40, "library_problem_id": 40, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 39}}
{"id": 18, "code": "\nresult = df.apply(pd.Series.value_counts).fillna(0).astype(int).apply(lambda x: x.astype(str).str.cat(x.index, sep=' - '))\n", "metadata": {"problem_id": 41, "library_problem_id": 41, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 39}}
{"id": 19, "code": "\nresult = df.iloc[0].combine_first(df.iloc[1]).reset_index(drop=True)\n", "metadata": {"problem_id": 43, "library_problem_id": 43, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 20, "code": "\nresult = df.sort_index(axis=1, ascending=False)\n", "metadata": {"problem_id": 46, "library_problem_id": 46, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 44}}
{"id": 21, "code": "\nresult = df.groupby(df['value'].lt(thresh).cumsum()).sum().reset_index()\n", "metadata": {"problem_id": 47, "library_problem_id": 47, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 22, "code": "\nresult = df.assign(**{f'exp_{col}': df[col].apply(lambda x: math.exp(x)) for col in df.columns})\n", "metadata": {"problem_id": 51, "library_problem_id": 51, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 50}}
{"id": 23, "code": "\nresult = df.groupby('user').apply(lambda x: pd.date_range(x['dt'].min(), x['dt'].max())).explode().reset_index(level=0).merge(df, on=['user', 'dt'], how='left').fillna(df.groupby('user')['val'].transform('max'))\n", "metadata": {"problem_id": 59, "library_problem_id": 59, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 56}}
{"id": 24, "code": "\nresult = df.groupby('name').ngroup().add(1).astype(int).reset_index(name='a')\ndf = df.merge(result, on='name')\n", "metadata": {"problem_id": 62, "library_problem_id": 62, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 61}}
{"id": 25, "code": "\n    df['name'] = df['name'].astype('category').cat.codes\n    return df\n", "metadata": {"problem_id": 63, "library_problem_id": 63, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 61}}
{"id": 26, "code": "\nresult = df.groupby(['name', 'a']).ngroup().add(1).rename('ID').reset_index()[['ID', 'b', 'c']]\n", "metadata": {"problem_id": 64, "library_problem_id": 64, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 61}}
{"id": 27, "code": "\ndf = df.melt(id_vars=['user', 'someBool'], var_name='date', value_name='value')\n", "metadata": {"problem_id": 65, "library_problem_id": 65, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"id": 28, "code": "\n    locs = [df.columns.get_loc(col) for col in columns]\n    return df[df['c'] > 0.5][locs].values\n", "metadata": {"problem_id": 70, "library_problem_id": 70, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 29, "code": "\n    result = df[df['c'] > 0.5][columns].assign(sum=lambda x: x[columns].sum(axis=1))\n    return result\n", "metadata": {"problem_id": 71, "library_problem_id": 71, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 30, "code": "\nresult = df.drop_duplicates(subset='date', keep='first')\n", "metadata": {"problem_id": 73, "library_problem_id": 73, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 73}}
{"id": 31, "code": "\nresult = df.drop_duplicates(subset='date', keep='first')\n", "metadata": {"problem_id": 75, "library_problem_id": 75, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 73}}
{"id": 32, "code": "\nresult = df.groupby(df.index // 3).agg({'col1': ['sum', 'mean']}).unstack().fillna(0).stack().reset_index(name='col1')\n", "metadata": {"problem_id": 80, "library_problem_id": 80, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 76}}
{"id": 33, "code": "\ndf['A'] = df['A'].fillna(method='ffill')\n", "metadata": {"problem_id": 82, "library_problem_id": 82, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 34, "code": "\ndf['A'] = df['A'].fillna(method='bfill').fillna(method='ffill')\n", "metadata": {"problem_id": 83, "library_problem_id": 83, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 82}}
{"id": 35, "code": "\ndf['A'] = df['A'].fillna(df['A'].replace(0, method='ffill').replace(0, method='bfill'))\n", "metadata": {"problem_id": 84, "library_problem_id": 84, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 36, "code": "\ndf['number'] = df['duration'].str.extract('(\\d+)')\ndf['time'] = df['duration'].str.extract('(\\w+)')\n\ntime_days_mapping = {'year': 365, 'month': 30, 'week': 7, 'day': 1}\ndf['time_days'] = df['time'].map(time_days_mapping)\n", "metadata": {"problem_id": 85, "library_problem_id": 85, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 37, "code": "\ndf.index = df.index.set_levels(pd.to_datetime(df.index.levels[1]), level=1)\n", "metadata": {"problem_id": 91, "library_problem_id": 91, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 91}}
{"id": 38, "code": "\n    df.index = pd.to_datetime(df.index)\n    return df.reset_index().values\n", "metadata": {"problem_id": 93, "library_problem_id": 93, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 91}}
{"id": 39, "code": "\ndf = pd.melt(df, id_vars=['Country', 'Variable'], var_name='year', value_name='value')\ndf = df.pivot(index=['Country', 'year'], columns='Variable', values='value').reset_index()\ndf.columns.name = None\n", "metadata": {"problem_id": 95, "library_problem_id": 95, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"id": 40, "code": "\ndf = df.loc[df.filter(like='Value').abs().lt(1).all(axis=1)]\n", "metadata": {"problem_id": 97, "library_problem_id": 97, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"id": 41, "code": "\ndf.replace(r'&AMP;', '&', regex=True, inplace=True)\n", "metadata": {"problem_id": 100, "library_problem_id": 100, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 100}}
{"id": 42, "code": "\ndf.replace(r'&lt;', '<', regex=True, inplace=True)\n", "metadata": {"problem_id": 101, "library_problem_id": 101, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 100}}
{"id": 43, "code": "\n    df.replace(r'&AMP;', '&', regex=True, inplace=True)\n    return df\n", "metadata": {"problem_id": 102, "library_problem_id": 102, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 100}}
{"id": 44, "code": "\ndf.replace({'&AMP;': '&', '&LT;': '<', '&GT;': '>'}, regex=True)\n", "metadata": {"problem_id": 103, "library_problem_id": 103, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 100}}
{"id": 45, "code": "\ndf['state'] = df.apply(lambda row: row['col1'] if row['col2'] > 50 and row['col3'] > 50 else row['col1'] + row['col2'] + row['col3'], axis=1)\n", "metadata": {"problem_id": 111, "library_problem_id": 111, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 110}}
{"id": 46, "code": "\nresult = df.loc[test]\n", "metadata": {"problem_id": 117, "library_problem_id": 117, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 117}}
{"id": 47, "code": "\nresult = df.loc[test]\n", "metadata": {"problem_id": 118, "library_problem_id": 118, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 117}}
{"id": 48, "code": "\nresult = df.drop(test)\n", "metadata": {"problem_id": 119, "library_problem_id": 119, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 117}}
{"id": 49, "code": "\n    result = df.loc[test].drop_duplicates()\n    return result\n", "metadata": {"problem_id": 120, "library_problem_id": 120, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 117}}
{"id": 50, "code": "\ndf2 = df.groupby('time').apply(lambda x: x.assign(nearest_neighbour=x.apply(lambda row: x[(x['car'] != row['car']) & (x['time'] == row['time'])].iloc[0]['car'] if len(x[(x['car'] != row['car']) & (x['time'] == row['time'])]) > 0 else None, axis=1),\n                                                  euclidean_distance=x.apply(lambda row: ((row['x'] - x[(x['car'] != row['car']) & (x['time'] == row['time'])].iloc[0]['x'])**2 + (row['y'] - x[(x['car'] != row['car']) & (x['time'] == row['time'])].iloc[0]['y'])**2)**0.5 if len(x[(x['car'] != row['car']) & (x['time'] == row['time'])]) > 0 else None, axis=1)))\n", "metadata": {"problem_id": 121, "library_problem_id": 121, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 121}}
{"id": 51, "code": "\ndf2 = df.merge(df.groupby('time').apply(lambda x: x.assign(farmost_neighbour=x.assign(distance=lambda x: ((x['x'] - x['x'].shift())**2 + (x['y'] - x['y'].shift())**2)**0.5).idxmin())), on=['time', 'car']).drop('car', axis=1)\ndf2 = df2.merge(df.groupby(['time', 'farmost_neighbour']).mean().reset_index(), on=['time', 'farmost_neighbour'], suffixes=('', '_mean'))\ndf2['euclidean_distance'] = ((df2['x'] - df2['x_mean'])**2 + (df2['y'] - df2['y_mean'])**2)**0.5\ndf2 = df2[['time', 'car', 'farmost_neighbour', 'euclidean_distance']]\n", "metadata": {"problem_id": 122, "library_problem_id": 122, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 52, "code": "\ndf['keywords_all'] = df.filter(like='keywords_').apply(lambda x: '-'.join(x.dropna().astype(str)), axis=1)\n", "metadata": {"problem_id": 126, "library_problem_id": 126, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 53, "code": "\ndf = df.sample(frac=0.2, random_state=0).assign(Quantity=0)\n", "metadata": {"problem_id": 127, "library_problem_id": 127, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 127}}
{"id": 54, "code": "\nresult = df.assign(index_original=df.index[df.duplicated(subset=['col1', 'col2', '3col'], keep='first')])\n", "metadata": {"problem_id": 133, "library_problem_id": 133, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 130}}
{"id": 55, "code": "\nresult = df.loc[df.groupby(['Sp', 'Mt'])['count'].idxmax()]\n", "metadata": {"problem_id": 135, "library_problem_id": 135, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 135}}
{"id": 56, "code": "\nresult = df.loc[df.groupby(['Sp', 'Mt'])['count'].idxmax()]\n", "metadata": {"problem_id": 136, "library_problem_id": 136, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 135}}
{"id": 57, "code": "\nresult = df.loc[df.groupby(['Sp', 'Value'])['count'].transform(max) == df['count']]\n", "metadata": {"problem_id": 138, "library_problem_id": 138, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 135}}
{"id": 58, "code": "\nresult = df.melt(value_vars=[(col1, col2, col3) for col1, col2, col3 in zip(df.columns[0], df.columns[1], df.columns[2])])\nresult.columns = ['variable_0', 'variable_1', 'variable_2', 'value']\n", "metadata": {"problem_id": 142, "library_problem_id": 142, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 141}}
{"id": 59, "code": "\ndf['cumsum'] = df.groupby('id')['val'].cumsum()\n", "metadata": {"problem_id": 143, "library_problem_id": 143, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 143}}
{"id": 60, "code": "\ndf['cumsum'] = df.groupby('id')['val'].cumsum()\n", "metadata": {"problem_id": 145, "library_problem_id": 145, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 143}}
{"id": 61, "code": "\nresult = df.groupby('r')['v'].apply(lambda x: x.sum(skipna=False))\n", "metadata": {"problem_id": 149, "library_problem_id": 149, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 148}}
{"id": 62, "code": "\nresult = df.groupby('l')['v'].apply(lambda x: x.sum(skipna=False))\n", "metadata": {"problem_id": 150, "library_problem_id": 150, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 148}}
{"id": 63, "code": "\nresult = df.corr().applymap(lambda x: 'one-to-one' if x == 1 else 'one-to-many' if x > 0 else 'many-to-one' if x < 0 else 'many-to-many')\n", "metadata": {"problem_id": 153, "library_problem_id": 153, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"id": 64, "code": "\nresult = df.groupby((df['SibSp'] > 0) | (df['Parch'] > 0)).mean()['Survived']\n", "metadata": {"problem_id": 157, "library_problem_id": 157, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 157}}
{"id": 65, "code": "\nresult = df.groupby((df['Survived'] > 0) | (df['Parch'] > 0)).mean()['SibSp']\n", "metadata": {"problem_id": 158, "library_problem_id": 158, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 157}}
{"id": 66, "code": "\nresult = df.groupby('cokey').apply(lambda x: x.sort_values('A', ascending=False))\n", "metadata": {"problem_id": 161, "library_problem_id": 161, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 160}}
{"id": 67, "code": "\ndf.columns = pd.MultiIndex.from_tuples(df.columns)\ndf = df.stack().unstack(level=0).rename_axis(index=['Caps', 'Lower']).reset_index()\n", "metadata": {"problem_id": 162, "library_problem_id": 162, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 162}}
{"id": 68, "code": "\ndf.columns = pd.MultiIndex.from_tuples(df.columns)\ndf = df.stack().unstack(level=0).rename_axis(index=['Caps', 'Middle', 'Lower']).reset_index()\n", "metadata": {"problem_id": 163, "library_problem_id": 163, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 162}}
{"id": 69, "code": "\nresult = pd.DataFrame({'birdType': someTuple[0], 'birdCount': someTuple[1]})\n", "metadata": {"problem_id": 165, "library_problem_id": 165, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 165}}
{"id": 70, "code": "\nresult = df.loc[df.sum(axis=1) != 0, df.columns[df.sum() != 0]]\n", "metadata": {"problem_id": 169, "library_problem_id": 169, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 169}}
{"id": 71, "code": "\nresult = s.sort_values(ascending=False).sort_index()\n", "metadata": {"problem_id": 173, "library_problem_id": 173, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 173}}
{"id": 72, "code": "\ndf = s.sort_values(ascending=False).reset_index().rename(columns={'index': 'index', 0: '1'})\n", "metadata": {"problem_id": 174, "library_problem_id": 174, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 173}}
{"id": 73, "code": "\nresult = df.loc[df.groupby(['Sp', 'Mt'])['count'].idxmin()]\n", "metadata": {"problem_id": 179, "library_problem_id": 179, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 177}}
{"id": 74, "code": "\ndf['Date'] = df['Member'].map(dict).fillna(df['Date'])\n", "metadata": {"problem_id": 182, "library_problem_id": 182, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 181}}
{"id": 75, "code": "\ndf['Date'] = df['Member'].map(dict).fillna(df['Date'].dt.strftime('%d-%b-%Y'))\n", "metadata": {"problem_id": 184, "library_problem_id": 184, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 181}}
{"id": 76, "code": "\ndf['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%y')\ndf['Count_d'] = df.groupby('Date').size()\ndf['Count_m'] = df.groupby([df['Date'].dt.year, df['Date'].dt.month]).size()\ndf['Count_y'] = df.groupby(df['Date'].dt.year).size()\ndf['Count_Val'] = df.groupby(['Date', 'Val']).size()\n", "metadata": {"problem_id": 186, "library_problem_id": 186, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 185}}
{"id": 77, "code": "\nresult1 = df.groupby('Date').agg(B=('B', lambda x: (x == 0).sum()),\n                                 C=('C', lambda x: (x == 0).sum()))\n\nresult2 = df.groupby('Date').agg(B=('B', lambda x: (x != 0).sum()),\n                                 C=('C', lambda x: (x != 0).sum()))\n", "metadata": {"problem_id": 188, "library_problem_id": 188, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 188}}
{"id": 78, "code": "\nresult1 = df.groupby('Date').apply(lambda x: x.select_dtypes(include=['number']).apply(lambda y: y.ne(y % 2).sum())).reset_index()\nresult2 = df.groupby('Date').apply(lambda x: x.select_dtypes(include=['number']).apply(lambda y: y.ne(y % 2).sum())).reset_index().rename(columns=lambda x: x + '_odd')\n", "metadata": {"problem_id": 189, "library_problem_id": 189, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 188}}
{"id": 79, "code": "\nresult = pd.pivot_table(df, values=['D', 'E'], index=['B'], aggfunc={'D': np.sum, 'E': np.mean})\n", "metadata": {"problem_id": 191, "library_problem_id": 191, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 190}}
{"id": 80, "code": "\nresult = df.pivot_table(values={'D': np.sum, 'E': np.mean}, index='B', aggfunc={'D': np.sum, 'E': np.mean})\n", "metadata": {"problem_id": 192, "library_problem_id": 192, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 190}}
{"id": 81, "code": "\nresult = df.pivot_table(values={'D': np.max, 'E': np.min}, index='B', aggfunc={'D': np.max, 'E': np.min})\n", "metadata": {"problem_id": 193, "library_problem_id": 193, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 190}}
{"id": 82, "code": "\nresult = df.explode('var2').reset_index()\n", "metadata": {"problem_id": 194, "library_problem_id": 194, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 194}}
{"id": 83, "code": "\nresult = df.explode('var2').reset_index(drop=True)\n", "metadata": {"problem_id": 195, "library_problem_id": 195, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 194}}
{"id": 84, "code": "\nresult = df.var2.str.split('-', expand=True).stack().reset_index(level=1, drop=True).reset_index(name='var2')\n", "metadata": {"problem_id": 196, "library_problem_id": 196, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 194}}
{"id": 85, "code": "\ndf[['fips', 'row']] = df['row'].str.split(' ', n=1, expand=True)\n", "metadata": {"problem_id": 199, "library_problem_id": 199, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 199}}
{"id": 86, "code": "\ndf = df.set_index('Name').apply(lambda x: x.cumsum() / (x.replace(0, np.nan).count().fillna(1)), axis=1).reset_index()\n", "metadata": {"problem_id": 203, "library_problem_id": 203, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 202}}
{"id": 87, "code": "\n    result = df.apply(lambda row: row.where(row != 0).cumsum() / (row.notnull().cumsum()), axis=1)\n    return result\n", "metadata": {"problem_id": 204, "library_problem_id": 204, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 202}}
{"id": 88, "code": "\ndf['label'] = df['Close'].diff().apply(lambda x: 1 if x > 0 else 0 if x == 0 else -1)\ndf['DateTime'] = df['DateTime'].dt.strftime('%d-%b-%Y')\n", "metadata": {"problem_id": 208, "library_problem_id": 208, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 206}}
{"id": 89, "code": "\ndf['arrival_time'] = pd.to_datetime(df['arrival_time'])\ndf['departure_time'] = pd.to_datetime(df['departure_time'])\n\ndf['Duration'] = df.groupby('id')['departure_time'].diff().fillna(pd.Timedelta(0))\n\n", "metadata": {"problem_id": 209, "library_problem_id": 209, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 209}}
{"id": 90, "code": "\ndf['arrival_time'] = pd.to_datetime(df['arrival_time'])\ndf['departure_time'] = pd.to_datetime(df['departure_time'])\n\ndf['Duration'] = df.groupby('id')['departure_time'].diff().dt.total_seconds()\ndf.loc[df['id'] == 'Train A', 'Duration'] = df.loc[df['id'] == 'Train A', 'arrival_time'].shift(-1) - df.loc[df['id'] == 'Train A', 'departure_time']\ndf.loc[df['id'] == 'Train B', 'Duration'] = df.loc[df['id'] == 'Train B', 'arrival_time'].shift(-1) - df.loc[df['id'] == 'Train B', 'departure_time']\n", "metadata": {"problem_id": 210, "library_problem_id": 210, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 209}}
{"id": 91, "code": "\nresult = df.groupby('key1')['key2'].apply(lambda x: (x == 'one').sum()).reset_index(name='count')\n", "metadata": {"problem_id": 212, "library_problem_id": 212, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 212}}
{"id": 92, "code": "\nmax_result = df.index.max()\nmin_result = df.index.min()\n", "metadata": {"problem_id": 215, "library_problem_id": 215, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 215}}
{"id": 93, "code": "\nresult = df[~(df['closing_price'].between(99, 101))]\n", "metadata": {"problem_id": 218, "library_problem_id": 218, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 217}}
{"id": 94, "code": "\ndf['SOURCE_NAME'] = df['SOURCE_NAME'].str.rsplit('_', n=1).str[0]\n", "metadata": {"problem_id": 220, "library_problem_id": 220, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 220}}
{"id": 95, "code": "\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0])\ndf['Column_x'] = df['Column_x'].where(df['Column_x'].isnull(), df['Column_x'].rank(method='first').le(df['Column_x'].count() / 2).astype(int))\n", "metadata": {"problem_id": 223, "library_problem_id": 223, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 223}}
{"id": 96, "code": "\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].isnull().cumsum().div(df['Column_x'].isnull().sum()).apply(lambda x: 0 if x < 0.3 else (0.5 if x < 0.6 else 1)))\n", "metadata": {"problem_id": 224, "library_problem_id": 224, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 223}}
{"id": 97, "code": "\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].value_counts().idxmax())\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0])\ndf['Column_x'] = df['Column_x'].astype(int)\ndf['Column_x'] = df['Column_x'].where(df['Column_x'].ne(0), df['Column_x'].ne(1).astype(int))\n", "metadata": {"problem_id": 225, "library_problem_id": 225, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 223}}
{"id": 98, "code": "\nresult = pd.DataFrame([[(a['one'][i], b['one'][i]), (a['two'][i], b['two'][i])] for i in range(len(a))], columns=['one', 'two'])\n", "metadata": {"problem_id": 226, "library_problem_id": 226, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 226}}
{"id": 99, "code": "\nresult = pd.DataFrame([[(a['one'][i], b['one'][i], c['one'][i]), (a['two'][i], b['two'][i], c['two'][i])] for i in range(len(a))], columns=['one', 'two'])\n", "metadata": {"problem_id": 227, "library_problem_id": 227, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 226}}
{"id": 100, "code": "\nresult = pd.DataFrame(np.array([[(a['one'][i], b['one'][i]) if i < len(b) else (np.nan, b['one'][i]) for i in range(len(a))],\n                                [(a['two'][i], b['two'][i]) if i < len(b) else (np.nan, b['two'][i]) for i in range(len(a))]]),\n                               columns=['one', 'two'])\n", "metadata": {"problem_id": 228, "library_problem_id": 228, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 226}}
{"id": 101, "code": "\nresult = C.merge(D, how='outer', on='A', suffixes=('', '_y')).fillna(C)\n", "metadata": {"problem_id": 241, "library_problem_id": 241, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 240}}
{"id": 102, "code": "\nresult = df.groupby('user').agg(lambda x: list(zip(x['time'], x['amount'])))\n", "metadata": {"problem_id": 244, "library_problem_id": 244, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 243}}
{"id": 103, "code": "\nresult = df.groupby('user')[['time', 'amount']].apply(lambda x: x.values.tolist())\n", "metadata": {"problem_id": 245, "library_problem_id": 245, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 243}}
{"id": 104, "code": "\ndf = pd.DataFrame(series.values.tolist(), index=series.index)\n", "metadata": {"problem_id": 247, "library_problem_id": 247, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 246}}
{"id": 105, "code": "\nresult = df.columns[df.columns.str.contains(s) & ~df.columns.str.startswith(s)].tolist()\n", "metadata": {"problem_id": 248, "library_problem_id": 248, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 248}}
{"id": 106, "code": "\nresult = df.columns[df.columns.str.contains(s) & ~df.columns.str.startswith(s)].tolist()\n", "metadata": {"problem_id": 249, "library_problem_id": 249, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 248}}
{"id": 107, "code": "\nresult = ','.join(str(x) for sublist in df['col1'].tolist() for x in sublist)\n", "metadata": {"problem_id": 256, "library_problem_id": 256, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 254}}
{"id": 108, "code": "\nresult = df[df.index.get_level_values('a').isin(filt[filt].index)]\n", "metadata": {"problem_id": 262, "library_problem_id": 262, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 262}}
{"id": 109, "code": "\nresult = df.iloc[0].index[df.iloc[0].eq(df.iloc[8])].tolist()\n", "metadata": {"problem_id": 265, "library_problem_id": 265, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 264}}
{"id": 110, "code": "\nresult = df.loc[0].ne(df.loc[8]).index[df.loc[0].ne(df.loc[8])].tolist()\n", "metadata": {"problem_id": 266, "library_problem_id": 266, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 264}}
{"id": 111, "code": "\nresult = df.sort_values(by='VIM', kind='mergesort')\n", "metadata": {"problem_id": 277, "library_problem_id": 277, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 276}}
{"id": 112, "code": "\nresult = corr[corr > 0.3].stack()[corr[corr > 0.3].stack() > 0.3]\n", "metadata": {"problem_id": 281, "library_problem_id": 281, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 280}}
{"id": 113, "code": "\nresult = df.rename(columns={df.columns[-1]: 'Test'})\n", "metadata": {"problem_id": 282, "library_problem_id": 282, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 282}}
{"id": 114, "code": "\ndf['frequent'] = df.mode(axis=1)[0]\ndf['freq_count'] = df.apply(lambda row: row.value_counts().max(), axis=1)\n", "metadata": {"problem_id": 285, "library_problem_id": 285, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 284}}
{"id": 115, "code": "\ndf['frequent'] = df.mode(axis=1)[0].apply(lambda x: list(x.dropna().astype(int)))\ndf['freq_count'] = df.mode(axis=1)[0].apply(lambda x: len(x.dropna()))\n", "metadata": {"problem_id": 286, "library_problem_id": 286, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 284}}
{"id": 116, "code": "\nresult = df.groupby([\"id1\", \"id2\"])[[\"foo\", \"bar\"]].mean().reset_index()\n", "metadata": {"problem_id": 287, "library_problem_id": 287, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 287}}
{"id": 117, "code": "\nresult = df.groupby([\"id1\", \"id2\"])[[\"foo\", \"bar\"]].mean().fillna(0)\n", "metadata": {"problem_id": 288, "library_problem_id": 288, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 287}}
{"id": 118, "code": "\nresult = x[~np.isnan(x).any(axis=1)].tolist()\n", "metadata": {"problem_id": 294, "library_problem_id": 3, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 1}}
{"id": 119, "code": "\nb = np.eye(a.max() + 1)[a + a.max()]\n", "metadata": {"problem_id": 297, "library_problem_id": 6, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 120, "code": "\nb = np.eye(len(a))[np.argsort(a)]\n", "metadata": {"problem_id": 298, "library_problem_id": 7, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 121, "code": "\nr = np.random.randint(3, size=(100, 2000)) - 1\nr_old = np.random.default_rng(seed=42).choice([-1, 0, 1], size=(100, 2000))\nr_new = np.random.default_rng(seed=42).choice([-1, 0, 1], size=(100, 2000))\n", "metadata": {"problem_id": 308, "library_problem_id": 17, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"id": 122, "code": "\nresult = np.unravel_index(a.argmax(), a.shape)\n", "metadata": {"problem_id": 309, "library_problem_id": 18, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 18}}
{"id": 123, "code": "\nresult = np.unravel_index(a.argmin(), a.shape)\n", "metadata": {"problem_id": 310, "library_problem_id": 19, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 124, "code": "\nresult = np.array(a)\n", "metadata": {"problem_id": 317, "library_problem_id": 26, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 125, "code": "\na = a[:, permutation]\n", "metadata": {"problem_id": 318, "library_problem_id": 27, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 27}}
{"id": 126, "code": "\nresult = a[permutation]\n", "metadata": {"problem_id": 319, "library_problem_id": 28, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 27}}
{"id": 127, "code": "\nresult = np.argwhere(a == a.min())\n", "metadata": {"problem_id": 322, "library_problem_id": 31, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 29}}
{"id": 128, "code": "\nresult = np.sin(np.deg2rad(degree))\n", "metadata": {"problem_id": 323, "library_problem_id": 32, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 129, "code": "\nresult = np.cos(np.deg2rad(degree))\n", "metadata": {"problem_id": 324, "library_problem_id": 33, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 130, "code": "\nresult = np.pad(A, (0, length - len(A)), 'constant')\n", "metadata": {"problem_id": 327, "library_problem_id": 36, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 131, "code": "\n    gcd = np.gcd(numerator, denominator)\n    return (numerator // gcd, denominator // gcd)\n", "metadata": {"problem_id": 332, "library_problem_id": 41, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 40}}
{"id": 132, "code": "\nresult = np.array(np.math.gcd(numerator, denominator), dtype=np.float64) / np.array(denominator / np.math.gcd(numerator, denominator), dtype=np.float64)\n", "metadata": {"problem_id": 333, "library_problem_id": 42, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 40}}
{"id": 133, "code": "\nresult = a[np.diag_indices(a.shape[0])[::-1]]\n", "metadata": {"problem_id": 338, "library_problem_id": 47, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 45}}
{"id": 134, "code": "\nresult = [X[i][j] for i in range(X.shape[0]) for j in range(X.shape[1])]\n", "metadata": {"problem_id": 340, "library_problem_id": 49, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 135, "code": "\nresult = [X[i, j] for i in range(X.shape[0]) for j in range(X.shape[1])]\n", "metadata": {"problem_id": 341, "library_problem_id": 50, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 49}}
{"id": 136, "code": "\n    result = []\n    for row in X:\n        for element in row:\n            result.append(element)\n    return result\n", "metadata": {"problem_id": 342, "library_problem_id": 51, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 49}}
{"id": 137, "code": "\nresult = X.flatten('F')\n", "metadata": {"problem_id": 343, "library_problem_id": 52, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 49}}
{"id": 138, "code": "\n<code>\n\np_value = scipy.stats.ttest_ind(a, b, equal_var=False).pvalue\n", "metadata": {"problem_id": 350, "library_problem_id": 59, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 59}}
{"id": 139, "code": "\n```python\nc = b[np.argsort(a, axis=0)]\n```", "metadata": {"problem_id": 355, "library_problem_id": 64, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 140, "code": "\nresult = b[np.argsort(a.sum(axis=(1, 2)))]\n", "metadata": {"problem_id": 358, "library_problem_id": 67, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 64}}
{"id": 141, "code": "\na = np.delete(arr, 2, axis=0)\n", "metadata": {"problem_id": 360, "library_problem_id": 69, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 68}}
{"id": 142, "code": "\nresult = np.delete(a, del_col[np.where(del_col < a.shape[1])], axis=1)\n", "metadata": {"problem_id": 362, "library_problem_id": 71, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 143, "code": "\n    a_l = a.tolist()\n    a_l.insert(pos, element)\n    return np.asarray(a_l)\n    ### END SOLUTION\n", "metadata": {"problem_id": 365, "library_problem_id": 74, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 72}}
{"id": 144, "code": "\na = np.insert(a, pos, element, axis=0)\n", "metadata": {"problem_id": 366, "library_problem_id": 75, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 72}}
{"id": 145, "code": "\nresult = array_of_arrays.copy()\n", "metadata": {"problem_id": 367, "library_problem_id": 76, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 146, "code": "\nlow = np.searchsorted(np.sort(grades), threshold, side='left')\nhigh = np.searchsorted(np.sort(grades), threshold, side='right')\n", "metadata": {"problem_id": 375, "library_problem_id": 84, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 147, "code": "\na_np = a.numpy()\n", "metadata": {"problem_id": 379, "library_problem_id": 88, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 88}}
{"id": 148, "code": "\na_tf = tf.convert_to_tensor(a)\n", "metadata": {"problem_id": 380, "library_problem_id": 89, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 88}}
{"id": 149, "code": "\nresult = np.argsort(a)[::-1].tolist()\n", "metadata": {"problem_id": 381, "library_problem_id": 90, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 150, "code": "\nresult = A ** n\n", "metadata": {"problem_id": 384, "library_problem_id": 93, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 93}}
{"id": 151, "code": "\nresult = a.reshape(a.shape[0]//2, 2, a.shape[1]//2, 2).swapaxes(1, 2).reshape(-1, 2, 2)\n", "metadata": {"problem_id": 387, "library_problem_id": 96, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 94}}
{"id": 152, "code": "\na = np.array(eval(string))\n", "metadata": {"problem_id": 394, "library_problem_id": 103, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 103}}
{"id": 153, "code": "\n    log_min = np.log(min)\n    log_max = np.log(max)\n    log_uniform = np.random.uniform(log_min, log_max, n)\n    result = np.exp(log_uniform)\n    return result\n", "metadata": {"problem_id": 397, "library_problem_id": 106, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"id": 154, "code": "\nresult = np.empty((0,))\n", "metadata": {"problem_id": 400, "library_problem_id": 109, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"id": 155, "code": "\nresult = np.maximum.reduceat(a, index)\n", "metadata": {"problem_id": 406, "library_problem_id": 115, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 114}}
{"id": 156, "code": "\nresult = np.minimum.reduceat(a, index)\n", "metadata": {"problem_id": 408, "library_problem_id": 117, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 114}}
{"id": 157, "code": "\nresult = np.pad(a, ((0, max(0, low_index)), (0, max(0, high_index - a.shape[1]))), mode='constant', constant_values=0)[low_index:high_index, :high_index]\n", "metadata": {"problem_id": 411, "library_problem_id": 120, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 120}}
{"id": 158, "code": "\nbin_data = data.reshape(-1, bin_size)\nbin_data_mean = np.mean(bin_data, axis=1)\n", "metadata": {"problem_id": 414, "library_problem_id": 123, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 123}}
{"id": 159, "code": "\nbin_data = [np.array_split(row, len(row) // bin_size + (len(row) % bin_size > 0)) for row in data]\nbin_data_mean = np.array([[np.mean(bin) for bin in row] for row in bin_data])\n", "metadata": {"problem_id": 419, "library_problem_id": 128, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 160, "code": "\nresult = df.values.reshape(15, 4, 5)\n", "metadata": {"problem_id": 424, "library_problem_id": 133, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 132}}
{"id": 161, "code": "\nresult = np.unpackbits(a.astype(np.uint8), axis=1)[:, -m:]\n", "metadata": {"problem_id": 425, "library_problem_id": 134, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 134}}
{"id": 162, "code": "\nresult = np.unpackbits(np.uint8(a), axis=1)[:, -m:]\nresult = np.bitwise_xor.reduce(result, axis=1)\n", "metadata": {"problem_id": 427, "library_problem_id": 136, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 134}}
{"id": 163, "code": "\nresult = (np.mean(a) - 3 * np.std(a), np.mean(a) + 3 * np.std(a))\n", "metadata": {"problem_id": 428, "library_problem_id": 137, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 137}}
{"id": 164, "code": "\nresult = (np.mean(a) - 2 * np.std(a), np.mean(a) + 2 * np.std(a))\n", "metadata": {"problem_id": 429, "library_problem_id": 138, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 137}}
{"id": 165, "code": "\n    mean = np.mean(a)\n    std = np.std(a)\n    result = (mean - 3 * std, mean + 3 * std)\n    return result\n    ### END SOLUTION\n", "metadata": {"problem_id": 430, "library_problem_id": 139, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 137}}
{"id": 166, "code": "\na[1:, 0] = 0\na[0, :] = 0\n", "metadata": {"problem_id": 435, "library_problem_id": 144, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 142}}
{"id": 167, "code": "\nmask = a == np.amax(a, axis=1)[:, None]\n", "metadata": {"problem_id": 436, "library_problem_id": 145, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 145}}
{"id": 168, "code": "\nC = A[(A >= B[:, 0]) & (A <= B[:, 1])]\n", "metadata": {"problem_id": 444, "library_problem_id": 153, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"id": 169, "code": "\nresult = rankdata(a, method='dense') - rankdata(a, method='average') + 1\n", "metadata": {"problem_id": 445, "library_problem_id": 154, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 154}}
{"id": 170, "code": "\nresult = np.argsort(rankdata(a, method='dense')[::-1])\n", "metadata": {"problem_id": 446, "library_problem_id": 155, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 154}}
{"id": 171, "code": "\nresult = X / np.linalg.norm(X, ord=1, axis=1, keepdims=True)\n", "metadata": {"problem_id": 452, "library_problem_id": 161, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 161}}
{"id": 172, "code": "\nresult = X / np.sqrt((X**2).sum(axis=1, keepdims=True))\n", "metadata": {"problem_id": 453, "library_problem_id": 162, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 161}}
{"id": 173, "code": "\nresult = np.select([df['a'].str.contains(target)], [choices], default=np.nan)\n", "metadata": {"problem_id": 455, "library_problem_id": 164, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 164}}
{"id": 174, "code": "\nresult = np.sqrt(((a[:, np.newaxis] - a) ** 2).sum(axis=2))\n", "metadata": {"problem_id": 456, "library_problem_id": 165, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 165}}
{"id": 175, "code": "\nresult = np.sqrt(((a[:, np.newaxis, :] - a) ** 2).sum(axis=2))\n", "metadata": {"problem_id": 457, "library_problem_id": 166, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 165}}
{"id": 176, "code": "\nresult = np.sqrt(((a[:, None, :] - a) ** 2).sum(axis=2))\n", "metadata": {"problem_id": 458, "library_problem_id": 167, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 165}}
{"id": 177, "code": "\nAVG = np.mean(np.array(A, dtype=float))\n", "metadata": {"problem_id": 461, "library_problem_id": 170, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 168}}
{"id": 178, "code": "\nresult = np.where(np.diff(a.ravel()) != 0)[0].reshape(-1, 1)\n", "metadata": {"problem_id": 463, "library_problem_id": 172, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 171}}
{"id": 179, "code": "\nresult = np.lib.stride_tricks.sliding_window_view(a, size)[:, :, size[0]//2, size[1]//2]\n", "metadata": {"problem_id": 468, "library_problem_id": 177, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 176}}
{"id": 180, "code": "\nresult = np.mean(a.real) + 1j * np.mean(a.imag)\n", "metadata": {"problem_id": 469, "library_problem_id": 178, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 178}}
{"id": 181, "code": "\na[~np.eye(a.shape[0], dtype=bool)] = 0\n", "metadata": {"problem_id": 478, "library_problem_id": 187, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 187}}
{"id": 182, "code": "\nresult = np.where((x == a) & (y == b))[0]\n", "metadata": {"problem_id": 481, "library_problem_id": 190, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 189}}
{"id": 183, "code": "\nresult = np.polyfit(x, y, 2)\n", "metadata": {"problem_id": 482, "library_problem_id": 191, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 191}}
{"id": 184, "code": "\nresult = np.polyfit(x, y, degree)\nresult = result[::-1]\n", "metadata": {"problem_id": 483, "library_problem_id": 192, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 191}}
{"id": 185, "code": "\nresult = MinMaxScaler().fit_transform(arr)\n", "metadata": {"problem_id": 487, "library_problem_id": 196, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 195}}
{"id": 186, "code": "\nresult = MinMaxScaler().fit_transform(a.reshape(-1, a.shape[-1])).reshape(a.shape)\n", "metadata": {"problem_id": 488, "library_problem_id": 197, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 195}}
{"id": 187, "code": "\narr[arr < n1] = 0\narr[arr >= n2] = 30\narr[~(arr < n1) & ~(arr >= n2)] += 5\n", "metadata": {"problem_id": 490, "library_problem_id": 199, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 198}}
{"id": 188, "code": "\nresult = all(np.array_equal(arr, a[0]) for arr in a)\n", "metadata": {"problem_id": 493, "library_problem_id": 202, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Origin", "perturbation_origin_id": 202}}
{"id": 189, "code": "\nresult = np.pad(a, ((0, shape[0] - a.shape[0]), (0, shape[1] - a.shape[1])), 'constant', constant_values=element)\n", "metadata": {"problem_id": 497, "library_problem_id": 206, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 204}}
{"id": 190, "code": "\n    result = np.pad(arr, ((0, shape[0] - arr.shape[0]), (0, shape[1] - arr.shape[1])))\n    return result\n", "metadata": {"problem_id": 498, "library_problem_id": 207, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 204}}
{"id": 191, "code": "\nresult = a[np.arange(b.shape[0])[:, None], np.arange(b.shape[1]), b]\n", "metadata": {"problem_id": 501, "library_problem_id": 210, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 210}}
{"id": 192, "code": "\nresult = np.sum(a[np.arange(a.shape[0])[:, None], np.arange(a.shape[1]), b], axis=-1)\n", "metadata": {"problem_id": 504, "library_problem_id": 213, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 210}}
{"id": 193, "code": "\nresult = np.sum(a[np.arange(a.shape[0])[:, None], np.arange(a.shape[1]), b], axis=-1)\n", "metadata": {"problem_id": 505, "library_problem_id": 214, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 210}}
{"id": 194, "code": "\nresult = df.loc[df['a'].between(1, 4), 'b'].fillna(np.nan)\n", "metadata": {"problem_id": 506, "library_problem_id": 215, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 215}}
{"id": 195, "code": "\n<code>\nfor style in ['solid', 'dashed', 'dashdot', 'dotted']:\n    y = np.random.rand(10)\n    plt.plot(x, y, linestyle=style, label=style)\n", "metadata": {"problem_id": 515, "library_problem_id": 4, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 196, "code": "\n<code>\nfor style in ['solid', 'dashed', 'dashdot', 'dotted']:\n    y = np.random.rand(10)\n    plt.plot(x, y, linestyle=style, label=style)\n", "metadata": {"problem_id": 516, "library_problem_id": 5, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 197, "code": "\nplt.axvspan(2, 4, color='red', alpha=0.2)\n\nplt.show()", "metadata": {"problem_id": 520, "library_problem_id": 9, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 198, "code": "\nseaborn.relplot(data=df, x=\"Height (cm)\", y=\"Weight (kg)\", hue=\"Gender\", kind=\"scatter\")\nplt.show()\n\n", "metadata": {"problem_id": 523, "library_problem_id": 12, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 12}}
{"id": 199, "code": "\n<code>\nplt.xticks(rotation=45)\n", "metadata": {"problem_id": 533, "library_problem_id": 22, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 21}}
{"id": 200, "code": "\n<code>\nplt.xticks(np.arange(0, 2 * np.pi, np.pi / 2))\nplt.xlabel('Angle (radians)')\nplt.ylabel('Cosine')\nplt.title('Cosine Function')\nplt.legend()\nplt.show()\n", "metadata": {"problem_id": 534, "library_problem_id": 23, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 21}}
{"id": 201, "code": "\nplt.imshow(H, cmap='gray')\nplt.colorbar()\nplt.title('2D Array in Black and White')\nplt.show()\n\n", "metadata": {"problem_id": 537, "library_problem_id": 26, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 25}}
{"id": 202, "code": "\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>", "metadata": {"problem_id": 540, "library_problem_id": 29, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 29}}
{"id": 203, "code": "\nplt.plot(x, y[::-1])\nplt.ylim(bottom=0)\nplt.show()", "metadata": {"problem_id": 541, "library_problem_id": 30, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 204, "code": "\nplt.xticks([0, 1.5])\nplt.yticks([0, 1.5])\n\nplt.show()", "metadata": {"problem_id": 542, "library_problem_id": 31, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 31}}
{"id": 205, "code": "\nplt.scatter(x, y, edgecolors='black', facecolors='blue')\nplt.show()\n<jupyter_output>\n<empty_output>\n", "metadata": {"problem_id": 545, "library_problem_id": 34, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 34}}
{"id": 206, "code": "\n<code>\nplt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda x, pos: '{:,.0f}'.format(x)))\n", "metadata": {"problem_id": 547, "library_problem_id": 36, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 207, "code": "\n<code>\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\nax1.plot(x, y1)\nax1.set_title('Sine Wave')\nax1.set_xlabel('X-axis')\nax1.set_ylabel('Y-axis')\nax1.spines['top'].set_visible(False)\nax1.spines['right'].set_visible(False)\n\nax2.plot(x, y2)\nax2.set_title('Cosine Wave')\nax2.set_xlabel('X-axis')\nax2.set_ylabel('Y-axis')\nax2.spines['top'].set_visible(False)\nax2.spines['right'].set_visible(False)\n\nplt.show()\n", "metadata": {"problem_id": 550, "library_problem_id": 39, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 38}}
{"id": 208, "code": "\nplt.xticks([3, 4])\nplt.grid(axis='x', which='both')\n\nplt.show()", "metadata": {"problem_id": 553, "library_problem_id": 42, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 209, "code": "\nplt.grid(True)\n\n", "metadata": {"problem_id": 556, "library_problem_id": 45, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 210, "code": "plt.legend(loc='lower right')\n", "metadata": {"problem_id": 557, "library_problem_id": 46, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 46}}
{"id": 211, "code": "\n<code>\nax.set_xticks(np.arange(data.shape[1]) + 0.5, minor=False)\nax.set_yticks(np.arange(data.shape[0]) + 0.5, minor=False)\nax.invert_yaxis()\nax.set_xticklabels(column_labels, minor=False)\nax.set_yticklabels(row_labels, minor=False)\n", "metadata": {"problem_id": 560, "library_problem_id": 49, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 212, "code": "\nplt.plot(x, y)\nplt.xlabel('X')\nplt.xticks(np.arange(10), rotation=90)\nplt.subplots_adjust(left=0.8)\nplt.show()", "metadata": {"problem_id": 561, "library_problem_id": 50, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 50}}
{"id": 213, "code": "\nplt.plot(x, y)\nplt.yticks(np.arange(10), rotation=0)\nplt.ylabel('Y')\nplt.show()", "metadata": {"problem_id": 564, "library_problem_id": 53, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 52}}
{"id": 214, "code": "\n<code>\nsns.jointplot(x='total_bill', y='tip', data=tips, kind='reg', color='green', scatter_kws={'color': 'blue'})\nplt.show()\n", "metadata": {"problem_id": 565, "library_problem_id": 54, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 215, "code": "\nplt.plot(x, y, color='red')\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.title('Plot of Y over X')\nplt.show()\n<jupyter_output>\n<empty_output>\n", "metadata": {"problem_id": 571, "library_problem_id": 60, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 59}}
{"id": 216, "code": "\nx = [0.22058956, 0.33088437, 2.20589566]\ny = [0, 0, 0]\n\nplt.axvline(x=x[0], color='red', linestyle='--')\nplt.axvline(x=x[1], color='green', linestyle='--')\nplt.axvline(x=x[2], color='blue', linestyle='--')\n\nplt.plot(x, y, 'o')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Vertical Lines at Specified X-Coordinates')\nplt.show()", "metadata": {"problem_id": 573, "library_problem_id": 62, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"id": 217, "code": "\nplt.imshow(rand_mat, cmap='hot', aspect='auto', interpolation='nearest')\nplt.xticks(range(len(xlabels)), xlabels)\nplt.yticks(range(len(ylabels)), ylabels[::-1])\nplt.xlabel('X-axis Labels')\nplt.ylabel('Y-axis Labels')\nplt.title('Heatmap of Random Matrix')\nplt.colorbar()\nplt.show()", "metadata": {"problem_id": 574, "library_problem_id": 63, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 218, "code": "\nplt.hist(x, edgecolor='black', linewidth=1.2)\nplt.show()\n\n", "metadata": {"problem_id": 581, "library_problem_id": 70, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 70}}
{"id": 219, "code": "\nfig, axs = plt.subplots(1, 2, figsize=(8, 4), gridspec_kw={'width_ratios': [3, 1]})\n\naxs[0].plot(x, y)\naxs[0].set_title('Subplot 1')\n\naxs[1].plot(y, x)\naxs[1].set_title('Subplot 2')\n\nplt.tight_layout()\nplt.show()", "metadata": {"problem_id": 582, "library_problem_id": 71, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"id": 220, "code": "\nplt.hist(x, bins=bins, alpha=0.5, label='x')\nplt.hist(y, bins=bins, alpha=0.5, label='y')\nplt.legend()\nplt.show()\n\n", "metadata": {"problem_id": 583, "library_problem_id": 72, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 72}}
{"id": 221, "code": "\nplt.plot(x[:, 0], label='a')\nplt.plot(x[:, 1], label='b')\nplt.legend()\nplt.show()\n\n", "metadata": {"problem_id": 587, "library_problem_id": 76, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 222, "code": "\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>", "metadata": {"problem_id": 589, "library_problem_id": 78, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 78}}
{"id": 223, "code": "\nplt.plot(x, y)\nplt.xscale('log')\nplt.yscale('log')\nplt.xticks(x, [f'{i}' if i % 100 == 0 else '' for i in x])\nplt.yticks(y, [f'{i}' if i % 100 == 0 else '' for i in y])\nplt.xlabel('X-axis (log scale)')\nplt.ylabel('Y-axis (log scale)')\nplt.title('Log-Log Plot of Y vs X')\nplt.grid(True)\nplt.show()\n\n", "metadata": {"problem_id": 593, "library_problem_id": 82, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 224, "code": "\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\nax1.plot(x, y, label='y')\nax1.legend()\n\nax2.plot(z, a, label='a')\nax2.legend()\n\nfig.legend()\n\nplt.show()\n<jupyter_output>\n<empty_output>\n", "metadata": {"problem_id": 597, "library_problem_id": 86, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 86}}
{"id": 225, "code": "\nplt.xticks(np.append(plt.xticks()[0], [2.1, 3, 7.6]))\n\n", "metadata": {"problem_id": 601, "library_problem_id": 90, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 226, "code": "\nplt.yticks(rotation=-60, va='top')\n\n", "metadata": {"problem_id": 603, "library_problem_id": 92, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 91}}
{"id": 227, "code": "\nplt.xticks(alpha=0.5)\n\n", "metadata": {"problem_id": 604, "library_problem_id": 93, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 91}}
{"id": 228, "code": "\ndf.plot(kind='line')\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.title('Line Chart of Values')\nplt.show()\n\n", "metadata": {"problem_id": 608, "library_problem_id": 97, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"id": 229, "code": "\nplt.scatter(x, y, marker='|', edgecolors='none', s=100)\nplt.title('Scatter Plot with Vertical Line Hatch')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()", "metadata": {"problem_id": 610, "library_problem_id": 99, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"id": 230, "code": "\nplt.scatter(x, y, marker='*', s=100)\nplt.title('Scatter Plot with Star Hatch Marker')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()", "metadata": {"problem_id": 611, "library_problem_id": 100, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"id": 231, "code": "\nx = [1, 2, 3, 4, 5]\ny = [2, 4, 6, 8, 10]\n\nplt.plot(x, y, label='Line')\nplt.axvline(x=3, color='red', linestyle='--', label='Cutoff')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Vertical Line Plot')\nplt.legend()\nplt.show()\n\n", "metadata": {"problem_id": 616, "library_problem_id": 105, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 105}}
{"id": 232, "code": "\n<code>\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.bar(labels, height)\nax.set_theta_zero_location('N')\nax.set_theta_direction(-1)\nplt.show()\n", "metadata": {"problem_id": 617, "library_problem_id": 106, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 106}}
{"id": 233, "code": "\nplt.pie(data, labels=l, wedgeprops={'width': 0.4})\nplt.title('Donut Plot')\nplt.show()\n\n", "metadata": {"problem_id": 618, "library_problem_id": 107, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"id": 234, "code": "\n<code>\nplt.plot(x, y)\nplt.minorticks_on()\nplt.grid(which='minor', linestyle='--', color='gray')\nplt.grid(which='major', linestyle='-', color='black', alpha=0.2)\nplt.show()\n", "metadata": {"problem_id": 620, "library_problem_id": 109, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"id": 235, "code": "\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90, textprops={'fontsize': 12, 'fontweight': 'bold'})\nplt.title(\"Activity Distribution\", fontsize=16, fontweight='bold')\nplt.axis('equal')\nplt.show()\n\n", "metadata": {"problem_id": 622, "library_problem_id": 111, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 111}}
{"id": 236, "code": "plt.axvline(x=55, color='green', linestyle='--')\n", "metadata": {"problem_id": 624, "library_problem_id": 113, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 113}}
{"id": 237, "code": "\nx = np.arange(len(blue_bar))\nwidth = 0.35\n\nplt.bar(x - width/2, blue_bar, width, label='Blue Bars')\nplt.bar(x + width/2, orange_bar, width, label='Orange Bars')\n\nplt.xlabel('Categories')\nplt.ylabel('Values')\nplt.title('Side-by-Side Bar Plot')\nplt.xticks(x, ['Category 1', 'Category 2', 'Category 3'])\nplt.legend()\nplt.show()", "metadata": {"problem_id": 625, "library_problem_id": 114, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"id": 238, "code": "\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\nax1.plot(x, y, label='y')\nax1.plot(a, z, label='z')\nax1.legend()\n\nax2.plot(x, z)\nax2.set_title('z over a')\n\nplt.show()\n<jupyter_output>\n<empty_output>\n", "metadata": {"problem_id": 626, "library_problem_id": 115, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 115}}
{"id": 239, "code": "\nplt.scatter(x, y, c=y, cmap='Spectral')\nplt.colorbar()\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Scatter Plot with Colorbar')\nplt.show()\n\n", "metadata": {"problem_id": 627, "library_problem_id": 116, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 116}}
{"id": 240, "code": "\nplt.plot(x, y, label='Line', marker='o')\nplt.legend(handlelength=0.3)\nplt.show()", "metadata": {"problem_id": 633, "library_problem_id": 122, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 241, "code": "\nplt.legend()\nplt.show()", "metadata": {"problem_id": 635, "library_problem_id": 124, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 242, "code": "\n<code>\nplt.scatter(x, y, clip_on=False)\nplt.xlim(0, 10)\nplt.ylim(0, 10)\nplt.show()\n", "metadata": {"problem_id": 640, "library_problem_id": 129, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 129}}
{"id": 243, "code": "\nplt.axhline(y=0, color='white', linewidth=2)\nplt.axvline(x=0, color='white', linewidth=2)\n\n", "metadata": {"problem_id": 645, "library_problem_id": 134, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 134}}
{"id": 244, "code": "\nfig, axs = plt.subplots(4, 4, figsize=(5, 5))\nfig.subplots_adjust(wspace=0.5, hspace=0.5)\n\nfor i in range(4):\n    for j in range(4):\n        axs[i, j].plot(x, y)\n        axs[i, j].set_xticks(x)\n        axs[i, j].set_yticks(y)\n        axs[i, j].set_xlabel('X-axis')\n        axs[i, j].set_ylabel('Y-axis')\n\nplt.show()\n<jupyter_output>\n<empty_output>\n", "metadata": {"problem_id": 648, "library_problem_id": 137, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 137}}
{"id": 245, "code": "\nplt.matshow(d, cmap='viridis')\nplt.title('Random Matrix')\nplt.colorbar()\nplt.show()\n\n", "metadata": {"problem_id": 649, "library_problem_id": 138, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 138}}
{"id": 246, "code": "\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>", "metadata": {"problem_id": 650, "library_problem_id": 139, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 139}}
{"id": 247, "code": "\nplt.plot(x, y)\nplt.xticks(rotation=90)\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Line Chart')\nplt.show()\n\n", "metadata": {"problem_id": 652, "library_problem_id": 141, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 140}}
{"id": 248, "code": "\n<code>\nsns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"scatter\")\nplt.xlabel(\"Exercise Time\")\nplt.ylabel(\"Pulse\")\nplt.show()\n", "metadata": {"problem_id": 655, "library_problem_id": 144, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"id": 249, "code": "\n<code>\ng = sns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"scatter\")\ng.set_axis_labels(\"Time (minutes)\", \"Pulse (bpm)\")\ng.set_titles(\"{col_name}\")\ng.set_xticklabels(rotation=45)\nplt.show()\n", "metadata": {"problem_id": 656, "library_problem_id": 145, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"id": 250, "code": "\ng = sns.FacetGrid(df, col=\"b\", height=4, aspect=1.5)\ng.map(sns.pointplot, \"a\", \"c\", markers=\"o\", linestyles=\"-\", dodge=True)\ng.set_xticks(df[\"a\"][::2])\ng.set_xticklabels(df[\"a\"][::2])\ng.set_titles(\"{col_name}\")\ng.set_xlabels(\"Age\")\ng.set_ylabels(\"C\")\nplt.show()\n\n", "metadata": {"problem_id": 662, "library_problem_id": 151, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 151}}
{"id": 251, "code": "\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(x, y, z)\nax.view_init(azim=100, elev=50)\nplt.show()\n\n", "metadata": {"problem_id": 663, "library_problem_id": 152, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 152}}
{"id": 252, "code": "\n<code>\nplt.plot(x, y)\nplt.xlabel('x')\nplt.ylabel('y')\nplt.xticks([])\nplt.yticks([])\nplt.show()\n", "metadata": {"problem_id": 664, "library_problem_id": 153, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 153}}
{"id": 253, "code": "\nx.assign(1)\nresult = x.numpy()\n", "metadata": {"problem_id": 666, "library_problem_id": 0, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 254, "code": "\nresult = tf.one_hot(labels, depth=10, dtype=tf.int32)\n", "metadata": {"problem_id": 672, "library_problem_id": 6, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 2}}
{"id": 255, "code": "\nresult = [item for sublist in result for item in sublist]\n", "metadata": {"problem_id": 673, "library_problem_id": 7, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 7}}
{"id": 256, "code": "\nresult = tf.pad(tf.ones_like(lengths)[:, None], [[0, 0], [0, 8 - tf.reduce_max(lengths)]]) * tf.cast(tf.sequence_mask(lengths), tf.int32)\n", "metadata": {"problem_id": 676, "library_problem_id": 10, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 9}}
{"id": 257, "code": "\n    max_length = tf.reduce_max(lengths)\n    mask = tf.sequence_mask(lengths, max_length=max_length)\n    padded_mask = tf.pad(mask, [[0, 0], [0, 8 - max_length]])\n    return padded_mask\n", "metadata": {"problem_id": 678, "library_problem_id": 12, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 258, "code": "\nresult = tf.pad(tf.ones_like(lengths)[:, None], [[0, 0], [0, 8 - tf.reduce_max(lengths)]]) * tf.sequence_mask(lengths, maxlen=8)\n", "metadata": {"problem_id": 679, "library_problem_id": 13, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 259, "code": "\n    result = tf.reshape(tf.stack(tf.meshgrid(a, b), axis=-1), (-1, 2))\n    return result\n", "metadata": {"problem_id": 681, "library_problem_id": 15, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 14}}
{"id": 260, "code": "\nresult = tf.reshape(a, (50, 100, 512))\n", "metadata": {"problem_id": 682, "library_problem_id": 16, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 261, "code": "\nresult = tf.expand_dims(tf.expand_dims(a, axis=1), axis=-2)\n", "metadata": {"problem_id": 684, "library_problem_id": 18, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"id": 262, "code": "\nresult = tf.reduce_sum(tf.square(tf.subtract(a, b)), axis=1)\n", "metadata": {"problem_id": 688, "library_problem_id": 22, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 22}}
{"id": 263, "code": "\nresult = tf.reduce_sum(tf.square(tf.subtract(a, b)), axis=1)\n", "metadata": {"problem_id": 689, "library_problem_id": 23, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 22}}
{"id": 264, "code": "\nresult = tf.gather_nd(x, tf.stack([row, col], axis=-1))\n", "metadata": {"problem_id": 692, "library_problem_id": 26, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 25}}
{"id": 265, "code": "\nresult = tf.einsum('bij,bjk->bik', A, B)\n", "metadata": {"problem_id": 694, "library_problem_id": 28, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"id": 266, "code": "\nresult = tf.einsum('bij,bjk->bik', A, B)\n", "metadata": {"problem_id": 695, "library_problem_id": 29, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 28}}
{"id": 267, "code": "\nresult = [item.decode('utf-8') for item in x]\n", "metadata": {"problem_id": 696, "library_problem_id": 30, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 268, "code": "\n    result = [x_item.decode('utf-8') for x_item in x]\n    return result\n", "metadata": {"problem_id": 697, "library_problem_id": 31, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 30}}
{"id": 269, "code": "\nresult = tf.math.reduce_mean(x[..., tf.newaxis, :, :] * (x != 0)[..., tf.newaxis, :, :], axis=-2)\n", "metadata": {"problem_id": 699, "library_problem_id": 33, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 270, "code": "\n    non_zero_count = tf.reduce_sum(tf.cast(x != 0, tf.float32), axis=-1)\n    non_zero_sum = tf.reduce_sum(x, axis=-1)\n    result = tf.where(non_zero_count > 0, non_zero_sum / non_zero_count, tf.zeros_like(x))\n    return result\n### END SOLUTION\n", "metadata": {"problem_id": 700, "library_problem_id": 34, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 271, "code": "\nresult = tf.random.uniform(shape=(10,), minval=1, maxval=5, dtype=tf.int32, seed=seed_x)\n", "metadata": {"problem_id": 707, "library_problem_id": 41, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"id": 272, "code": "\nresult = tf.random.uniform(shape=(114,), minval=2, maxval=6, dtype=tf.int32, seed=seed_x)\n", "metadata": {"problem_id": 708, "library_problem_id": 42, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 41}}
{"id": 273, "code": "\n<code>\nstatistic, p_value = stats.ks_2samp(x, z)\n", "metadata": {"problem_id": 714, "library_problem_id": 3, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 3}}
{"id": 274, "code": "\nresult = optimize.minimize(lambda x: f(x[0], x[1], x[2]), initial_guess).x\n", "metadata": {"problem_id": 716, "library_problem_id": 5, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 5}}
{"id": 275, "code": "\np_values = scipy.stats.norm.cdf(z_scores)\n", "metadata": {"problem_id": 717, "library_problem_id": 6, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 6}}
{"id": 276, "code": "\np_values = scipy.stats.norm.cdf(z_scores, loc=mu, scale=sigma)\n", "metadata": {"problem_id": 718, "library_problem_id": 7, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 6}}
{"id": 277, "code": "\nresult = stats.lognorm.cdf(x, s=stddev, scale=np.exp(mu))\n", "metadata": {"problem_id": 720, "library_problem_id": 9, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 278, "code": "\nresult = sa.multiply(sb)\n", "metadata": {"problem_id": 722, "library_problem_id": 11, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"id": 279, "code": "\n    result = sA.multiply(sB)\n    return result\n", "metadata": {"problem_id": 723, "library_problem_id": 12, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 280, "code": "\nresult = M.diagonal()\n", "metadata": {"problem_id": 727, "library_problem_id": 16, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 281, "code": "\nresult = scipy.optimize.linear_sum_assignment(scipy.spatial.distance.cdist(points1, points2))[1]\n", "metadata": {"problem_id": 735, "library_problem_id": 24, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 23}}
{"id": 282, "code": "\nb = b.setdiag(0)\n", "metadata": {"problem_id": 736, "library_problem_id": 25, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 283, "code": "\nresult = ndimage.label(img > threshold)[1]\n", "metadata": {"problem_id": 737, "library_problem_id": 26, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 284, "code": "\nsquare[scipy.ndimage.binary_erosion(square) & scipy.ndimage.binary_dilation(square)] = 0\n", "metadata": {"problem_id": 744, "library_problem_id": 33, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 285, "code": "\nmedian = np.median(col.data)\nmode = np.argmax(np.bincount(col.data))\n", "metadata": {"problem_id": 747, "library_problem_id": 36, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 34}}
{"id": 286, "code": "\nresult = scipy.spatial.distance.cdist(example_array.reshape(-1, 1), example_array.reshape(-1, 1), metric='euclidean')\nresult[np.diag_indices_from(result)] = np.inf\n", "metadata": {"problem_id": 749, "library_problem_id": 38, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 38}}
{"id": 287, "code": "\n    n = example_array.shape[0]\n    ids = np.arange(n * n).reshape(n, n)\n    flat_array = example_array.flatten()\n    distances = scipy.spatial.distance.cdist(ids.reshape(-1, 2), ids.reshape(-1, 2), metric='euclidean')\n    distances[np.diag_indices(n * n)] = np.inf\n    distances[np.triu_indices(n, k=1)] = np.inf\n    distances[np.tril_indices(n, k=-1)] = np.inf\n    distances[np.diag_indices(n * n)] = np.inf\n    distances[np.triu_indices(n, k=1)] = np.inf\n    distances[np.tril_indices(n, k=-1)] = np.inf\n    distances[np.diag_indices(n * n)] = np.inf\n    distances[np.triu_indices(n, k=1)] = np.inf\n    distances[np.tril_indices(n, k=-1)] = np.inf\n    distances[np.diag_indices(n * n)] = np.inf\n    distances[np.triu_indices(n, k=1)] = np.inf\n    distances[np.tril_indices(n, k=-1)] = np.inf\n    distances[np.diag_indices(n * n)] = np.inf\n    distances[np.triu_indices(n, k=1)] = np.inf\n    distances[np.tril_indices(n, k=-1)] = np.inf\n    distances[np.diag_indices(n * n)] = np.inf\n    distances[np.triu_indices(n, k=1)] = np.inf\n    distances[np.tril_indices(n, k=-1)] = np.inf\n    distances[np.diag_indices(n * n)] = np.inf\n    distances[np.triu_indices(n, k=1)] = np.inf\n    distances[np.tril_indices(n, k=-1)] = np.inf\n    distances[np.diag_indices(n * n)] = np.inf\n    distances[np.triu_indices(n, k=1)] = np.inf\n    distances[np.tril_indices(n, k=-1)] = np.inf\n    distances[np.diag_indices(n * n)] = np.inf\n    distances[np.triu_indices(n, k=1)] = np.inf\n    distances[np.tril_indices(n, k=-1)] = np.inf\n    distances[np.diag_indices(n * n)] = np.inf\n    distances[np.triu_indices(n, k=1)] = np.inf\n    distances[np.tril_indices(n, k=-1)] = np.inf\n    distances[np.diag_indices(n * n)] = np.inf\n    distances[np.triu_indices(n, k=1)] = np.inf\n    distances[np.tril_indices(n, k=-1)] = np.inf\n    distances[np.diag_indices(n * n)] = np.inf\n    distances[np.triu_indices(n, k=1)] = np.inf\n    distances[np.tril_indices(n, k=-1)] = np.inf\n    distances[np.diag_indices(n * n)] = np.inf\n    distances[np.triu_indices(n, k=1)] = np.inf\n    distances[np.tril_indices(n, k=-1)] = np.inf\n    distances[np.diag_indices(n * n)] = np.inf\n    distances[np.triu_indices(n, k=1)] = np.inf\n    distances[np.tril_indices(n, k=-1)] = np.inf\n    distances[np.diag_indices(n * n)] = np.inf\n    distances[np", "metadata": {"problem_id": 751, "library_problem_id": 40, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 38}}
{"id": 288, "code": "\np_value = stats.ranksums(pre_course_scores, during_course_scores).pvalue\n", "metadata": {"problem_id": 759, "library_problem_id": 48, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"id": 289, "code": "\nresult = M[row, column].toarray().flatten()\n", "metadata": {"problem_id": 770, "library_problem_id": 59, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 58}}
{"id": 290, "code": "\nnew_array = scipy.interpolate.interp1d(x, array, axis=0)(x_new)\n", "metadata": {"problem_id": 771, "library_problem_id": 60, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 60}}
{"id": 291, "code": "\nprob = NormalDistro(u, o2, x)\n", "metadata": {"problem_id": 772, "library_problem_id": 61, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 292, "code": "\n    dev = abs((x-u)/o2)\n    P_inner = scipy.integrate.quad(NDfx, -dev, dev)[0]\n    P_outer = 1 - P_inner\n    P = P_inner + P_outer/2\n    return P\n", "metadata": {"problem_id": 773, "library_problem_id": 62, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 61}}
{"id": 293, "code": "\nresult = sf.dct(np.eye(N), norm='ortho')\n", "metadata": {"problem_id": 774, "library_problem_id": 63, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 294, "code": "\nresult = sparse.diags(matrix, [-1, 0, 1], shape=(5, 5)).toarray()\n", "metadata": {"problem_id": 775, "library_problem_id": 64, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 295, "code": "\nresult = scipy.stats.binom.pmf(np.arange(N+1), N, p).reshape(N+1, -1)\n", "metadata": {"problem_id": 776, "library_problem_id": 65, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"id": 296, "code": "\nresult = df.apply(stats.zscore, axis=1)\n", "metadata": {"problem_id": 777, "library_problem_id": 66, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"id": 297, "code": "\nresult = scipy.ndimage.zoom(x, shape / x.shape, order=1)\n", "metadata": {"problem_id": 785, "library_problem_id": 74, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Origin", "perturbation_origin_id": 74}}
{"id": 298, "code": "\n\n<code>\ndef dN1_dt_time_variant(t, N1):\n    return -100 * N1 + np.sin(t)\n\nsol = scipy.integrate.solve_ivp(fun=dN1_dt_time_variant, t_span=time_span, y0=[N0,])\nresult = sol.y[0]\n", "metadata": {"problem_id": 788, "library_problem_id": 77, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 77}}
{"id": 299, "code": "\n\nfor t in range(4):\n    def const(x):\n        y=x[t]\n        return y\n    cons.append({'type':'ineq', 'fun': const})\n\nout=minimize(function, x0, method=\"SLSQP\", constraints=cons)\nx=out[\"x\"]\n", "metadata": {"problem_id": 791, "library_problem_id": 80, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 300, "code": "\nresult, _ = scipy.integrate.quad(lambda x: 2*c*x*x, low, high)\n", "metadata": {"problem_id": 794, "library_problem_id": 83, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 83}}
{"id": 301, "code": "\na = (a > 0).astype(int)\n", "metadata": {"problem_id": 801, "library_problem_id": 90, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 302, "code": "\na = (a > 0).astype(int)\n", "metadata": {"problem_id": 802, "library_problem_id": 91, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 90}}
{"id": 303, "code": "\nresult = np.argmin(scipy.spatial.distance.cdist(data, centroids), axis=1)\n", "metadata": {"problem_id": 803, "library_problem_id": 92, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 92}}
{"id": 304, "code": "\nresult = scipy.spatial.distance.cdist(data, centroids).argsort(axis=1)[:, :k].flatten()\n", "metadata": {"problem_id": 805, "library_problem_id": 94, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 92}}
{"id": 305, "code": "\nresult = np.array([fsolve(lambda b, x, a: eqn(x, a, b), x0=0.5, args=(x, a)) for x, a in zip(xdata, adata)])\n", "metadata": {"problem_id": 807, "library_problem_id": 96, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 95}}
{"id": 306, "code": "\nintegral_df = df.set_index('Time').rolling('25S').apply(integrate.trapz)\n", "metadata": {"problem_id": 810, "library_problem_id": 99, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 99}}
{"id": 307, "code": "\nweights = sciopt.fmin(lambda w: -np.sum(a['A1'] * np.log(w) - np.sum(np.log(np.dot(np.ones((len(a), 1)), w.reshape(1, -1))))), np.ones(a['A1'].nunique()) / a['A1'].nunique(), disp=False)\n", "metadata": {"problem_id": 812, "library_problem_id": 101, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 101}}
{"id": 308, "code": "\nresult = sciopt.fminbound(e, pmin, pmax, args=(x,y))\n", "metadata": {"problem_id": 813, "library_problem_id": 102, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 102}}
{"id": 309, "code": "\ndata1 = pd.DataFrame(data.data, columns=data.feature_names)\ndata1['target'] = data.target\n", "metadata": {"problem_id": 817, "library_problem_id": 0, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 310, "code": "\ndata1 = pd.DataFrame(data.data, columns=data.feature_names)\ndata1['target'] = data.target\n", "metadata": {"problem_id": 818, "library_problem_id": 1, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 311, "code": "\ndf_out = df.join(df['Col3'].apply(pd.Series).stack().reset_index(level=1, drop=True).str.get_dummies()).drop('Col3', axis=1)\n", "metadata": {"problem_id": 821, "library_problem_id": 4, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 312, "code": "\ndf_out = df.explode('Col3').pivot_table(index='Col1', columns='Col3', values='Col2', aggfunc='count', fill_value=0)\n", "metadata": {"problem_id": 822, "library_problem_id": 5, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 313, "code": "\ndf_out = df.join(df['Col3'].str.join('|').str.get_dummies())\ndf_out.drop('Col3', axis=1, inplace=True)\n", "metadata": {"problem_id": 824, "library_problem_id": 7, "library": "Sklearn", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 314, "code": "\ndf_out = df.join(df['Col3'].str.join('|').str.get_dummies())\ndf_out.drop('Col3', axis=1, inplace=True)\n", "metadata": {"problem_id": 825, "library_problem_id": 8, "library": "Sklearn", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 315, "code": "\n<code>\nfrom sklearn.calibration import CalibratedClassifierCV\n\nmodel = CalibratedClassifierCV(base_estimator=model)\nmodel.fit(X, y)\nproba = model.predict_proba(x_predict)\n", "metadata": {"problem_id": 827, "library_problem_id": 10, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 316, "code": "\ndf = pd.concat([df_origin, pd.DataFrame(transform_output.toarray(), columns=transform_output.columns)], axis=1)\n", "metadata": {"problem_id": 828, "library_problem_id": 11, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"id": 317, "code": "\ndf = pd.concat([df_origin, pd.DataFrame(transform_output.toarray(), columns=['feature_' + str(i) for i in range(transform_output.shape[1])])], axis=1)\n", "metadata": {"problem_id": 829, "library_problem_id": 12, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 318, "code": "\n\n<code>\nclf.steps.remove(('reduce_dim', clf.named_steps['reduce_dim']))\n", "metadata": {"problem_id": 831, "library_problem_id": 14, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 14}}
{"id": 319, "code": "\n\nclf.steps.pop(1)\n", "metadata": {"problem_id": 833, "library_problem_id": 16, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 14}}
{"id": 320, "code": "\n\nclf.steps.insert(1, ('new_step', NewStep()))\n", "metadata": {"problem_id": 834, "library_problem_id": 17, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"id": 321, "code": "\nproba = []\nfor train_index, test_index in cv:\n    X_train, X_test = X[train_index], X[test_index]\n    y_train = y[train_index]\n    logreg.fit(X_train, y_train)\n    proba.extend(logreg.predict_proba(X_test)[:, 1])\n", "metadata": {"problem_id": 840, "library_problem_id": 23, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 22}}
{"id": 322, "code": "\ninversed = scaler.inverse_transform(scaled)\n", "metadata": {"problem_id": 841, "library_problem_id": 24, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 24}}
{"id": 323, "code": "\nmodel_name = model.__class__.__name__\n", "metadata": {"problem_id": 844, "library_problem_id": 27, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 26}}
{"id": 324, "code": "\ntf_idf_out = pipe.named_steps[\"tf_idf\"].transform(data.test)\n", "metadata": {"problem_id": 847, "library_problem_id": 30, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 29}}
{"id": 325, "code": "\n\n<code>\n\nclf = GridSearchCV(bc, param_grid=param_grid)\nclf.fit(X_train, y_train)\nproba = clf.predict_proba(X_test)\n", "metadata": {"problem_id": 849, "library_problem_id": 32, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 326, "code": "\n\nregressor = RandomForestRegressor(n_estimators=150, min_samples_split=1.0, random_state=42)\nrgr = regressor.fit(X, y)\npredict = rgr.predict(X_test)\n", "metadata": {"problem_id": 851, "library_problem_id": 34, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 33}}
{"id": 327, "code": "\n\n<code>\n\ntfidf = TfidfVectorizer(preprocessor=preprocess)\n", "metadata": {"problem_id": 852, "library_problem_id": 35, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Origin", "perturbation_origin_id": 35}}
{"id": 328, "code": "\ncoef = grid.best_estimator_.named_steps['model'].coef_\n", "metadata": {"problem_id": 856, "library_problem_id": 39, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 329, "code": "\ncoef = grid.best_estimator_.named_steps['model'].coef_\n", "metadata": {"problem_id": 857, "library_problem_id": 40, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 39}}
{"id": 330, "code": "\ncolumn_names = X.columns[model.get_support()]\n", "metadata": {"problem_id": 858, "library_problem_id": 41, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"id": 331, "code": "\ncolumn_names = X.columns[model.get_support()]\n", "metadata": {"problem_id": 860, "library_problem_id": 43, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 41}}
{"id": 332, "code": "\nclosest_50_samples = X[km.labels_ == km.cluster_centers_[p].argmin()][:50]\n", "metadata": {"problem_id": 862, "library_problem_id": 45, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 45}}
{"id": 333, "code": "\nclosest_100_samples = X[km.labels_ == p][:100]\n", "metadata": {"problem_id": 864, "library_problem_id": 47, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 334, "code": "\n    cluster_centers = km.cluster_centers_\n    distances = np.linalg.norm(X - cluster_centers[p], axis=1)\n    closest_samples = X[np.argsort(distances)[:50]]\n    return closest_samples\n", "metadata": {"problem_id": 865, "library_problem_id": 48, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 335, "code": "\nX_train = pd.get_dummies(X_train[0]).values\n", "metadata": {"problem_id": 866, "library_problem_id": 49, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 336, "code": "\nX_train = pd.get_dummies(X_train[0]).join(X_train.drop(0, axis=1))\n", "metadata": {"problem_id": 867, "library_problem_id": 50, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 49}}
{"id": 337, "code": "\nfrom sklearn.svm import SVR\n\nsvr = SVR(kernel='rbf')\nsvr.fit(X, y)\npredict = svr.predict(X)\n", "metadata": {"problem_id": 868, "library_problem_id": 51, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 51}}
{"id": 338, "code": "\nfrom sklearn.svm import SVR\n\nsvr = SVR(kernel='poly', degree=2)\nsvr.fit(X, y)\npredict = svr.predict(X)\n", "metadata": {"problem_id": 870, "library_problem_id": 53, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 51}}
{"id": 339, "code": "\ncosine_similarities_of_queries = np.array([tfidf.transform([query]).dot(tfidf.transform(documents).T).toarray()[0] for query in queries])\n", "metadata": {"problem_id": 872, "library_problem_id": 55, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 55}}
{"id": 340, "code": "\nnew_f = pd.get_dummies(pd.Series(f).explode()).groupby(level=0).max().values\n", "metadata": {"problem_id": 876, "library_problem_id": 59, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"id": 341, "code": "\n<code>\n\ncluster_labels = sklearn.cluster.AgglomerativeClustering(n_clusters=2, affinity='precomputed').fit_predict(data_matrix)\n", "metadata": {"problem_id": 880, "library_problem_id": 63, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 342, "code": "\n<code>\nfrom sklearn.cluster import AgglomerativeClustering\n\ncluster_labels = AgglomerativeClustering(n_clusters=2, affinity='precomputed', linkage='complete').fit_predict(data_matrix)\n", "metadata": {"problem_id": 881, "library_problem_id": 64, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 63}}
{"id": 343, "code": "\n<code>\nfrom scipy.cluster.hierarchy import linkage, fcluster\n\nlinkage_matrix = linkage(data_matrix, method='complete')\ncluster_labels = fcluster(linkage_matrix, 2, criterion='maxclust')\n", "metadata": {"problem_id": 883, "library_problem_id": 66, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"id": 344, "code": "\n<code>\nfrom scipy.cluster import hierarchy\n\nlinkage_matrix = hierarchy.linkage(data_matrix, method='complete')\ncluster_labels = hierarchy.fcluster(linkage_matrix, 2, criterion='maxclust')\n", "metadata": {"problem_id": 884, "library_problem_id": 67, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 66}}
{"id": 345, "code": "\n<code>\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\ncentered_scaled_data = scaler.fit_transform(data)\n", "metadata": {"problem_id": 886, "library_problem_id": 69, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 69}}
{"id": 346, "code": "\n<code>\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\ncentered_scaled_data = scaler.fit_transform(data)\n", "metadata": {"problem_id": 887, "library_problem_id": 70, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 69}}
{"id": 347, "code": "\n<code>\nfrom sklearn.preprocessing import PowerTransformer\n\nbox_cox_data = PowerTransformer(method='box-cox').fit_transform(data)\n", "metadata": {"problem_id": 888, "library_problem_id": 71, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"id": 348, "code": "\nfrom sklearn.preprocessing import PowerTransformer\n\nbox_cox_data = PowerTransformer(method='box-cox').fit_transform(data)\n", "metadata": {"problem_id": 889, "library_problem_id": 72, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 71}}
{"id": 349, "code": "\n<code>\nfrom sklearn.preprocessing import PowerTransformer\n\npt = PowerTransformer(method='yeo-johnson')\nyeo_johnson_data = pt.fit_transform(data)\n", "metadata": {"problem_id": 891, "library_problem_id": 74, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 73}}
{"id": 350, "code": "\n<code>\nvectorizer = CountVectorizer(token_pattern=r'(?u)\\b\\w+\\b|[^\\w\\s]+')\ntransformed_text = vectorizer.fit_transform(text)\n", "metadata": {"problem_id": 892, "library_problem_id": 75, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 75}}
{"id": 351, "code": "\n<code>\nfrom sklearn.model_selection import train_test_split\n\nX = dataset.iloc[:, :-1]\ny = dataset.iloc[:, -1]\n\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n", "metadata": {"problem_id": 893, "library_problem_id": 76, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 352, "code": "\n<code>\nfrom sklearn.model_selection import train_test_split\n\nX = dataset.iloc[:, :-1]\ny = dataset.iloc[:, -1]\n\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n", "metadata": {"problem_id": 895, "library_problem_id": 78, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 353, "code": "\n<code>\n    X = data.iloc[:, :-1]\n    y = data.iloc[:, -1]\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n    return X_train, y_train, X_test, y_test\n", "metadata": {"problem_id": 896, "library_problem_id": 79, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 354, "code": "\n<code>\nkmeans = KMeans(n_clusters=2, n_init=10).fit(df['mse'].values.reshape(-1, 1))\nlabels = kmeans.labels_\n", "metadata": {"problem_id": 897, "library_problem_id": 80, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 355, "code": "\nselected_feature_names = np.asarray(vectorizer.get_feature_names())[featureSelector.get_support()]\n", "metadata": {"problem_id": 900, "library_problem_id": 83, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 82}}
{"id": 356, "code": "\n<code>\nvectorizer = CountVectorizer(stop_words=\"english\", binary=True, lowercase=False, vocabulary={'Jscript', '.Net', 'TypeScript', 'NodeJS', 'Angular', 'Mongo', 'CSS', 'Python', 'PHP', 'Photoshop', 'Oracle', 'Linux', 'C++', 'Java', 'TeamCity', 'Frontend', 'Backend', 'Full stack', 'UI Design', 'Web', 'Integration', 'Database design', 'UX'})\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names()\n", "metadata": {"problem_id": 903, "library_problem_id": 86, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 85}}
{"id": 357, "code": "\n<code>\nvectorizer = CountVectorizer(stop_words=\"english\", binary=True, lowercase=False, vocabulary={'Jscript', '.Net', 'TypeScript', 'SQL', 'NodeJS', 'Angular', 'Mongo', 'CSS', 'Python', 'PHP', 'Photoshop', 'Oracle', 'Linux', 'C++', 'Java', 'TeamCity', 'Frontend', 'Backend', 'Full stack', 'UI Design', 'Web', 'Integration', 'Database design', 'UX'})\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names()\n", "metadata": {"problem_id": 904, "library_problem_id": 87, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 85}}
{"id": 358, "code": "\n<code>\nvectorizer = CountVectorizer(stop_words=\"english\", binary=True, lowercase=False, vocabulary={'Jscript', '.Net', 'TypeScript', 'NodeJS', 'Angular', 'Mongo', 'CSS', 'Python', 'PHP', 'Photoshop', 'Oracle', 'Linux', 'C++', 'Java', 'TeamCity', 'Frontend', 'Backend', 'Full stack', 'UI Design', 'Web', 'Integration', 'Database design', 'UX'})\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names()\n", "metadata": {"problem_id": 905, "library_problem_id": 88, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 85}}
{"id": 359, "code": "\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>", "metadata": {"problem_id": 909, "library_problem_id": 92, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 91}}
{"id": 360, "code": "\n    ElasticNet = linear_model.ElasticNet()\n    ElasticNet.fit(X_train, y_train)\n\n    training_set_score = ElasticNet.score(X_train, y_train)\n    test_set_score = ElasticNet.score(X_test, y_test)\n", "metadata": {"problem_id": 911, "library_problem_id": 94, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 94}}
{"id": 361, "code": "\n<code>\nscaler = MinMaxScaler()\ntransformed = scaler.fit_transform(np_array.reshape(-1, 1)).reshape(np_array.shape)\n", "metadata": {"problem_id": 912, "library_problem_id": 95, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"id": 362, "code": "\n<code>\nscaler = MinMaxScaler()\ntransformed = scaler.fit_transform(np_array.reshape(-1, 1)).reshape(np_array.shape)\n", "metadata": {"problem_id": 913, "library_problem_id": 96, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 95}}
{"id": 363, "code": "\npredict = clf.predict(b)\n", "metadata": {"problem_id": 915, "library_problem_id": 98, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 98}}
{"id": 364, "code": "\n\nnew_X = np.array([[float(x[0]), float(x[1])] for x in X])\nclf.fit(new_X, ['2', '3'])\n", "metadata": {"problem_id": 917, "library_problem_id": 100, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Surface", "perturbation_origin_id": 99}}
{"id": 365, "code": "\n\n<code>\nX = dataframe.iloc[:, :-1].astype(float)\ny = dataframe.iloc[:, -1]\nlogReg = LogisticRegression()\nlogReg.fit(X, y)\npredict = logReg.predict(X)\n", "metadata": {"problem_id": 920, "library_problem_id": 103, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 102}}
{"id": 366, "code": "\n<code>\ntrain_size = 0.2\ntrain_dataframe, test_dataframe = train_test_split(features_dataframe, train_size=train_size, shuffle=False)\n", "metadata": {"problem_id": 921, "library_problem_id": 104, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 104}}
{"id": 367, "code": "\n    train_size = 0.2\n    train_dataframe, test_dataframe = train_test_split(features_dataframe, train_size=train_size)\n    train_dataframe = train_dataframe.sort_values(by='date')\n    test_dataframe = test_dataframe.sort_values(by='date')\n    return train_dataframe, test_dataframe\n", "metadata": {"problem_id": 923, "library_problem_id": 106, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"id": 368, "code": "\ndf[cols + '_scale'] = df.groupby('Month')[cols].apply(lambda x: scaler.fit_transform(x))\n", "metadata": {"problem_id": 924, "library_problem_id": 107, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"id": 369, "code": "\nmyData[['new_' + col for col in myData.columns[2:4]]] = myData.groupby('Month')[myData.columns[2:4]].apply(lambda x: scaler.fit_transform(x))\n", "metadata": {"problem_id": 925, "library_problem_id": 108, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 107}}
{"id": 370, "code": "\nfull_results = pd.DataFrame(GridSearch_fitted.cv_results_).sort_values('mean_fit_time', ascending=False)\n", "metadata": {"problem_id": 929, "library_problem_id": 112, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 111}}
{"id": 371, "code": "\n<code>\ntfidf_matrix = tfidf.fit_transform(df['description'])\ncosine_similarity_matrix = sklearn.metrics.pairwise.cosine_similarity(tfidf_matrix)\n", "metadata": {"problem_id": 931, "library_problem_id": 114, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"id": 372, "code": "\n\noptim.param_groups[0]['lr'] = 0.001\n", "metadata": {"problem_id": 932, "library_problem_id": 0, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 373, "code": "\n\noptim.param_groups[0]['lr'] = 0.0005\n", "metadata": {"problem_id": 934, "library_problem_id": 2, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 374, "code": "\n\noptim.param_groups[0]['lr'] = 0.05\n", "metadata": {"problem_id": 935, "library_problem_id": 3, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"id": 375, "code": "\nembedding_weights = torch.FloatTensor(word2vec.wv.vectors)\nembedded_input = torch.nn.Embedding.from_pretrained(embedding_weights)\n", "metadata": {"problem_id": 936, "library_problem_id": 4, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 376, "code": "\n```python\npx = pd.DataFrame(x.numpy())\n```\n", "metadata": {"problem_id": 938, "library_problem_id": 6, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 6}}
{"id": 377, "code": "\n<code>\npx = pd.DataFrame(x.numpy())\n", "metadata": {"problem_id": 939, "library_problem_id": 7, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 6}}
{"id": 378, "code": "\n```python\npx = pd.DataFrame(x.numpy())\n```\n", "metadata": {"problem_id": 940, "library_problem_id": 8, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 6}}
{"id": 379, "code": "\nx_tensor = torch.tensor(x_array)\n", "metadata": {"problem_id": 949, "library_problem_id": 17, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 16}}
{"id": 380, "code": "\n<code>\nmask = torch.zeros(len(lens), max(lens)).long()\nmask[torch.arange(len(lens)), lens - 1] = 1\n", "metadata": {"problem_id": 952, "library_problem_id": 20, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 19}}
{"id": 381, "code": "\n    result = torch.diag_embed(t)\n    return result\n", "metadata": {"problem_id": 956, "library_problem_id": 24, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 23}}
{"id": 382, "code": "\n    if a.shape[0] == 2 and b.shape[0] == 1:\n        b = b.expand(2, -1)\n    ab = torch.cat((a, b), dim=0)\n    return ab\n", "metadata": {"problem_id": 959, "library_problem_id": 27, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 25}}
{"id": 383, "code": "\na[:, lengths:, :] = 0\n", "metadata": {"problem_id": 960, "library_problem_id": 28, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"id": 384, "code": "\na[:, :lengths, :] = 0\n", "metadata": {"problem_id": 962, "library_problem_id": 30, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 28}}
{"id": 385, "code": "\nnew_tensors = torch.stack(list)\n", "metadata": {"problem_id": 965, "library_problem_id": 33, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 386, "code": "\n    tensor_of_tensors = torch.stack(lt)\n    return tensor_of_tensors\n    ### END SOLUTION\n", "metadata": {"problem_id": 966, "library_problem_id": 34, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 387, "code": "\n<code>\ntensor_of_tensors = torch.stack(list_of_tensors)\n", "metadata": {"problem_id": 967, "library_problem_id": 35, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 32}}
{"id": 388, "code": "\nresult = t[np.arange(len(idx)), idx]\n", "metadata": {"problem_id": 970, "library_problem_id": 38, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"id": 389, "code": "\nresult = x.gather(1, ids.expand(-1, -1, x.size(2))).squeeze(1)\n", "metadata": {"problem_id": 971, "library_problem_id": 39, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 390, "code": "\ncnt_equal = torch.sum(A == B).item()\n", "metadata": {"problem_id": 980, "library_problem_id": 48, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"id": 391, "code": "\ncnt_equal = torch.sum(A == B).item()\n", "metadata": {"problem_id": 981, "library_problem_id": 49, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 48}}
{"id": 392, "code": "\ncnt_equal = torch.sum(A[-x:] == B[-x:]).item()\n", "metadata": {"problem_id": 984, "library_problem_id": 52, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 48}}
{"id": 393, "code": "\n\ntensors_31 = torch.chunk(a, 31, dim=3)\n", "metadata": {"problem_id": 986, "library_problem_id": 54, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 394, "code": "\noutput[mask == 1] = clean_input_spectrogram[mask == 1]\n", "metadata": {"problem_id": 988, "library_problem_id": 56, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 56}}
{"id": 395, "code": "\n    sign_x = torch.sign(x)\n    sign_y = torch.sign(y)\n    min_abs = torch.min(torch.abs(x), torch.abs(y))\n    signed_min = sign_x * min_abs + sign_y * min_abs\n    return signed_min\n", "metadata": {"problem_id": 992, "library_problem_id": 60, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"id": 396, "code": "\nconfidence_score = torch.softmax(output, dim=1)[0, classes].item()\n", "metadata": {"problem_id": 993, "library_problem_id": 61, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 397, "code": "\nresult = torch.cat([a[:, :-1], (a[:, -1:] + b[:, :1]) / 2, b[:, 1:]], dim=1)\n", "metadata": {"problem_id": 994, "library_problem_id": 62, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"id": 398, "code": "\nresult = torch.cat([t, torch.zeros(1, t.shape[1], 1)], dim=2)\n", "metadata": {"problem_id": 997, "library_problem_id": 65, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 64}}
{"id": 399, "code": "\nresult = torch.cat([t, torch.full((1, t.shape[1], 1), -1)], dim=2)\nresult = torch.cat([result, torch.full((1, t.shape[1], 1), -1)], dim=1)\nresult = torch.cat([torch.full((1, t.shape[1], 1), -1), result], dim=0)\nresult = torch.cat([result, torch.full((1, t.shape[1], 1), -1)], dim=0)\n", "metadata": {"problem_id": 998, "library_problem_id": 66, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 64}}
