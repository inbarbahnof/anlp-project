{"id": 0, "code": "<code>\nresult = df.iloc[List]\n", "metadata": {"problem_id": 0, "library_problem_id": 0, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 1, "code": "<code>\nresult = len(df[df['Type'] != df.iloc[List]['Type']])\n", "metadata": {"problem_id": 1, "library_problem_id": 1, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"id": 2, "code": "<code>\nresult = df.copy()\nfor col in df.columns:\n    result[col] = df[col].where(df[col].map(df[col].value_counts()) >= 2, 'other')\n", "metadata": {"problem_id": 2, "library_problem_id": 2, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 2}}
{"id": 3, "code": "<code>\nresult = df.copy()\nresult.loc[df.Qu1.map(pd.value_counts(df.Qu1)) < 3, 'Qu1'] = 'other'\nresult.loc[df.Qu2.map(pd.value_counts(df.Qu2)) < 3, 'Qu2'] = 'other'\nresult.loc[df.Qu3.map(pd.value_counts(df.Qu3)) < 3, 'Qu3'] = 'other'\n", "metadata": {"problem_id": 3, "library_problem_id": 3, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 2}}
{"id": 4, "code": "\n    result = df['datetime'].dt.strftime('%Y-%m-%d %H:%M:%S')\n    ### END SOLUTION\n    return result\n", "metadata": {"problem_id": 12, "library_problem_id": 12, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 5, "code": "<code>\ndf['datetime'] = df['datetime'].dt.tz_localize(None).dt.strftime('%d-%b-%Y %H:%M:%S')\ndf['datetime'] = pd.to_datetime(df['datetime'])\ndf = df.sort_values(by='datetime')\n", "metadata": {"problem_id": 13, "library_problem_id": 13, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 11}}
{"id": 6, "code": "<code>\ndf['datetime'] = df['datetime'].dt.tz_localize(None)\ndf['datetime'] = df['datetime'].astype(str).str[:-6]\ndf['datetime'] = pd.to_datetime(df['datetime'])\ndf = df.sort_values('datetime')\n", "metadata": {"problem_id": 14, "library_problem_id": 14, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 11}}
{"id": 7, "code": "<code>\nresult = df.join(df['message'].str.findall(r'(\\w+): (\\w+)').apply(pd.Series).fillna('none').set_index(df.index))\nresult = result.join(result['message'].str.findall(r'(\\w+): (\\w+)').apply(pd.Series).fillna('none').set_index(df.index))\nresult = result.join(result['message'].str.findall(r'(\\w+): (\\w+)').apply(pd.Series).fillna('none').set_index(df.index))\nresult = result.join(result['message'].str.findall(r'(\\w+): (\\w+)').apply(pd.Series).fillna('none').set_index(df.index))\nresult = result.join(result['message'].str.findall(r'(\\w+): (\\w+)').apply(pd.Series).fillna('none').set_index(df.index))\nresult = result.join(result['message'].str.findall(r'(\\w+): (\\w+)').apply(pd.Series).fillna('none').set_index(df.index))\nresult = result.join(result['message'].str.findall(r'(\\w+): (\\w+)').apply(pd.Series).fillna('none').set_index(df.index))\nresult = result.join(result['message'].str.findall(r'(\\w+): (\\w+)').apply(pd.Series).fillna('none').set_index(df.index))\nresult = result.join(result['message'].str.findall(r'(\\w+): (\\w+)').apply(pd.Series).fillna('none').set_index(df.index))\nresult = result.join(result['message'].str.findall(r'(\\w+): (\\w+)').apply(pd.Series).fillna('none').set_index(df.index))\nresult = result.join(result['message'].str.findall(r'(\\w+): (\\w+)').apply(pd.Series).fillna('none').set_index(df.index))\nresult = result.join(result['message'].str.findall(r'(\\w+): (\\w+)').apply(pd.Series).fillna('none').set_index(df.index))\nresult = result.join(result['message'].str.findall(r'(\\w+): (\\w+)').apply(pd.Series).fillna('none').set_index(df.index))\nresult = result.join(result['message'].str.findall(r'(\\w+): (\\w+)').apply(pd.Series).fillna('none').set_index(df.index))\nresult = result.join(result['message'].str.findall(r'(\\w+): (\\w+)').apply(pd.Series).fillna('none').set_index(df.index))\nresult = result.join(result['message'].str.findall(r'(\\w+): (\\w+)').apply(pd.Series).fillna('none').set_index(df.index))\nresult = result.join(result['message'].str.findall(r'(\\w+): (\\w+)').apply(pd.Series).fillna('none').set_index(df.index))\nresult = result.join(result['message'].str.findall(r'(\\w+): (\\w+)').apply(pd.Series).fillna('none').set_index(df.index))\nresult = result.join(result['message'].str.findall(r'(\\w+): (\\w+)').apply(pd.Series).fillna('none').set_index(df.index))\nresult = result.join(result['message'].str.findall(r'(\\w+): (\\w+)').apply(pd.Series).fillna('none').set_index(df.index))\nresult = result.join(result['message'].str.findall(r'(\\w+): (\\w+)').apply(pd.Series).fillna('none').set_index(df.index))\nresult = result.join(result['message'].str.findall(r'(\\w+): (\\w+)').apply(pd.Series).fillna('none').set_index(df.index))\nresult = result.join(result['", "metadata": {"problem_id": 15, "library_problem_id": 15, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 15}}
{"id": 8, "code": "df.loc[df['product'].isin(products), 'score'] *= 10\n", "metadata": {"problem_id": 16, "library_problem_id": 16, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 9, "code": "<code>\ndf.loc[df['product'].isin(products), 'score'] = (df.loc[df['product'].isin(products), 'score'] - df.loc[df['product'].isin(products), 'score'].min()) / (df.loc[df['product'].isin(products), 'score'].max() - df.loc[df['product'].isin(products), 'score'].min())\n", "metadata": {"problem_id": 19, "library_problem_id": 19, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"id": 10, "code": "df['category'] = df.apply(lambda x: df.columns[x.astype(bool)].tolist(), axis=1)\n", "metadata": {"problem_id": 22, "library_problem_id": 22, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 20}}
{"id": 11, "code": "<code>\ndf['Date'] = df['Date'].dt.to_period('M').dt.strftime('%b-%Y')\n", "metadata": {"problem_id": 23, "library_problem_id": 23, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 23}}
{"id": 12, "code": "<code>\ndf = df.shift(1, axis=0).fillna(df.iloc[-1])\n", "metadata": {"problem_id": 27, "library_problem_id": 27, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 26}}
{"id": 13, "code": "df.add_prefix('XHeader')\n", "metadata": {"problem_id": 32, "library_problem_id": 32, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 30}}
{"id": 14, "code": "<code>\nresult = df.groupby('group').agg({\"group_color\": \"first\", **{col: \"mean\" for col in df.columns if \"val\" in col}})\n", "metadata": {"problem_id": 33, "library_problem_id": 33, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 33}}
{"id": 15, "code": "<code>\nresult = df.loc[row_list, column_list].sum(axis=0)\n", "metadata": {"problem_id": 37, "library_problem_id": 37, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"id": 16, "code": "<code>\nresult = df.apply(pd.Series.value_counts).fillna(0).stack().astype(float).groupby(level=0).sum()\n", "metadata": {"problem_id": 39, "library_problem_id": 39, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 17, "code": "<code>\nresult = df.isnull().sum()\n", "metadata": {"problem_id": 40, "library_problem_id": 40, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 39}}
{"id": 18, "code": "result = ''\nfor col in df.columns:\n    result += f'---- {col} ---\\n{df[col].value_counts()}\\n'\n", "metadata": {"problem_id": 41, "library_problem_id": 41, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 39}}
{"id": 19, "code": "<code>\nresult = df.iloc[0].append(df.iloc[1]).reset_index(drop=True)\n", "metadata": {"problem_id": 43, "library_problem_id": 43, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 20, "code": "result = df.sort_values(by=df.columns.tolist(), ascending=False)\n", "metadata": {"problem_id": 46, "library_problem_id": 46, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 44}}
{"id": 21, "code": "<code>\nresult = df.loc[df['value'] < thresh].copy()\nresult.loc['X'] = result['value'].sum()\nresult = result.drop(df.loc[df['value'] >= thresh].index)\n", "metadata": {"problem_id": 47, "library_problem_id": 47, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 22, "code": "<code>\nresult = df.assign(**{f'exp_{col}': df[col].apply(lambda x: np.exp(x)) for col in df.columns})\n", "metadata": {"problem_id": 51, "library_problem_id": 51, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 50}}
{"id": 23, "code": "<code>\nresult = df.groupby('user').apply(lambda x: pd.date_range(x['dt'].min(), x['dt'].max(), freq='D')).explode().reset_index(drop=True)\nresult = result.merge(df, how='left').fillna(df.groupby('user')['val'].transform('max'))\n", "metadata": {"problem_id": 59, "library_problem_id": 59, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 56}}
{"id": 24, "code": "<code>\nresult = df.groupby('name').ngroup().add(1).astype(str).replace('0', '1').to_frame('a').join(df.drop('a', axis=1))\n", "metadata": {"problem_id": 62, "library_problem_id": 62, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 61}}
{"id": 25, "code": "\n    df['name'] = df['name'].astype('category').cat.codes\n    return df\n", "metadata": {"problem_id": 63, "library_problem_id": 63, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 61}}
{"id": 26, "code": "<code>\nresult = df.groupby(['name', 'a']).ngroup().add(1).rename('ID').to_frame()\nresult = result.join(df.drop(['name', 'a'], axis=1))\n", "metadata": {"problem_id": 64, "library_problem_id": 64, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 61}}
{"id": 27, "code": "df = df.melt(id_vars=['user', 'someBool'], var_name='date', value_name='value')\n", "metadata": {"problem_id": 65, "library_problem_id": 65, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"id": 28, "code": "\n    locs = [df.columns.get_loc(_) for _ in columns]\n    return df[df.c > 0.5][locs].values\n", "metadata": {"problem_id": 70, "library_problem_id": 70, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 29, "code": "\n    locs = [df.columns.get_loc(_) for _ in columns]\n    result = df[df.c > 0.5][locs]\n    result['sum'] = result.sum(axis=1)\n    return result\n", "metadata": {"problem_id": 71, "library_problem_id": 71, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 30, "code": "<code>\ndf['date'] = pd.to_datetime(df['date'], format='%m/%d/%y')\ndf['date'] = df['date'].dt.date\ndf['date'] = df['date'].apply(lambda x: x + timedelta(days=X))\nresult = df.drop_duplicates(subset=['date'])\n", "metadata": {"problem_id": 73, "library_problem_id": 73, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 73}}
{"id": 31, "code": "<code>\ndf['date'] = pd.to_datetime(df['date'], format='%m/%d/%y')\ndf['date'] = df['date'].dt.strftime('%d-%b-%Y')\nresult = df.groupby(df['date'].apply(lambda x: x[:-4] + str(int(x[-4:]) - X))).first().reset_index()\n", "metadata": {"problem_id": 75, "library_problem_id": 75, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 73}}
{"id": 32, "code": "<code>\nresult = df.groupby(df.index // 3).agg({'col1': ['sum', 'mean']}).unstack().fillna(0).sum(level=0)\n", "metadata": {"problem_id": 80, "library_problem_id": 80, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 76}}
{"id": 33, "code": "<code>\ndf['A'] = df['A'].fillna(method='ffill')\n", "metadata": {"problem_id": 82, "library_problem_id": 82, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 34, "code": "<code>\ndf['A'] = df['A'].fillna(method='bfill')\n", "metadata": {"problem_id": 83, "library_problem_id": 83, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 82}}
{"id": 35, "code": "<code>\ndf['A'] = df['A'].replace(0, df['A'].replace(0, method='ffill').replace(0, method='bfill'))\n", "metadata": {"problem_id": 84, "library_problem_id": 84, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 36, "code": "df['number'] = df.duration.str.extract(r'(\\d+)')\ndf['time'] = df.duration.str.extract(r'(\\w+)')\ndf['time_days'] = df.time.replace({'year': 365, 'month': 30, 'week': 7, 'day': 1})\n", "metadata": {"problem_id": 85, "library_problem_id": 85, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 37, "code": "df.index.levels[1] = pd.to_datetime(df.index.levels[1])\n", "metadata": {"problem_id": 91, "library_problem_id": 91, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 91}}
{"id": 38, "code": "\n    df.index = pd.to_datetime(df.index)\n    return df.values\n", "metadata": {"problem_id": 93, "library_problem_id": 93, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 91}}
{"id": 39, "code": "<code>\ndf = pd.melt(df, id_vars=['Country', 'Variable'], var_name='year', value_name='var')\n", "metadata": {"problem_id": 95, "library_problem_id": 95, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"id": 40, "code": "df = df[df.filter(like='Value').abs().lt(1).all(axis=1)]\n", "metadata": {"problem_id": 97, "library_problem_id": 97, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"id": 41, "code": "<code>\ndf.replace(r'&AMP;', '&', regex=True)\n", "metadata": {"problem_id": 100, "library_problem_id": 100, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 100}}
{"id": 42, "code": "<code>\ndf.replace(r'&LT;', '<', regex=True)\n", "metadata": {"problem_id": 101, "library_problem_id": 101, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 100}}
{"id": 43, "code": "\n    result = df.replace('&AMP;', '&', regex=True)\n    ### END SOLUTION\n    return result\n", "metadata": {"problem_id": 102, "library_problem_id": 102, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 100}}
{"id": 44, "code": "<code>\ndf.replace({'&AMP;': '&', '&LT;': '<', '&GT;': '>'}, regex=True)\n", "metadata": {"problem_id": 103, "library_problem_id": 103, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 100}}
{"id": 45, "code": "<code>\ndf['state'] = df.apply(lambda x: x['col1'] if x['col2'] > 50 and x['col3'] > 50 else x['col1'] + x['col2'] + x['col3'], axis=1)\n", "metadata": {"problem_id": 111, "library_problem_id": 111, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 110}}
{"id": 46, "code": "<code>\nresult = df.loc[test]\n", "metadata": {"problem_id": 117, "library_problem_id": 117, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 117}}
{"id": 47, "code": "<code>\nresult = df.loc[test]\n", "metadata": {"problem_id": 118, "library_problem_id": 118, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 117}}
{"id": 48, "code": "<code>\nresult = df.drop(test)\n", "metadata": {"problem_id": 119, "library_problem_id": 119, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 117}}
{"id": 49, "code": "\n    result = df.loc[test]\n    ### END SOLUTION\n    return result\n\ndf = pd.DataFrame({'rs#': ['TP3', 'TP7', 'TP12', 'TP15', 'TP18'],\n                     'alleles': ['A/C', 'A/T', 'T/A', 'C/A', 'C/T'],\n                     'chrom': [0, 0, 0, 0, 0],\n                     'pos': [3, 7, 12, 15, 18],\n                     'strand': ['+', '+', '+', '+', '+'],\n                     'assembly#': [np.nan, np.nan, np.nan, np.nan, np.nan],\n                     'center': [np.nan, np.nan, np.nan, np.nan, np.nan],\n                     'protLSID': [np.nan, np.nan, np.nan, np.nan, np.nan],\n                     'assayLSID': [np.nan, np.nan, np.nan, np.nan, np.nan]})\n\ntest = ['TP3','TP12','TP18', 'TP3']\n\nresult = f(df, test)\nprint(result)\n", "metadata": {"problem_id": 120, "library_problem_id": 120, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 117}}
{"id": 50, "code": "<code>\ndf2 = df.merge(df.groupby('time').apply(lambda x: x.assign(nearest_neighbour=x.apply(lambda y: x[x['car'] != y['car']]['car'].nearest_neighbour(y[['x', 'y']]).min(), axis=1))).explode('nearest_neighbour')), on=['time', 'car'])\ndf2 = df2.merge(df.groupby('time').apply(lambda x: x.assign(euclidean_distance=x.apply(lambda y: x[x['car'] != y['car']]['car'].nearest_neighbour(y[['x', 'y']]).min(), axis=1).apply(lambda z: np.sqrt((x['x'] - y['x'])**2 + (x['y'] - y['y'])**2))).explode('euclidean_distance')), on=['time', 'car'])\ndf2 = df2.groupby(['time', 'car']).agg({'nearest_neighbour': 'first', 'euclidean_distance': 'mean'}).reset_index()\n", "metadata": {"problem_id": 121, "library_problem_id": 121, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 121}}
{"id": 51, "code": "<code>\ndf2 = df.merge(df.groupby('time')['car'].apply(lambda x: x.apply(lambda y: x[x.apply(lambda z: ((df.loc[df['car'] == z, 'x'] - df.loc[df['car'] == y, 'x'])**2 + (df.loc[df['car'] == z, 'y'] - df.loc[df['car'] == y, 'y'])**2)**0.5).idxmax() if z != y else 0)].max())).reset_index(name='farmost_neighbour')), on='time')\ndf2['euclidean_distance'] = df2.apply(lambda x: ((df.loc[df['car'] == x['car'], 'x'] - df.loc[df['car'] == x['farmost_neighbour'], 'x'])**2 + (df.loc[df['car'] == x['car'], 'y'] - df.loc[df['car'] == x['farmost_neighbour'], 'y'])**2)**0.5).mean(), axis=1)\ndf2 = df2[['time', 'car', 'farmost_neighbour', 'euclidean_distance']]\n", "metadata": {"problem_id": 122, "library_problem_id": 122, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 52, "code": "<code>\ncols = [df.keywords_0, df.keywords_1, df.keywords_2, df.keywords_3]\ndf[\"keywords_all\"] = df[\"keywords_all\"].apply(lambda cols: \"-\".join(cols), axis=1)\n", "metadata": {"problem_id": 126, "library_problem_id": 126, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 53, "code": "<code>\ndf_sample = df.sample(frac=0.2, random_state=0)\ndf_sample.loc[df_sample.index, 'Quantity'] = 0\ndf = df.merge(df_sample, how='left', on=['UserId', 'ProductId'], suffixes=('', '_sample'))\ndf['Quantity'] = df['Quantity'].fillna(df['Quantity_sample'])\ndf = df.drop(columns=['Quantity_sample'])\n", "metadata": {"problem_id": 127, "library_problem_id": 127, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 127}}
{"id": 54, "code": "<code>\nresult = df.loc[df.duplicated(subset=['col1','col2', '3col'], keep='first')]\nresult['index_original'] = df.loc[df.duplicated(subset=['col1','col2', '3col'], keep='first')].index\n", "metadata": {"problem_id": 133, "library_problem_id": 133, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 130}}
{"id": 55, "code": "<code>\nresult = df.loc[df.groupby(['Sp', 'Mt'])['count'].transform(max) == df['count']]\n", "metadata": {"problem_id": 135, "library_problem_id": 135, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 135}}
{"id": 56, "code": "<code>\nresult = df.loc[df.groupby(['Sp','Mt'])['count'].transform(max) == df['count']]\n", "metadata": {"problem_id": 136, "library_problem_id": 136, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 135}}
{"id": 57, "code": "<code>\nresult = df.loc[df.groupby(['Sp','Value'])['count'].transform(max) == df['count']]\n", "metadata": {"problem_id": 138, "library_problem_id": 138, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 135}}
{"id": 58, "code": "result = df.melt(value_vars=[tuple(df.columns.get_level_values(i)) for i in range(3)])\n", "metadata": {"problem_id": 142, "library_problem_id": 142, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 141}}
{"id": 59, "code": "<code>\ndf['cumsum'] = df.groupby('id')['val'].cumsum()\n", "metadata": {"problem_id": 143, "library_problem_id": 143, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 143}}
{"id": 60, "code": "<code>\ndf['cumsum'] = df.groupby('id')['val'].cumsum()\n", "metadata": {"problem_id": 145, "library_problem_id": 145, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 143}}
{"id": 61, "code": "result = df.groupby('r')['v'].apply(lambda x: x.sum(skipna=False))\n", "metadata": {"problem_id": 149, "library_problem_id": 149, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 148}}
{"id": 62, "code": "result = df.groupby('l')['v'].apply(lambda x: x.sum(skipna=False))\n", "metadata": {"problem_id": 150, "library_problem_id": 150, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 148}}
{"id": 63, "code": "<code>\nresult = df.corr().applymap(lambda x: 'one-to-one' if x == 1 else 'one-to-many' if x == -1 else 'many-to-many' if abs(x) > 1 else 'many-to-one')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result.notnull(), '')\nresult = result.where(result", "metadata": {"problem_id": 153, "library_problem_id": 153, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"id": 64, "code": "<code>\nresult = df.groupby((df['SibSp'] > 0) | (df['Parch'] > 0)).mean()['Survived']\n", "metadata": {"problem_id": 157, "library_problem_id": 157, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 157}}
{"id": 65, "code": "<code>\nresult = df.groupby((df['Survived'] > 0) | (df['Parch'] > 0)).mean()['SibSp']\n", "metadata": {"problem_id": 158, "library_problem_id": 158, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 157}}
{"id": 66, "code": "result = df.groupby('cokey').apply(lambda x: x.sort_values('A', ascending=False).reset_index(drop=True))\nresult.reset_index(drop=True)\nresult = df.groupby('cokey').apply(lambda x: x.sort_values('A', ascending=False).reset_index(drop=True))\nresult.reset_index(drop=True)\n", "metadata": {"problem_id": 161, "library_problem_id": 161, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 160}}
{"id": 67, "code": "<code>\ndf.columns = pd.MultiIndex.from_tuples(df.columns)\ndf.columns = df.columns.swaplevel(0,1)\ndf.columns = df.columns.swaplevel(0,1)\n", "metadata": {"problem_id": 162, "library_problem_id": 162, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 162}}
{"id": 68, "code": "<code>\ndf.columns = pd.MultiIndex.from_tuples(df.columns)\ndf = df.stack(level=0).swaplevel(0,1).sort_index(level=1)\n", "metadata": {"problem_id": 163, "library_problem_id": 163, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 162}}
{"id": 69, "code": "<code>\nresult = pd.DataFrame({'birdType': someTuple[0], 'birdCount': someTuple[1]})\n", "metadata": {"problem_id": 165, "library_problem_id": 165, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 165}}
{"id": 70, "code": "<code>\nresult = df[(df.sum(axis=1) != 0) | (df.sum(axis=0) != 0)]\n", "metadata": {"problem_id": 169, "library_problem_id": 169, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 169}}
{"id": 71, "code": "<code>\nresult = s.sort_values(ascending=False).sort_index()\n", "metadata": {"problem_id": 173, "library_problem_id": 173, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 173}}
{"id": 72, "code": "<code>\ndf = s.sort_values(ascending=False).reset_index()\n", "metadata": {"problem_id": 174, "library_problem_id": 174, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 173}}
{"id": 73, "code": "<code>\nresult = df.loc[df.groupby(['Sp', 'Mt'])['count'].idxmin()]\n", "metadata": {"problem_id": 179, "library_problem_id": 179, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 177}}
{"id": 74, "code": "<code>\ndf['Date'] = df['Member'].map(dict).fillna(df['Date'])\n", "metadata": {"problem_id": 182, "library_problem_id": 182, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 181}}
{"id": 75, "code": "df['Date'] = df['Member'].map(dict).fillna(df['Member'])\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x: x.replace('/', '-'))\ndf['Date'] = df['Date'].apply(lambda x", "metadata": {"problem_id": 184, "library_problem_id": 184, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 181}}
{"id": 76, "code": "df['Date'] = pd.to_datetime(df['Date'], format= '%d/%m/%y')\ndf['Count_d'] = df.Date.map(df.groupby('Date').size())\ndf['Count_m'] = df.Date.map(df.groupby(df['Date'].dt.to_period('M')).size())\ndf['Count_y'] = df.Date.map(df.groupby(df['Date'].dt.to_period('Y')).size())\ndf['Count_Val'] = df.groupby(['Date', 'Val']).size()\ndf = df.groupby(['Date', 'Val']).agg({'Count_d': 'first', 'Count_m': 'first', 'Count_y': 'first', 'Count_Val': 'first'}).reset_index()\n", "metadata": {"problem_id": 186, "library_problem_id": 186, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 185}}
{"id": 77, "code": "<code>\nresult1 = df.groupby('Date').agg(B=('B', lambda x: (x == 0).sum()),\n                                     C=('C', lambda x: (x == 0).sum()))\nresult2 = df.groupby('Date').agg(B=('B', lambda x: (x != 0).sum()),\n                                     C=('C', lambda x: (x != 0).sum()))\n", "metadata": {"problem_id": 188, "library_problem_id": 188, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 188}}
{"id": 78, "code": "<code>\nresult1 = df.groupby('Date').apply(lambda x: (x % 2 == 0).sum())\nresult2 = df.groupby('Date').apply(lambda x: (x % 2 == 1).sum())\n", "metadata": {"problem_id": 189, "library_problem_id": 189, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 188}}
{"id": 79, "code": "<code>\nresult = pd.pivot_table(df, values=['D','E'], rows=['B'], aggfunc={'D':np.sum, 'E':np.mean})\n", "metadata": {"problem_id": 191, "library_problem_id": 191, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 190}}
{"id": 80, "code": "<code>\nresult = pd.pivot_table(df, values=['D','E'], rows=['B'], aggfunc={'D':np.sum, 'E':np.mean})\n", "metadata": {"problem_id": 192, "library_problem_id": 192, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 190}}
{"id": 81, "code": "<code>\nresult = pd.pivot_table(df, values=['D','E'], rows=['B'], aggfunc={'D':np.max, 'E':np.min})\n", "metadata": {"problem_id": 193, "library_problem_id": 193, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 190}}
{"id": 82, "code": "<code>\nresult = df.explode('var2').reset_index(drop=True)\n", "metadata": {"problem_id": 194, "library_problem_id": 194, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 194}}
{"id": 83, "code": "<code>\nresult = df.explode('var2').reset_index(drop=True)\n", "metadata": {"problem_id": 195, "library_problem_id": 195, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 194}}
{"id": 84, "code": "<code>\nresult = df.explode('var2').reset_index(drop=True)\n", "metadata": {"problem_id": 196, "library_problem_id": 196, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 194}}
{"id": 85, "code": "<code>\ndf['fips'] = df['row'].str[:5]\ndf['row'] = df['row'].str[6:]\n", "metadata": {"problem_id": 199, "library_problem_id": 199, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 199}}
{"id": 86, "code": "<code>\ndf['2001'] = df['2001'].cumsum() / (df['2001'] != 0).cumsum()\ndf['2002'] = df['2002'].cumsum() / (df['2002'] != 0).cumsum()\ndf['2003'] = df['2003'].cumsum() / (df['2003'] != 0).cumsum()\ndf['2004'] = df['2004'].cumsum() / (df['2004'] != 0).cumsum()\ndf['2005'] = df['2005'].cumsum() / (df['2005'] != 0).cumsum()\ndf['2006'] = df['2006'].cumsum() / (df['2006'] != 0).cumsum()\n", "metadata": {"problem_id": 203, "library_problem_id": 203, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 202}}
{"id": 87, "code": "\n    result = df.copy()\n    result['2001'] = df['2001'].cumsum() / (df['2001'] != 0).cumsum()\n    result['2002'] = df['2002'].cumsum() / (df['2002'] != 0).cumsum()\n    result['2003'] = df['2003'].cumsum() / (df['2003'] != 0).cumsum()\n    result['2004'] = df['2004'].cumsum() / (df['2004'] != 0).cumsum()\n    result['2005'] = df['2005'].cumsum() / (df['2005'] != 0).cumsum()\n    result['2006'] = df['2006'].cumsum() / (df['2006'] != 0).cumsum()\n    return result\n", "metadata": {"problem_id": 204, "library_problem_id": 204, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 202}}
{"id": 88, "code": "<code>\ndf['label'] = df['Close'].diff().apply(lambda x: 1 if x > 0 else -1 if x < 0 else 0)\ndf['DateTime'] = df['DateTime'].dt.strftime('%d-%b-%Y')\ndf.loc[0, 'label'] = 1\n", "metadata": {"problem_id": 208, "library_problem_id": 208, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 206}}
{"id": 89, "code": "<code>\ndf['arrival_time'] = df['arrival_time'].replace('0', pd.NaT)\ndf['arrival_time'] = pd.to_datetime(df['arrival_time'])\ndf['departure_time'] = pd.to_datetime(df['departure_time'])\ndf['Duration'] = df['departure_time'].shift(-1) - df['arrival_time']\ndf.loc[df['arrival_time'].isna(), 'Duration'] = pd.NaT\n", "metadata": {"problem_id": 209, "library_problem_id": 209, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 209}}
{"id": 90, "code": "<code>\ndf['arrival_time'] = df['arrival_time'].apply(lambda x: pd.to_datetime(x) if x != '0' else pd.NaT)\ndf['departure_time'] = df['departure_time'].apply(lambda x: pd.to_datetime(x))\ndf['Duration'] = df['departure_time'].shift(1) - df['arrival_time']\ndf.loc[df['arrival_time'].isna(), 'Duration'] = pd.NaT\n", "metadata": {"problem_id": 210, "library_problem_id": 210, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 209}}
{"id": 91, "code": "<code>\nresult = df.groupby('key1').key2.apply(lambda x: (x == 'one').sum()).reset_index(name='count')\nresult = result.reindex(df['key1'].unique(), fill_value=0).reset_index(drop=True)\n", "metadata": {"problem_id": 212, "library_problem_id": 212, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 212}}
{"id": 92, "code": "<code>\nmax_result = df.index.max()\nmin_result = df.index.min()\n", "metadata": {"problem_id": 215, "library_problem_id": 215, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 215}}
{"id": 93, "code": "<code>\nresult = df[~(99 <= df['closing_price'] <= 101)]\n", "metadata": {"problem_id": 218, "library_problem_id": 218, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 217}}
{"id": 94, "code": "<code>\ndf['SOURCE_NAME'] = df['SOURCE_NAME'].str.split('_').str[0].str.replace('_', ' ')\n", "metadata": {"problem_id": 220, "library_problem_id": 220, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 220}}
{"id": 95, "code": "<code>\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace=", "metadata": {"problem_id": 223, "library_problem_id": 223, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 223}}
{"id": 96, "code": "<code>\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace=", "metadata": {"problem_id": 224, "library_problem_id": 224, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 223}}
{"id": 97, "code": "<code>\ndf['Column_x'] = df['Column_x'].fillna(0, inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(1, inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\n", "metadata": {"problem_id": 225, "library_problem_id": 225, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 223}}
{"id": 98, "code": "<code>\nresult = pd.DataFrame([[(a.iloc[i, j], b.iloc[i, j]) for j in range(a.shape[1])] for i in range(a.shape[0])], columns=['one', 'two'])\n", "metadata": {"problem_id": 226, "library_problem_id": 226, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 226}}
{"id": 99, "code": "<code>\nresult = pd.DataFrame([[(a['one'][i], b['one'][i], c['one'][i]), (a['two'][i], b['two'][i], c['two'][i])] for i in range(len(a))], columns=['one', 'two'])\n", "metadata": {"problem_id": 227, "library_problem_id": 227, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 226}}
{"id": 100, "code": "<code>\nresult = pd.DataFrame([[(a.iloc[i, 0], b.iloc[i, 0]) if i < len(a) else np.nan,\n                           (a.iloc[i, 1], b.iloc[i, 1]) if i < len(a) else np.nan)\n                          for i in range(max(len(a), len(b)))],\n                         columns=['one', 'two'])\n", "metadata": {"problem_id": 228, "library_problem_id": 228, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 226}}
{"id": 101, "code": "<code>\nresult = pd.concat([C, D]).drop_duplicates(subset=\"A\", keep=\"last\")\n", "metadata": {"problem_id": 241, "library_problem_id": 241, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 240}}
{"id": 102, "code": "result = df.groupby('user').agg(lambda x: list(zip(x['time'], x['amount'])))\n", "metadata": {"problem_id": 244, "library_problem_id": 244, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 243}}
{"id": 103, "code": "result = df.groupby('user').agg(lambda x: list(zip(x['time'], x['amount'])))\n", "metadata": {"problem_id": 245, "library_problem_id": 245, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 243}}
{"id": 104, "code": "<code>\ndf = pd.DataFrame(series.values.tolist(), index=series.index)\n", "metadata": {"problem_id": 247, "library_problem_id": 247, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 246}}
{"id": 105, "code": "<code>\nresult = [col for col in df.columns if s in col and col != s]\n", "metadata": {"problem_id": 248, "library_problem_id": 248, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 248}}
{"id": 106, "code": "<code>\nresult = df.filter(regex=f'^(?!{s}).*({s}).*$').columns.tolist()\n", "metadata": {"problem_id": 249, "library_problem_id": 249, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 248}}
{"id": 107, "code": "result = df['col1'].apply(lambda x: ','.join(map(str, x)))\n", "metadata": {"problem_id": 256, "library_problem_id": 256, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 254}}
{"id": 108, "code": "<code>\nresult = df[df.index.get_level_values('a').isin(filt[filt].index)]\n", "metadata": {"problem_id": 262, "library_problem_id": 262, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 262}}
{"id": 109, "code": "<code>\nresult = df.loc[0].fillna(np.nan).eq(df.loc[8].fillna(np.nan)).where(df.loc[0].notnull()).index\n", "metadata": {"problem_id": 265, "library_problem_id": 265, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 264}}
{"id": 110, "code": "<code>\nresult = df.loc[0].where(df.loc[0] != df.loc[8]).dropna().index.tolist()\n", "metadata": {"problem_id": 266, "library_problem_id": 266, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 264}}
{"id": 111, "code": "<code>\nresult = df.sort_values(by=['VIM','time'], ascending=[True,False])\n", "metadata": {"problem_id": 277, "library_problem_id": 277, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 276}}
{"id": 112, "code": "<code>\nresult = corr.where(corr > 0.3).stack()\n", "metadata": {"problem_id": 281, "library_problem_id": 281, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 280}}
{"id": 113, "code": "<code>\nresult = df.rename(columns={df.columns[-1]: 'Test'})\n", "metadata": {"problem_id": 282, "library_problem_id": 282, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 282}}
{"id": 114, "code": "<code>\ndf['frequent'] = df.apply(lambda x: x.value_counts().index[0], axis=1)\ndf['freq_count'] = df.apply(lambda x: x.value_counts().values[0], axis=1)\n", "metadata": {"problem_id": 285, "library_problem_id": 285, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 284}}
{"id": 115, "code": "<code>\ndf['frequent'] = df.apply(lambda x: list(x.value_counts().index), axis=1)\ndf['freq_count'] = df.apply(lambda x: list(x.value_counts()), axis=1)\n", "metadata": {"problem_id": 286, "library_problem_id": 286, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 284}}
{"id": 116, "code": "<code>\nresult = df.groupby([\"id1\",\"id2\"])[\"foo\",\"bar\"].mean()\n", "metadata": {"problem_id": 287, "library_problem_id": 287, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 287}}
{"id": 117, "code": "<code>\nresult = df.groupby([\"id1\",\"id2\"])[\"foo\",\"bar\"].agg(foo='mean', bar=lambda x: x.fillna(0).mean())\n", "metadata": {"problem_id": 288, "library_problem_id": 288, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 287}}
{"id": 118, "code": "result = x[~np.isnan(x).any(axis=1)].tolist()\n", "metadata": {"problem_id": 294, "library_problem_id": 3, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 1}}
{"id": 119, "code": "<code>\nb = np.zeros((len(a), a.max() + 1))\nb[np.arange(len(a)), a] = 1\n", "metadata": {"problem_id": 297, "library_problem_id": 6, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 120, "code": "<code>\nb = np.zeros((len(a), len(a)))\nb[np.arange(len(a)), a.argsort()] = 1\n", "metadata": {"problem_id": 298, "library_problem_id": 7, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 121, "code": "<code>\nr_old = np.random.RandomState(seed=42).randint(3, size=(100, 2000)) - 1\nr_new = np.random.RandomState(seed=42).randint(3, size=(100, 2000)) - 1\n", "metadata": {"problem_id": 308, "library_problem_id": 17, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"id": 122, "code": "<code>\nresult = np.unravel_index(a.argmax(), a.shape)\n", "metadata": {"problem_id": 309, "library_problem_id": 18, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 18}}
{"id": 123, "code": "<code>\nresult = np.unravel_index(np.argmin(a), a.shape)\n", "metadata": {"problem_id": 310, "library_problem_id": 19, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 124, "code": "<code>\nresult = np.array(a)\n", "metadata": {"problem_id": 317, "library_problem_id": 26, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 125, "code": "<code>\na[:, permutation]\n", "metadata": {"problem_id": 318, "library_problem_id": 27, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 27}}
{"id": 126, "code": "<code>\nresult = a[permutation]\n", "metadata": {"problem_id": 319, "library_problem_id": 28, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 27}}
{"id": 127, "code": "result = np.dstack(np.unravel_index(a.argmin(axis=1), a.shape))\n", "metadata": {"problem_id": 322, "library_problem_id": 31, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 29}}
{"id": 128, "code": "<code>\nresult = np.sin(np.deg2rad(degree))\n", "metadata": {"problem_id": 323, "library_problem_id": 32, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 129, "code": "<code>\nresult = np.cos(np.radians(degree))\n", "metadata": {"problem_id": 324, "library_problem_id": 33, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 130, "code": "result = np.pad(A, (0, length - len(A)), 'constant', constant_values=0)\n", "metadata": {"problem_id": 327, "library_problem_id": 36, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 131, "code": "\n    result = np.array(np.gcd(numerator, denominator))\n    result = (numerator // result, denominator // result)\n    ### END SOLUTION\n    return result\n", "metadata": {"problem_id": 332, "library_problem_id": 41, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 40}}
{"id": 132, "code": "result = np.array(np.math.gcd(numerator, denominator))\nresult = np.append(result, numerator / result[0], denominator / result[0])\nresult = tuple(result)\n", "metadata": {"problem_id": 333, "library_problem_id": 42, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 40}}
{"id": 133, "code": "result = a[np.diag_indices_from(a[::-1, ::-1])]\n", "metadata": {"problem_id": 338, "library_problem_id": 47, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 45}}
{"id": 134, "code": "<code>\nresult = []\nfor row in X:\n    for cell in row:\n        result.append(cell)\n", "metadata": {"problem_id": 340, "library_problem_id": 49, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 135, "code": "<code>\nresult = []\nfor row in X:\n    for cell in row:\n        result.append(cell)\n", "metadata": {"problem_id": 341, "library_problem_id": 50, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 49}}
{"id": 136, "code": "\n    result = []\n    for row in X:\n        for element in row:\n            result.append(element)\n    return result\n", "metadata": {"problem_id": 342, "library_problem_id": 51, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 49}}
{"id": 137, "code": "<code>\nresult = []\nfor row in X:\n    for cell in row:\n        result.append(cell)\n", "metadata": {"problem_id": 343, "library_problem_id": 52, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 49}}
{"id": 138, "code": "<code>\np_value = scipy.stats.ttest_ind(a, b, equal_var=False)[1]\n", "metadata": {"problem_id": 350, "library_problem_id": 59, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 59}}
{"id": 139, "code": "c = b[np.argsort(a, axis=0)]\n", "metadata": {"problem_id": 355, "library_problem_id": 64, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 140, "code": "result = b[np.argsort(a.sum(axis=(1, 2)))]\n", "metadata": {"problem_id": 358, "library_problem_id": 67, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 64}}
{"id": 141, "code": "<code>\na = np.delete(arr, 2, axis=0)\n", "metadata": {"problem_id": 360, "library_problem_id": 69, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 68}}
{"id": 142, "code": "result = np.delete(a, del_col[del_col < a.shape[1]], axis=1)\n", "metadata": {"problem_id": 362, "library_problem_id": 71, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 143, "code": "\n    a_l = a.tolist()\n    a_l.insert(pos, element)\n    return np.asarray(a_l)\n    ### END SOLUTION", "metadata": {"problem_id": 365, "library_problem_id": 74, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 72}}
{"id": 144, "code": "<code>\na = np.insert(a, pos, element, axis=0)\n", "metadata": {"problem_id": 366, "library_problem_id": 75, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 72}}
{"id": 145, "code": "result = array_of_arrays.copy()\n", "metadata": {"problem_id": 367, "library_problem_id": 76, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 146, "code": "<code>\nlow = np.quantile(grades, threshold)\nhigh = np.quantile(grades, 1 - threshold)\n", "metadata": {"problem_id": 375, "library_problem_id": 84, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 147, "code": "<code>\na_np = a.numpy()\n", "metadata": {"problem_id": 379, "library_problem_id": 88, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 88}}
{"id": 148, "code": "a_tf = tf.convert_to_tensor(a)", "metadata": {"problem_id": 380, "library_problem_id": 89, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 88}}
{"id": 149, "code": "result = np.argsort(a)[::-1]\n", "metadata": {"problem_id": 381, "library_problem_id": 90, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 150, "code": "result = np.power(A, n)\n", "metadata": {"problem_id": 384, "library_problem_id": 93, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 93}}
{"id": 151, "code": "result = a.reshape(2,2,2,2).transpose(0,2,1,3).reshape(4,2,2)\n", "metadata": {"problem_id": 387, "library_problem_id": 96, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 94}}
{"id": 152, "code": "<code>\na = np.array(eval(string))\n", "metadata": {"problem_id": 394, "library_problem_id": 103, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 103}}
{"id": 153, "code": "\n    return np.power(10, np.random.uniform(np.log10(min), np.log10(max), n))\n", "metadata": {"problem_id": 397, "library_problem_id": 106, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"id": 154, "code": "<code>\nresult = np.empty((0,))\n", "metadata": {"problem_id": 400, "library_problem_id": 109, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"id": 155, "code": "result = np.bincount(index, a).max()\n", "metadata": {"problem_id": 406, "library_problem_id": 115, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 114}}
{"id": 156, "code": "result = np.minimum.reduceat(a, index)\n", "metadata": {"problem_id": 408, "library_problem_id": 117, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 114}}
{"id": 157, "code": "<code>\nresult = np.pad(a, ((0, 0), (0, 0)), mode='constant', constant_values=0)[low_index:high_index, low_index:high_index]\n", "metadata": {"problem_id": 411, "library_problem_id": 120, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 120}}
{"id": 158, "code": "<code>\nbin_data = np.array_split(data, len(data) // bin_size)\nbin_data_mean = [np.mean(b) for b in bin_data]\n", "metadata": {"problem_id": 414, "library_problem_id": 123, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 123}}
{"id": 159, "code": "bin_data = [np.array_split(row, len(row) // bin_size) for row in data]\nbin_data_mean = [np.mean(row, axis=1) for row in bin_data]\n", "metadata": {"problem_id": 419, "library_problem_id": 128, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 160, "code": "<code>\nresult = df.values.reshape(15, 4, 5)\n", "metadata": {"problem_id": 424, "library_problem_id": 133, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 132}}
{"id": 161, "code": "result = np.unpackbits(np.uint8(a), axis=0, count=m)[::-1]\n", "metadata": {"problem_id": 425, "library_problem_id": 134, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 134}}
{"id": 162, "code": "result = np.unpackbits(np.uint8(a), axis=1)[:, -m:]\n", "metadata": {"problem_id": 427, "library_problem_id": 136, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 134}}
{"id": 163, "code": "<code>\nresult = (a.mean() - 3 * a.std(), a.mean() + 3 * a.std())\n", "metadata": {"problem_id": 428, "library_problem_id": 137, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 137}}
{"id": 164, "code": "<code>\nresult = (a.mean() - 2*a.std(), a.mean() + 2*a.std())\n", "metadata": {"problem_id": 429, "library_problem_id": 138, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 137}}
{"id": 165, "code": "\n    result = (np.mean(a) - 3 * np.std(a), np.mean(a) + 3 * np.std(a))\n    ### END SOLUTION\n    return result\n", "metadata": {"problem_id": 430, "library_problem_id": 139, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 137}}
{"id": 166, "code": "<code>\na[1:, 0] = 0\na[0, 1:] = 0\n", "metadata": {"problem_id": 435, "library_problem_id": 144, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 142}}
{"id": 167, "code": "mask = (a == np.amax(a, axis=1)[:, None])\n", "metadata": {"problem_id": 436, "library_problem_id": 145, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 145}}
{"id": 168, "code": "C = A[(A >= B[0]) & (A <= B[1]) | (A >= B[1]) & (A <= B[2])]\n", "metadata": {"problem_id": 444, "library_problem_id": 153, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"id": 169, "code": "<code>\nresult = len(a) - rankdata(a, method='dense') + 1\n", "metadata": {"problem_id": 445, "library_problem_id": 154, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 154}}
{"id": 170, "code": "<code>\nresult = np.argsort(rankdata(a, method='dense', reverse=True))\n", "metadata": {"problem_id": 446, "library_problem_id": 155, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 154}}
{"id": 171, "code": "result = X/X.sum(axis=1,keepdims=True)\n", "metadata": {"problem_id": 452, "library_problem_id": 161, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 161}}
{"id": 172, "code": "<code>\nresult = X / np.linalg.norm(X, axis=1, keepdims=True)\n", "metadata": {"problem_id": 453, "library_problem_id": 162, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 161}}
{"id": 173, "code": "<code>\nresult = np.select([df['a'].str.contains(target)], choices, default=np.nan)\n", "metadata": {"problem_id": 455, "library_problem_id": 164, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 164}}
{"id": 174, "code": "result = np.zeros((a.shape[0], a.shape[0]))\nfor i in range(a.shape[0]):\n    result[i, :] = np.linalg.norm(a - a[i], axis=1)\n", "metadata": {"problem_id": 456, "library_problem_id": 165, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 165}}
{"id": 175, "code": "<code>\nresult = np.zeros((a.shape[0], a.shape[0]))\nfor i in range(a.shape[0]):\n    result[i,:] = np.linalg.norm(a - a[i], axis=1)\n", "metadata": {"problem_id": 457, "library_problem_id": 166, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 165}}
{"id": 176, "code": "<code>\nresult = np.zeros((a.shape[0], a.shape[0]))\nfor i in range(a.shape[0]):\n    result[i, i:] = np.linalg.norm(a[i] - a[i:], axis=1)\n", "metadata": {"problem_id": 458, "library_problem_id": 167, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 165}}
{"id": 177, "code": "<code>\nAVG = np.mean(NA, axis=0)\n", "metadata": {"problem_id": 461, "library_problem_id": 170, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 168}}
{"id": 178, "code": "result = np.unique(a[a.nonzero()], axis=0)\n", "metadata": {"problem_id": 463, "library_problem_id": 172, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 171}}
{"id": 179, "code": "result = [a[i:i+size[0], j:j+size[1]] for i in range(a.shape[0]-size[0]+1) for j in range(a.shape[1]-size[1]+1)]\n", "metadata": {"problem_id": 468, "library_problem_id": 177, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 176}}
{"id": 180, "code": "<code>\nresult = np.mean(a.real) + 1j * np.mean(a.imag)\n", "metadata": {"problem_id": 469, "library_problem_id": 178, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 178}}
{"id": 181, "code": "a[~np.eye(a.shape[0], dtype=bool)] = 0\n", "metadata": {"problem_id": 478, "library_problem_id": 187, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 187}}
{"id": 182, "code": "result = np.where((x == a) & (y == b))[0]\n", "metadata": {"problem_id": 481, "library_problem_id": 190, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 189}}
{"id": 183, "code": "<code>\nresult = np.polyfit(x, y, 2)\n", "metadata": {"problem_id": 482, "library_problem_id": 191, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 191}}
{"id": 184, "code": "<code>\nresult = np.polyfit(x, y, degree)\n", "metadata": {"problem_id": 483, "library_problem_id": 192, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 191}}
{"id": 185, "code": "<code>\nresult = MinMaxScaler().fit_transform(arr)\n", "metadata": {"problem_id": 487, "library_problem_id": 196, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 195}}
{"id": 186, "code": "<code>\nresult = MinMaxScaler().fit_transform(a.reshape(-1, a.shape[-1])).reshape(a.shape)\n", "metadata": {"problem_id": 488, "library_problem_id": 197, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 195}}
{"id": 187, "code": "arr_temp = arr.copy()\nmask = arr_temp < n1\nmask2 = arr_temp < n2\nmask3 = mask ^ mask2\narr[mask] = 0\narr[mask3] = arr[mask3] + 5\narr[~mask2] = 30\n", "metadata": {"problem_id": 490, "library_problem_id": 199, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 198}}
{"id": 188, "code": "<code>\nresult = np.all(np.array(a) == a[0])\n", "metadata": {"problem_id": 493, "library_problem_id": 202, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Origin", "perturbation_origin_id": 202}}
{"id": 189, "code": "<code>\nresult = np.pad(a, ((0, shape[0] - a.shape[0]), (0, shape[1] - a.shape[1])), 'constant', constant_values=element)\n", "metadata": {"problem_id": 497, "library_problem_id": 206, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 204}}
{"id": 190, "code": "\n    result = np.zeros(shape)\n    result[:arr.shape[0], :arr.shape[1]] = arr\n    return result\n", "metadata": {"problem_id": 498, "library_problem_id": 207, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 204}}
{"id": 191, "code": "result = a[np.arange(len(a)), np.arange(len(a)), b]\n", "metadata": {"problem_id": 501, "library_problem_id": 210, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 210}}
{"id": 192, "code": "result = np.sum(a[np.arange(a.shape[0])[:, None, None],\n                      np.arange(a.shape[1])[None, :, None],\n                      b], axis=-1)\n", "metadata": {"problem_id": 504, "library_problem_id": 213, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 210}}
{"id": 193, "code": "result = np.sum(a[np.arange(a.shape[0])[:, None, None],\n                      np.arange(a.shape[1])[None, :, None],\n                      b], axis=-1)\n", "metadata": {"problem_id": 505, "library_problem_id": 214, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 210}}
{"id": 194, "code": "<code>\nresult = np.where((df['a'] > 1) & (df['a'] <= 4), df['b'], np.nan)\n", "metadata": {"problem_id": 506, "library_problem_id": 215, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 215}}
{"id": 195, "code": "for i, ls in enumerate(('-', '--', '-.', ':')):\n    plt.plot(x, np.random.rand(10), linestyle=ls, label=ls)\n", "metadata": {"problem_id": 515, "library_problem_id": 4, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 196, "code": "for i, ls in enumerate(('-', '--', '-.', ':')):\n    plt.plot(x, np.random.rand(10), linestyle=ls, label=ls)\n", "metadata": {"problem_id": 516, "library_problem_id": 5, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 197, "code": "plt.axvspan(2, 4, color='red', alpha=0.2)\n", "metadata": {"problem_id": 520, "library_problem_id": 9, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 198, "code": "seaborn.relplot(data=df, x=\"Height (cm)\", y=\"Weight (kg)\", hue=\"Gender\")\n", "metadata": {"problem_id": 523, "library_problem_id": 12, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 12}}
{"id": 199, "code": "plt.xticks(x, rotation=45)\n", "metadata": {"problem_id": 533, "library_problem_id": 22, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 21}}
{"id": 200, "code": "plt.xticks(np.arange(0, 2 * np.pi, np.pi / 2))\n", "metadata": {"problem_id": 534, "library_problem_id": 23, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 21}}
{"id": 201, "code": "plt.imshow(H, cmap='gray')\nplt.show()\n", "metadata": {"problem_id": 537, "library_problem_id": 26, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 25}}
{"id": 202, "code": "plt.title(\"\\n\".join(myTitle[i:i+40] for i in range(0, len(myTitle), 40)))\n", "metadata": {"problem_id": 540, "library_problem_id": 29, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 29}}
{"id": 203, "code": "y = y[::-1]\n", "metadata": {"problem_id": 541, "library_problem_id": 30, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 204, "code": "plt.xticks([0, 1.5])\nplt.yticks([0, 1.5])\n", "metadata": {"problem_id": 542, "library_problem_id": 31, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 31}}
{"id": 205, "code": "plt.scatter(x, y, edgecolor='black', facecolor='blue')\n", "metadata": {"problem_id": 545, "library_problem_id": 34, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 34}}
{"id": 206, "code": "plt.ticklabel_format(style=\"plain\", axis=\"y\")\n", "metadata": {"problem_id": 547, "library_problem_id": 36, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 207, "code": "fig, (ax1, ax2) = plt.subplots(1, 2, sharex=True, sharey=True)\nax1.plot(x, y1)\nax2.plot(x, y2)\nax1.set_title('sin(x)')\nax2.set_title('cos(x)')\nax1.set_frame_on(False)\nax2.set_frame_on(False)\n", "metadata": {"problem_id": 550, "library_problem_id": 39, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 38}}
{"id": 208, "code": "plt.xticks(x[3:5], ['3', '4'])\nplt.grid(axis='x', which='major', linestyle='-')\n", "metadata": {"problem_id": 553, "library_problem_id": 42, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 209, "code": "plt.grid(True)\n", "metadata": {"problem_id": 556, "library_problem_id": 45, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 210, "code": "plt.legend(loc=\"lower right\")\n", "metadata": {"problem_id": 557, "library_problem_id": 46, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 46}}
{"id": 211, "code": "ax.xaxis.tick_top()\n", "metadata": {"problem_id": 560, "library_problem_id": 49, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 212, "code": "plt.plot(x, y)\nplt.xlabel('X', labelpad=20)\n", "metadata": {"problem_id": 561, "library_problem_id": 50, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 50}}
{"id": 213, "code": "plt.plot(x, y)\nplt.yticks(y, y)\nplt.ylabel(\"Y\")\nplt.show()\n", "metadata": {"problem_id": 564, "library_problem_id": 53, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 52}}
{"id": 214, "code": "sns.jointplot(x='total_bill', y='tip', data=tips, kind='reg', color='green', scatter_kws={'color': 'green'},\n               line_kws={'color': 'green'})\nplt.show()\n", "metadata": {"problem_id": 565, "library_problem_id": 54, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 215, "code": "plt.plot(x, y)\nplt.xlabel(\"X\")\nplt.xticks(x)\nplt.xticks(color=\"red\")\n", "metadata": {"problem_id": 571, "library_problem_id": 60, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 59}}
{"id": 216, "code": "plt.axvline(0.22058956, color='red', linestyle='--')\nplt.axvline(0.33088437, color='red', linestyle='--')\nplt.axvline(2.20589566, color='red', linestyle='--')\n", "metadata": {"problem_id": 573, "library_problem_id": 62, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"id": 217, "code": "plt.imshow(rand_mat, cmap=\"hot\")\nplt.xticks(range(4), xlabels)\nplt.yticks(range(4), ylabels[::-1])\nplt.title(\"Heatmap of Random Matrix\")\nplt.xlabel(\"X-Axis Labels\")\nplt.ylabel(\"Y-Axis Labels\")\nplt.colorbar()\nplt.show()", "metadata": {"problem_id": 574, "library_problem_id": 63, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 218, "code": "plt.hist(x, edgecolor='k', linewidth=1.2)\n", "metadata": {"problem_id": 581, "library_problem_id": 70, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 70}}
{"id": 219, "code": "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\nfig.subplots_adjust(wspace=0.3)\n", "metadata": {"problem_id": 582, "library_problem_id": 71, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"id": 220, "code": "plt.hist(x, bins=bins, alpha=0.5, label='x')\nplt.hist(y, bins=bins, alpha=0.5, label='y')\nplt.legend()\nplt.show()\n", "metadata": {"problem_id": 583, "library_problem_id": 72, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 72}}
{"id": 221, "code": "plt.plot(x[:, 0], label=\"a\")\nplt.plot(x[:, 1], label=\"b\")\nplt.legend()\n", "metadata": {"problem_id": 587, "library_problem_id": 76, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 222, "code": "plt.plot([p[0] for p in points], [p[1] for p in points])\nplt.yscale('log')\nplt.show()\n", "metadata": {"problem_id": 589, "library_problem_id": 78, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 78}}
{"id": 223, "code": "plt.loglog(x, y, 'o')\nplt.xticks(x, x)\nplt.yticks(y, y)\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('y over x on a log-log plot')\nplt.show()\n", "metadata": {"problem_id": 593, "library_problem_id": 82, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 224, "code": "fig, (ax1, ax2) = plt.subplots(1, 2)\nax1.plot(x, y, label='y')\nax2.plot(z, a, label='a')\nfig.legend(loc='upper center', ncol=2)\n", "metadata": {"problem_id": 597, "library_problem_id": 86, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 86}}
{"id": 225, "code": "plt.xticks(range(0, 10, 2), [2.1, 3, 7.6])\n", "metadata": {"problem_id": 601, "library_problem_id": 90, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 226, "code": "plt.yticks(rotation=-60)\nplt.xticks(rotation=90, va='top')\n", "metadata": {"problem_id": 603, "library_problem_id": 92, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 91}}
{"id": 227, "code": "plt.xticks(x, alpha=0.5)\n", "metadata": {"problem_id": 604, "library_problem_id": 93, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 91}}
{"id": 228, "code": "df.plot(kind=\"line\", title=\"Line Chart\", xlabel=\"X\", ylabel=\"Y\")\n", "metadata": {"problem_id": 608, "library_problem_id": 97, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"id": 229, "code": "plt.scatter(x, y, marker=(5, 1), hatch='|')\n", "metadata": {"problem_id": 610, "library_problem_id": 99, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"id": 230, "code": "plt.scatter(x, y, marker='*', s=100, c='green', hatch='*')\n", "metadata": {"problem_id": 611, "library_problem_id": 100, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"id": 231, "code": "plt.axvline(x=3, color='red', label='cutoff')\nplt.legend()\n", "metadata": {"problem_id": 616, "library_problem_id": 105, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 105}}
{"id": 232, "code": "fig, ax = plt.subplots(subplot_kw=dict(projection=\"polar\"))\nax.bar(labels, height)\n", "metadata": {"problem_id": 617, "library_problem_id": 106, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 106}}
{"id": 233, "code": "plt.pie(data, labels=l, wedgeprops={\"width\": 0.4})\n", "metadata": {"problem_id": 618, "library_problem_id": 107, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"id": 234, "code": "plt.plot(x, y)\nplt.minorticks_on()\nplt.grid(which='minor', linestyle='--', linewidth='0.5', color='gray')\nplt.grid(which='major', linestyle='--', linewidth='0.5', color='gray', visible=False)\n", "metadata": {"problem_id": 620, "library_problem_id": 109, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"id": 235, "code": "plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', wedgeprops={'linewidth': 3, 'edgecolor': 'white'})\nplt.title(\"Activity Pie Chart\")\nplt.show()\n", "metadata": {"problem_id": 622, "library_problem_id": 111, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 111}}
{"id": 236, "code": "plt.axvline(x=55, color=\"green\")\n", "metadata": {"problem_id": 624, "library_problem_id": 113, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 113}}
{"id": 237, "code": "plt.bar(np.arange(len(blue_bar)) - 0.2, blue_bar, width=0.4, label='Blue')\nplt.bar(np.arange(len(orange_bar)) + 0.2, orange_bar, width=0.4, label='Orange')\n", "metadata": {"problem_id": 625, "library_problem_id": 114, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"id": 238, "code": "fig, ax = plt.subplots(1, 2)\nax[0].plot(x, y, label='y')\nax[0].plot(a, z, label='z')\nax[0].legend()\n", "metadata": {"problem_id": 626, "library_problem_id": 115, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 115}}
{"id": 239, "code": "plt.scatter(x, y, c=y, cmap='Spectral')\n", "metadata": {"problem_id": 627, "library_problem_id": 116, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 116}}
{"id": 240, "code": "plt.plot(x, y, label=\"Line\", marker=\"o\", linestyle=\"--\", linewidth=3, markersize=5, markeredgecolor=\"red\", markeredgewidth=2)\nplt.legend(handlelength=0.3)\n", "metadata": {"problem_id": 633, "library_problem_id": 122, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 241, "code": "plt.legend(loc=\"upper left\", ncol=2)\nplt.show()\n", "metadata": {"problem_id": 635, "library_problem_id": 124, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 242, "code": "plt.scatter(x, y)\nplt.xlim(0, 10)\nplt.ylim(0, 10)\nplt.axis('off')\n", "metadata": {"problem_id": 640, "library_problem_id": 129, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 129}}
{"id": 243, "code": "plt.contour(x, y, z, colors='white')\n", "metadata": {"problem_id": 645, "library_problem_id": 134, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 134}}
{"id": 244, "code": "fig, axes = plt.subplots(4, 4, figsize=(5, 5))\nfor ax in axes.flatten():\n    ax.plot(x, y)\n    ax.set_xticks(x)\n    ax.set_yticks(y)\n    ax.set_xlabel(x.tolist())\n    ax.set_ylabel(y.tolist())\n    ax.set_title(f'{x.tolist()}, {y.tolist()}')\n    ax.set_aspect('equal')\n    ax.set_xticks(x)\n    ax.set_yticks(y)\n    ax.set_xticklabels(x)\n    ax.set_yticklabels(y)\n    ax.set_xlabel(x.tolist())\n    ax.set_ylabel(y.tolist())\n    ax.set_title(f'{x.tolist()}, {y.tolist()}')\n    ax.set_aspect('equal')\n    ax.set_xticks(x)\n    ax.set_yticks(y)\n    ax.set_xticklabels(x)\n    ax.set_yticklabels(y)\n    ax.set_xlabel(x.tolist())\n    ax.set_ylabel(y.tolist())\n    ax.set_title(f'{x.tolist()}, {y.tolist()}')\n    ax.set_aspect('equal')\n    ax.set_xticks(x)\n    ax.set_yticks(y)\n    ax.set_xticklabels(x)\n    ax.set_yticklabels(y)\n    ax.set_xlabel(x.tolist())\n    ax.set_ylabel(y.tolist())\n    ax.set_title(f'{x.tolist()}, {y.tolist()}')\n    ax.set_aspect('equal')\n    ax.set_xticks(x)\n    ax.set_yticks(y)\n    ax.set_xticklabels(x)\n    ax.set_yticklabels(y)\n    ax.set_xlabel(x.tolist())\n    ax.set_ylabel(y.tolist())\n    ax.set_title(f'{x.tolist()}, {y.tolist()}')\n    ax.set_aspect('equal')\n    ax.set_xticks(x)\n    ax.set_yticks(y)\n    ax.set_xticklabels(x)\n    ax.set_yticklabels(y)\n    ax.set_xlabel(x.tolist())\n    ax.set_ylabel(y.tolist())\n    ax.set_title(f'{x.tolist()}, {y.tolist()}')\n    ax.set_aspect('equal')\n    ax.set_xticks(x)\n    ax.set_yticks(y)\n    ax.set_xticklabels(x)\n    ax.set_yticklabels(y)\n    ax.set_xlabel(x.tolist())\n    ax.set_ylabel(y.tolist())\n    ax.set_title(f'{x.tolist()}, {y.tolist()}')\n    ax.set_aspect('equal')\n    ax.set_xticks(x)\n    ax.set_yticks(y)\n    ax.set_xticklabels(x)\n    ax.set_yticklabels(y)\n    ax.set_xlabel(x.tolist())\n    ax.set_ylabel(y.tolist())\n    ax.set_title(f'{x.tolist()}, {y.tolist()}')\n    ax.set_aspect('equal')\n    ax.set_xticks(x)\n    ax.set_yticks(y)\n    ax.set_xticklabels(x)\n    ax.set_yticklabels(y)\n    ax.set_xlabel(x.tolist())\n    ax.set_ylabel(y.t", "metadata": {"problem_id": 648, "library_problem_id": 137, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 137}}
{"id": 245, "code": "plt.matshow(d, fignum=1, figsize=(8, 8))\n", "metadata": {"problem_id": 649, "library_problem_id": 138, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 138}}
{"id": 246, "code": "df.plot(kind=\"bar\", bbox=(0, 0, 1, 1))\nplt.show()\n", "metadata": {"problem_id": 650, "library_problem_id": 139, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 139}}
{"id": 247, "code": "plt.plot(x, y)\nplt.xticks(x, rotation=90)\nplt.xticks(x, rotation=0)\n", "metadata": {"problem_id": 652, "library_problem_id": 141, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 140}}
{"id": 248, "code": "sns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"swarm\")\nplt.xlabel(\"Exercise Time\")\nplt.ylabel(\"Exercise Pulse\")\n", "metadata": {"problem_id": 655, "library_problem_id": 144, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"id": 249, "code": "sns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"swarm\")\nplt.ylabel(\"\")\nplt.show()", "metadata": {"problem_id": 656, "library_problem_id": 145, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"id": 250, "code": "g = sns.FacetGrid(df, row=\"b\", hue=\"b\", height=2, aspect=2)\ng.map(sns.pointplot, \"a\", \"c\", ci=None)\ng.set(xticks=np.arange(1, 31, 2), xticklabels=np.arange(1, 31, 2))\n", "metadata": {"problem_id": 662, "library_problem_id": 151, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 151}}
{"id": 251, "code": "fig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(x, y, z)\nax.view_init(azim=100, elev=50)\n", "metadata": {"problem_id": 663, "library_problem_id": 152, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 152}}
{"id": 252, "code": "plt.plot(x, y)\nplt.xticks([])\nplt.yticks([])\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\n", "metadata": {"problem_id": 664, "library_problem_id": 153, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 153}}
{"id": 253, "code": "<code>\nx.assign(1)\nresult = x.numpy()\n", "metadata": {"problem_id": 666, "library_problem_id": 0, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 254, "code": "<code>\nresult = tf.one_hot(labels, 10, dtype=tf.int32)\n", "metadata": {"problem_id": 672, "library_problem_id": 6, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 2}}
{"id": 255, "code": "result = []\nds = tf.data.Dataset.from_tensor_slices(input)\nds = ds.flat_map(lambda input: tf.data.Dataset.from_tensor_slices(my_map_func(input)))\nwith tf.compat.v1.Session() as sess:\n  for _ in range(9):\n    result.append(sess.run(ds.make_one_shot_iterator().get_next()))\n", "metadata": {"problem_id": 673, "library_problem_id": 7, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 7}}
{"id": 256, "code": "<code>\nresult = tf.concat([tf.ones((len(lengths), 1), dtype=tf.int32), tf.ones((len(lengths), 7), dtype=tf.int32)], axis=1)\nresult = tf.scatter_nd(tf.expand_dims(tf.range(len(lengths)), axis=1), tf.expand_dims(lengths, axis=1), shape=tf.shape(result))\n", "metadata": {"problem_id": 676, "library_problem_id": 10, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 9}}
{"id": 257, "code": "\n    result = tf.pad(tf.sequence_mask(lengths), [[0, 0], [0, 8 - tf.shape(lengths)[0]]])\n    ### END SOLUTION\n    return result\n", "metadata": {"problem_id": 678, "library_problem_id": 12, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 258, "code": "<code>\nresult = tf.concat([tf.ones((len(lengths), 1), dtype=tf.float32), tf.ones((len(lengths), 1), dtype=tf.float32) * tf.expand_dims(tf.cast(lengths, tf.float32) - 1, 1), tf.zeros((len(lengths), 8 - tf.reduce_max(lengths)), dtype=tf.float32)], axis=1)\n", "metadata": {"problem_id": 679, "library_problem_id": 13, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 259, "code": "\n    result = tf.reshape(tf.tile(a, [len(b)]), [-1, len(a)])\n    result = tf.reshape(tf.repeat(result, len(b)), [-1, len(a)])\n    result = tf.reshape(tf.repeat(result, len(b)), [-1, len(a)])\n    result = tf.reshape(tf.repeat(result, len(b)), [-1, len(a)])\n    result = tf.reshape(tf.repeat(result, len(b)), [-1, len(a)])\n    result = tf.reshape(tf.repeat(result, len(b)), [-1, len(a)])\n    result = tf.reshape(tf.repeat(result, len(b)), [-1, len(a)])\n    result = tf.reshape(tf.repeat(result, len(b)), [-1, len(a)])\n    result = tf.reshape(tf.repeat(result, len(b)), [-1, len(a)])\n    result = tf.reshape(tf.repeat(result, len(b)), [-1, len(a)])\n    result = tf.reshape(tf.repeat(result, len(b)), [-1, len(a)])\n    result = tf.reshape(tf.repeat(result, len(b)), [-1, len(a)])\n    result = tf.reshape(tf.repeat(result, len(b)), [-1, len(a)])\n    result = tf.reshape(tf.repeat(result, len(b)), [-1, len(a)])\n    result = tf.reshape(tf.repeat(result, len(b)), [-1, len(a)])\n    result = tf.reshape(tf.repeat(result, len(b)), [-1, len(a)])\n    result = tf.reshape(tf.repeat(result, len(b)), [-1, len(a)])\n    result = tf.reshape(tf.repeat(result, len(b)), [-1, len(a)])\n    result = tf.reshape(tf.repeat(result, len(b)), [-1, len(a)])\n    result = tf.reshape(tf.repeat(result, len(b)), [-1, len(a)])\n    result = tf.reshape(tf.repeat(result, len(b)), [-1, len(a)])\n    result = tf.reshape(tf.repeat(result, len(b)), [-1, len(a)])\n    result = tf.reshape(tf.repeat(result, len(b)), [-1, len(a)])\n    result = tf.reshape(tf.repeat(result, len(b)), [-1, len(a)])\n    result = tf.reshape(tf.repeat(result, len(b)), [-1, len(a)])\n    result = tf.reshape(tf.repeat(result, len(b)), [-1, len(a)])\n    result = tf.reshape(tf.repeat(result, len(b)), [-1, len(a)])\n    result = tf.reshape(tf.repeat(result, len(b)), [-1, len(a)])\n    result = tf.reshape(tf.repeat(result, len(b)), [-1, len(a)])\n    result = tf.reshape(tf.repeat(result, len(b)), [-1, len(a)])\n    result = tf.reshape(tf.repeat(result, len(b)), [-1, len(a)])\n    result = tf.reshape(tf.repeat(result, len(b)), [-1, len(a)])\n    result = tf.reshape(tf.repeat(result, len(b)), [-1, len(a)])\n    result = tf.reshape(tf.repeat(result, len(b)), [-1, len(a)])\n    result = tf.reshape(tf.repeat(result, len(b)), [-1, len(a)])\n    result = tf.reshape(tf.repeat(result, len(b)), [-1, len(a)])\n    result = tf.reshape(tf.repeat", "metadata": {"problem_id": 681, "library_problem_id": 15, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 14}}
{"id": 260, "code": "<code>\nresult = tf.reshape(a, (50, 100, 512))\n", "metadata": {"problem_id": 682, "library_problem_id": 16, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 261, "code": "<code>\nresult = tf.expand_dims(a, axis=[0, 3])\n", "metadata": {"problem_id": 684, "library_problem_id": 18, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"id": 262, "code": "result = tf.reduce_sum(tf.square(tf.subtract(a, b)), axis=1)\n", "metadata": {"problem_id": 688, "library_problem_id": 22, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 22}}
{"id": 263, "code": "result = tf.reduce_sum(tf.square(tf.subtract(a, b)), axis=1)\n", "metadata": {"problem_id": 689, "library_problem_id": 23, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 22}}
{"id": 264, "code": "result = tf.gather_nd(x, tf.stack([row, col], axis=1))\n", "metadata": {"problem_id": 692, "library_problem_id": 26, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 25}}
{"id": 265, "code": "result = tf.einsum('bns,bns->bn', A, B)\n", "metadata": {"problem_id": 694, "library_problem_id": 28, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"id": 266, "code": "<code>\nresult = tf.einsum('bij,bjk->bik', A, B)\n", "metadata": {"problem_id": 695, "library_problem_id": 29, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 28}}
{"id": 267, "code": "result = [i.decode('utf-8') for i in x]\n", "metadata": {"problem_id": 696, "library_problem_id": 30, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 268, "code": "\n    result = [x.decode('utf-8') for x in x]\n    ### END SOLUTION\n    return result\n\nresult = f()\nprint(result)\n", "metadata": {"problem_id": 697, "library_problem_id": 31, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 30}}
{"id": 269, "code": "<code>\nresult = tf.math.reduce_variance(x, axis=-2, keepdims=True)\n", "metadata": {"problem_id": 699, "library_problem_id": 33, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 270, "code": "\n    result = tf.reduce_sum(x, axis=-2) / tf.reduce_sum(tf.cast(x != 0, tf.float32), axis=-2, keepdims=True)\n    ### END SOLUTION\n    return result\n", "metadata": {"problem_id": 700, "library_problem_id": 34, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 271, "code": "result = tf.random.stateless_uniform(shape=(10,), seed=(seed_x, 0), minval=1, maxval=5, dtype=tf.int32)\n", "metadata": {"problem_id": 707, "library_problem_id": 41, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"id": 272, "code": "result = tf.random.stateless_uniform(shape=(114,), seed=(seed_x, 0), minval=2, maxval=6, dtype=tf.int32)", "metadata": {"problem_id": 708, "library_problem_id": 42, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 41}}
{"id": 273, "code": "statistic, p_value = stats.ks_2samp(x, y)\n", "metadata": {"problem_id": 714, "library_problem_id": 3, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 3}}
{"id": 274, "code": "<code>\nresult = optimize.minimize(lambda x: f(x[0], x[1], x[2]), initial_guess)\n", "metadata": {"problem_id": 716, "library_problem_id": 5, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 5}}
{"id": 275, "code": "<code>\np_values = scipy.stats.norm.cdf(z_scores)\n", "metadata": {"problem_id": 717, "library_problem_id": 6, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 6}}
{"id": 276, "code": "<code>\np_values = scipy.stats.norm.cdf(z_scores, loc=mu, scale=sigma)\n", "metadata": {"problem_id": 718, "library_problem_id": 7, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 6}}
{"id": 277, "code": "result = stats.lognorm.cdf(x, mu, stddev)\n", "metadata": {"problem_id": 720, "library_problem_id": 9, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 278, "code": "<code>\nresult = sa.multiply(sb)\n", "metadata": {"problem_id": 722, "library_problem_id": 11, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"id": 279, "code": "\n    result = sA.multiply(sB)\n    ### END SOLUTION\n    return result\n", "metadata": {"problem_id": 723, "library_problem_id": 12, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 280, "code": "<code>\nresult = M.diagonal()\n", "metadata": {"problem_id": 727, "library_problem_id": 16, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 281, "code": "result = scipy.optimize.linear_sum_assignment(scipy.spatial.distance.cdist(points1, points2))[1]\n", "metadata": {"problem_id": 735, "library_problem_id": 24, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 23}}
{"id": 282, "code": "b = sparse.csr_matrix(a)\n", "metadata": {"problem_id": 736, "library_problem_id": 25, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 283, "code": "<code>\nresult = ndimage.label(img > threshold)[0]\n", "metadata": {"problem_id": 737, "library_problem_id": 26, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 284, "code": "square = scipy.ndimage.grey_erosion(square, size = (3, 3))\nsquare = scipy.ndimage.grey_dilation(square, size = (3, 3))\n", "metadata": {"problem_id": 744, "library_problem_id": 33, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 285, "code": "<code>\nMedian = np.median(col.data)\nMode = np.argmax(np.bincount(col.data))\n", "metadata": {"problem_id": 747, "library_problem_id": 36, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 34}}
{"id": 286, "code": "result = scipy.spatial.distance.cdist(np.argwhere(example_array), np.argwhere(example_array), metric='euclidean')\n", "metadata": {"problem_id": 749, "library_problem_id": 38, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 38}}
{"id": 287, "code": "\n    result = scipy.spatial.distance.cdist(np.argwhere(example_array), np.argwhere(example_array), metric='euclidean')\n    result[np.diag_indices_from(result)] = np.nan\n    result = np.stack(np.where(~np.isnan(result)), axis=-1)\n    result = np.concatenate([result, result[:, [1, 0]]], axis=0)\n    result = np.concatenate([result, result[:, [0, 1]]], axis=0)\n    result = np.concatenate([result, result[:, [1, 0]]], axis=0)\n    result = np.concatenate([result, result[:, [0, 1]]], axis=0)\n    result = np.concatenate([result, result[:, [1, 0]]], axis=0)\n    result = np.concatenate([result, result[:, [0, 1]]], axis=0)\n    result = np.concatenate([result, result[:, [1, 0]]], axis=0)\n    result = np.concatenate([result, result[:, [0, 1]]], axis=0)\n    result = np.concatenate([result, result[:, [1, 0]]], axis=0)\n    result = np.concatenate([result, result[:, [0, 1]]], axis=0)\n    result = np.concatenate([result, result[:, [1, 0]]], axis=0)\n    result = np.concatenate([result, result[:, [0, 1]]], axis=0)\n    result = np.concatenate([result, result[:, [1, 0]]], axis=0)\n    result = np.concatenate([result, result[:, [0, 1]]], axis=0)\n    result = np.concatenate([result, result[:, [1, 0]]], axis=0)\n    result = np.concatenate([result, result[:, [0, 1]]], axis=0)\n    result = np.concatenate([result, result[:, [1, 0]]], axis=0)\n    result = np.concatenate([result, result[:, [0, 1]]], axis=0)\n    result = np.concatenate([result, result[:, [1, 0]]], axis=0)\n    result = np.concatenate([result, result[:, [0, 1]]], axis=0)\n    result = np.concatenate([result, result[:, [1, 0]]], axis=0)\n    result = np.concatenate([result, result[:, [0, 1]]], axis=0)\n    result = np.concatenate([result, result[:, [1, 0]]], axis=0)\n    result = np.concatenate([result, result[:, [0, 1]]], axis=0)\n    result = np.concatenate([result, result[:, [1, 0]]], axis=0)\n    result = np.concatenate([result, result[:, [0, 1]]], axis=0)\n    result = np.concatenate([result, result[:, [1, 0]]], axis=0)\n    result = np.concatenate([result, result[:, [0, 1]]], axis=0)\n    result = np.concatenate([result, result[:, [1, 0]]], axis=0)\n    result = np.concatenate([result, result[:, [0, 1]]], axis=0)\n    result = np.concatenate([result, result[:, [1, 0]]], axis=0)\n    result = np.concatenate([result, result[:, [0, 1]]], axis=0)\n    result = np.concatenate([result, result[:, [1, 0]]], axis=0)\n    result = np.concatenate([result, result[:, [0, 1]]], axis=0)\n    result = np.concatenate([result, result[:, [1, 0]]], axis=0)\n    result = np.concatenate([result, result[:, [0, 1]]], axis=0)\n    result", "metadata": {"problem_id": 751, "library_problem_id": 40, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 38}}
{"id": 288, "code": "<code>\np_value = stats.ranksums(pre_course_scores, during_course_scores).pvalue\n", "metadata": {"problem_id": 759, "library_problem_id": 48, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"id": 289, "code": "<code>\nresult = M[row, column].toarray().flatten()\n", "metadata": {"problem_id": 770, "library_problem_id": 59, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 58}}
{"id": 290, "code": "<code>\nnew_array = np.zeros((100, 10, 10))\nfor i in range(10):\n    for j in range(10):\n        f = scipy.interpolate.interp1d(x, array[:, i, j])\n        new_array[:, i, j] = f(x_new)\n", "metadata": {"problem_id": 771, "library_problem_id": 60, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 60}}
{"id": 291, "code": "<code>\ndev = abs((x-u)/o2)\nP_inner = scipy.integrate.quad(NDfx,-dev,dev)[0]\nP_outer = 1 - P_inner\nP = P_inner + P_outer/2\nprob = P\n", "metadata": {"problem_id": 772, "library_problem_id": 61, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 292, "code": "\n    dev = abs((x-u)/o2)\n    P_inner = scipy.integrate.quad(NDfx,-dev,dev)[0]\n    P_outer = 1 - P_inner\n    P = P_inner + P_outer/2\n    return(P)\n", "metadata": {"problem_id": 773, "library_problem_id": 62, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 61}}
{"id": 293, "code": "result = sf.dct(np.eye(N), norm='ortho')", "metadata": {"problem_id": 774, "library_problem_id": 63, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 294, "code": "result = sparse.diags(matrix, [-1,0,1], (5, 5)).toarray()\n", "metadata": {"problem_id": 775, "library_problem_id": 64, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 295, "code": "<code>\nresult = np.zeros((N+1, N+1))\nfor i in range(N+1):\n    for j in range(i+1):\n        result[i,j] = scipy.stats.binom.pmf(j, i, p)\n", "metadata": {"problem_id": 776, "library_problem_id": 65, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"id": 296, "code": "result = df.apply(stats.zscore)\n", "metadata": {"problem_id": 777, "library_problem_id": 66, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"id": 297, "code": "<code>\nresult = scipy.ndimage.zoom(x, shape[0] / x.shape[0], shape[1] / x.shape[1], order=1)\n", "metadata": {"problem_id": 785, "library_problem_id": 74, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Origin", "perturbation_origin_id": 74}}
{"id": 298, "code": "\n<code>\ndef dN1_dt_simple(t, N1):\n    return -100 * N1 + np.sin(t)\nsol = scipy.integrate.solve_ivp(fun=dN1_dt_simple, t_span=time_span, y0=[N0,])\nresult = sol.y\n", "metadata": {"problem_id": 788, "library_problem_id": 77, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 77}}
{"id": 299, "code": "\nfor t in range (4):\n    def const(x):    \n        y=x[t]\n        return y\n    cons.append({'type':'ineq', 'fun': const})\n", "metadata": {"problem_id": 791, "library_problem_id": 80, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 300, "code": "result, error = scipy.integrate.quad(lambda x: 2*x*c, low, high)\n", "metadata": {"problem_id": 794, "library_problem_id": 83, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 83}}
{"id": 301, "code": "<code>\na = (a > 0).astype(int)\n", "metadata": {"problem_id": 801, "library_problem_id": 90, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 302, "code": "<code>\na = np.where(a > 0, 1, 0)\n", "metadata": {"problem_id": 802, "library_problem_id": 91, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 90}}
{"id": 303, "code": "<code>\nresult = scipy.spatial.distance.cdist(centroids, data).argmin(axis=1)\n", "metadata": {"problem_id": 803, "library_problem_id": 92, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 92}}
{"id": 304, "code": "<code>\nresult = [scipy.spatial.distance.cdist(data[np.where(cluster_labels == i)], [centroids[i]]).argmin() for i in range(len(centroids))]\n", "metadata": {"problem_id": 805, "library_problem_id": 94, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 92}}
{"id": 305, "code": "result = np.array([fsolve(eqn, x0=0.5, args=(a, b)) for a, b in zip(adata, xdata)])\n", "metadata": {"problem_id": 807, "library_problem_id": 96, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 95}}
{"id": 306, "code": "integral_df = df.set_index('Time').A.rolling('25S').apply(integrate.trapz)\n", "metadata": {"problem_id": 810, "library_problem_id": 99, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 99}}
{"id": 307, "code": "weights = sciopt.fmin(lambda x: -np.sum(a['A1']*np.log(x)), np.ones(a['A1'].max()+1)/(a['A1'].max()+1))\n", "metadata": {"problem_id": 812, "library_problem_id": 101, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 101}}
{"id": 308, "code": "result = sciopt.fminbound(e, pmin, pmax, args=(x,y))\n", "metadata": {"problem_id": 813, "library_problem_id": 102, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 102}}
{"id": 309, "code": "<code>\ndata1 = pd.DataFrame(data.data, columns=data.feature_names)\ndata1['target'] = data.target\n", "metadata": {"problem_id": 817, "library_problem_id": 0, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 310, "code": "<code>\ndata1 = pd.DataFrame(data.data, columns=data.feature_names)\ndata1['target'] = data.target\n", "metadata": {"problem_id": 818, "library_problem_id": 1, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 311, "code": "<code>\ndf_out = df.join(df.pop('Col3').apply(pd.Series).stack().str.get_dummies()).fillna(0)\n", "metadata": {"problem_id": 821, "library_problem_id": 4, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 312, "code": "<code>\ndf_out = df.join(pd.get_dummies(df['Col3'].apply(pd.Series).stack()).sum(level=0))\ndf_out = df_out.drop('Col3', axis=1)\ndf_out = df_out.fillna(0)\n", "metadata": {"problem_id": 822, "library_problem_id": 5, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 313, "code": "<code>\ndf_out = df.join(df.pop('Col3').apply(pd.Series).stack().str.get_dummies()).fillna(0)\n", "metadata": {"problem_id": 824, "library_problem_id": 7, "library": "Sklearn", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 314, "code": "<code>\ndf_out = df.join(df.pop('Col3').apply(pd.Series).stack().str.get_dummies().sum(level=0))\ndf_out = df_out.join(df_out.pop('Col3').apply(pd.Series).stack().str.get_dummies().sum(level=0))\ndf_out = df_out.join(df_out.pop('Col3').apply(pd.Series).stack().str.get_dummies().sum(level=0))\n", "metadata": {"problem_id": 825, "library_problem_id": 8, "library": "Sklearn", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 315, "code": "<code>\nproba = model.fit(X, y).predict_proba(x_predict)\n", "metadata": {"problem_id": 827, "library_problem_id": 10, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 316, "code": "<code>\ndf = pd.concat([df_origin, pd.DataFrame(transform_output.toarray(), columns=transform_output.columns)], axis=1)\n", "metadata": {"problem_id": 828, "library_problem_id": 11, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"id": 317, "code": "<code>\ndf = pd.concat([df_origin, pd.DataFrame(transform_output.toarray(), columns=['col' + str(i) for i in range(transform_output.shape[1])])], axis=1)\n", "metadata": {"problem_id": 829, "library_problem_id": 12, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 318, "code": "\n<code>\nclf.steps.remove(('poly', PolynomialFeatures()))\n", "metadata": {"problem_id": 831, "library_problem_id": 14, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 14}}
{"id": 319, "code": "\n<code>\nsteps = clf.named_steps\nsteps.pop('pOly')\n", "metadata": {"problem_id": 833, "library_problem_id": 16, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 14}}
{"id": 320, "code": "\n<code>\nsteps = clf.named_steps\nsteps.insert(1, ('poly', PolynomialFeatures()))\nclf = Pipeline(steps)\n", "metadata": {"problem_id": 834, "library_problem_id": 17, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"id": 321, "code": "<code>\nproba = []\nfor train_index, test_index in cv:\n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n    logreg.fit(X_train, y_train)\n    proba.append(logreg.predict_proba(X_test))\nproba = np.concatenate(proba)\n", "metadata": {"problem_id": 840, "library_problem_id": 23, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 22}}
{"id": 322, "code": "<code>\ninversed = scaler.inverse_transform(scaled)\n", "metadata": {"problem_id": 841, "library_problem_id": 24, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 24}}
{"id": 323, "code": "<code>\nmodel_name = model.__class__.__name__\n", "metadata": {"problem_id": 844, "library_problem_id": 27, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 26}}
{"id": 324, "code": "<code>\ntf_idf_out = pipe.named_steps[\"tf_idf\"].fit_transform(data.test)\n", "metadata": {"problem_id": 847, "library_problem_id": 30, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 29}}
{"id": 325, "code": "\n<code>\nclf = GridSearchCV(bc, param_grid, cv=5)\nclf.fit(X_train, y_train)\nproba = clf.predict_proba(X_test)\n", "metadata": {"problem_id": 849, "library_problem_id": 32, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 326, "code": "\n<code>\nregressor = RandomForestRegressor(n_estimators=150, min_samples_split=1.0, random_state=42)\npredict = regressor.fit(X, y).predict(X_test)\n", "metadata": {"problem_id": 851, "library_problem_id": 34, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 33}}
{"id": 327, "code": "\n<code>\ntfidf = TfidfVectorizer(preprocessor=preprocess)\n", "metadata": {"problem_id": 852, "library_problem_id": 35, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Origin", "perturbation_origin_id": 35}}
{"id": 328, "code": "<code>\ncoef = grid.best_estimator_.named_steps['model'].coef_\n", "metadata": {"problem_id": 856, "library_problem_id": 39, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 329, "code": "<code>\ncoef = grid.best_estimator_.named_steps['model'].coef_\n", "metadata": {"problem_id": 857, "library_problem_id": 40, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 39}}
{"id": 330, "code": "<code>\ncolumn_names = X.columns[model.get_support()]\n", "metadata": {"problem_id": 858, "library_problem_id": 41, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"id": 331, "code": "<code>\ncolumn_names = X.columns[model.get_support()]\n", "metadata": {"problem_id": 860, "library_problem_id": 43, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 41}}
{"id": 332, "code": "<code>\nclosest_50_samples = X[np.argsort(np.linalg.norm(X - km.cluster_centers_[p], axis=1))[:50]]\n", "metadata": {"problem_id": 862, "library_problem_id": 45, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 45}}
{"id": 333, "code": "<code>\nclosest_100_samples = X[np.argsort(np.linalg.norm(X - km.cluster_centers_[p], axis=1))[:100]]\n", "metadata": {"problem_id": 864, "library_problem_id": 47, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 334, "code": "\n    samples = X[km.labels_ == km.cluster_centers_[p].argmin()]\n    return samples\n", "metadata": {"problem_id": 865, "library_problem_id": 48, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 335, "code": "<code>\nX_train = pd.get_dummies(X_train[0])\nX_train = pd.concat([X_train, X_train], axis=1)\n", "metadata": {"problem_id": 866, "library_problem_id": 49, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 336, "code": "<code>\nX_train = pd.get_dummies(X_train[0])\nX_train = pd.concat([X_train, X_train.iloc[:, 1:]], axis=1)\n", "metadata": {"problem_id": 867, "library_problem_id": 50, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 49}}
{"id": 337, "code": "<code>\npredict = clf.predict(X)\n", "metadata": {"problem_id": 868, "library_problem_id": 51, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 51}}
{"id": 338, "code": "<code>\npredict = SVR(kernel='poly', degree=2).fit(X, y).predict(X)\n", "metadata": {"problem_id": 870, "library_problem_id": 53, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 51}}
{"id": 339, "code": "<code>\ncosine_similarities_of_queries = tfidf.transform(queries).dot(tfidf.transform(documents).T)\n", "metadata": {"problem_id": 872, "library_problem_id": 55, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 55}}
{"id": 340, "code": "<code>\nnew_f = pd.DataFrame(np.zeros((len(f), max(map(len, f))), dtype=int), columns=[f't{i}' for i in range(1, max(map(len, f)) + 1)])\nfor i, row in enumerate(f):\n    new_f.iloc[i, :len(row)] = 1\n", "metadata": {"problem_id": 876, "library_problem_id": 59, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"id": 341, "code": "<code>\ncluster_labels = sklearn.cluster.AgglomerativeClustering(n_clusters=2, affinity='precomputed', linkage='complete').fit_predict(data_matrix)\n", "metadata": {"problem_id": 880, "library_problem_id": 63, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 342, "code": "<code>\ncluster_labels = sklearn.cluster.AgglomerativeClustering(n_clusters=2).fit_predict(data_matrix)\n", "metadata": {"problem_id": 881, "library_problem_id": 64, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 63}}
{"id": 343, "code": "<code>\ncluster_labels = scipy.cluster.hierarchy.fcluster(scipy.cluster.hierarchy.linkage(data_matrix), 2, criterion='maxclust')\n", "metadata": {"problem_id": 883, "library_problem_id": 66, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"id": 344, "code": "<code>\ncluster_labels = scipy.cluster.hierarchy.fcluster(scipy.cluster.hierarchy.linkage(data_matrix), 2, criterion='maxclust')\n", "metadata": {"problem_id": 884, "library_problem_id": 67, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 66}}
{"id": 345, "code": "<code>\ncentered_scaled_data = sklearn.preprocessing.scale(data)\n", "metadata": {"problem_id": 886, "library_problem_id": 69, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 69}}
{"id": 346, "code": "<code>\ncentered_scaled_data = sklearn.preprocessing.scale(data, with_mean=True, with_std=True)\n", "metadata": {"problem_id": 887, "library_problem_id": 70, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 69}}
{"id": 347, "code": "<code>\nbox_cox_data = sklearn.preprocessing.power_transform(data, method='box-cox')\n", "metadata": {"problem_id": 888, "library_problem_id": 71, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"id": 348, "code": "<code>\nbox_cox_data = sklearn.preprocessing.power_transform(data, method='box-cox')\n", "metadata": {"problem_id": 889, "library_problem_id": 72, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 71}}
{"id": 349, "code": "<code>\nyeo_johnson_data = sklearn.preprocessing.PowerTransformer(method='yeo-johnson').fit_transform(data)\n", "metadata": {"problem_id": 891, "library_problem_id": 74, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 73}}
{"id": 350, "code": "<code>\ntransformed_text = CountVectorizer(token_pattern=r\"(?u)\\b\\w\\w+\\b\", lowercase=False).fit_transform(text)\n", "metadata": {"problem_id": 892, "library_problem_id": 75, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 75}}
{"id": 351, "code": "<code>\nx_train, x_test, y_train, y_test = train_test_split(dataset.iloc[:,:-1], dataset.iloc[:,-1], test_size=0.2, random_state=42)\n", "metadata": {"problem_id": 893, "library_problem_id": 76, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 352, "code": "<code>\nx_train, x_test, y_train, y_test = train_test_split(dataset.iloc[:, :-1], dataset.iloc[:, -1], test_size=0.33, random_state=42)\n", "metadata": {"problem_id": 895, "library_problem_id": 78, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 353, "code": "\n    x = data.iloc[:, :-1]\n    y = data.iloc[:, -1]\n    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n    return x_train, y_train, x_test, y_test\n", "metadata": {"problem_id": 896, "library_problem_id": 79, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 354, "code": "<code>\nlabels = KMeans(n_clusters=2, n_init=10).fit_predict(df['mse'].values.reshape(-1, 1))\n", "metadata": {"problem_id": 897, "library_problem_id": 80, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 355, "code": "<code>\nselected_feature_names = np.asarray(vectorizer.get_feature_names())[featureSelector.get_support()]\n", "metadata": {"problem_id": 900, "library_problem_id": 83, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 82}}
{"id": 356, "code": "<code>\nvectorizer = CountVectorizer(stop_words=\"english\", binary=True, lowercase=False, vocabulary={'Jscript', '.Net', 'TypeScript', 'NodeJS', 'Angular', 'Mongo', 'CSS', 'Python', 'PHP', 'Photoshop', 'Oracle', 'Linux', 'C++', 'Java', 'TeamCity', 'Frontend', 'Backend', 'Full stack', 'UI Design', 'Web', 'Integration', 'Database design', 'UX'})\nfeature_names = vectorizer.get_feature_names()\nX = vectorizer.fit_transform(corpus)\n", "metadata": {"problem_id": 903, "library_problem_id": 86, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 85}}
{"id": 357, "code": "<code>\nvectorizer = CountVectorizer(stop_words=\"english\", binary=True, lowercase=False, vocabulary={'Jscript', '.Net', 'TypeScript', 'SQL', 'NodeJS', 'Angular', 'Mongo', 'CSS', 'Python', 'PHP', 'Photoshop', 'Oracle', 'Linux', 'C++', 'Java', 'TeamCity', 'Frontend', 'Backend', 'Full stack', 'UI Design', 'Web', 'Integration', 'Database design', 'UX'})\nfeature_names = vectorizer.get_feature_names()\nX = vectorizer.fit_transform(corpus)\nX = X.toarray()\nX = X[:, np.argsort(feature_names)]\n", "metadata": {"problem_id": 904, "library_problem_id": 87, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 85}}
{"id": 358, "code": "<code>\nvectorizer = CountVectorizer(stop_words=\"english\", binary=True, lowercase=False, vocabulary={'Jscript', '.Net', 'TypeScript', 'NodeJS', 'Angular', 'Mongo', 'CSS', 'Python', 'PHP', 'Photoshop', 'Oracle', 'Linux', 'C++', 'Java', 'TeamCity', 'Frontend', 'Backend', 'Full stack', 'UI Design', 'Web', 'Integration', 'Database design', 'UX'})\nfeature_names = vectorizer.get_feature_names()\nX = vectorizer.fit_transform(corpus)\nX = X.toarray()\nX = X[:, np.argsort(feature_names)]\n", "metadata": {"problem_id": 905, "library_problem_id": 88, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 85}}
{"id": 359, "code": "<code>\ntransformed_df = df.copy()\ntransformed_df['Sex'] = LabelEncoder().fit_transform(transformed_df['Sex'])\n", "metadata": {"problem_id": 909, "library_problem_id": 92, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 91}}
{"id": 360, "code": "<code>\ntraining_set_score = ElasticNet.score(X_train, y_train)\ntest_set_score = ElasticNet.score(X_test, y_test)\n", "metadata": {"problem_id": 911, "library_problem_id": 94, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 94}}
{"id": 361, "code": "<code>\ntransformed = MinMaxScaler().fit_transform(np_array.reshape(-1, 1)).reshape(np_array.shape)\n", "metadata": {"problem_id": 912, "library_problem_id": 95, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"id": 362, "code": "<code>\ntransformed = MinMaxScaler().fit_transform(np_array.reshape(-1, 1)).reshape(np_array.shape)\n", "metadata": {"problem_id": 913, "library_problem_id": 96, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 95}}
{"id": 363, "code": "<code>\nclose_buy1 = close[:-1]\nm5 = ma_50[:-1]\nm10 = ma_100[:-1]\nma20 = ma_200[:-1]\nb = np.concatenate([close_buy1, m5, m10, ma20], axis=1)\n\npredict = clf.predict(b)\n", "metadata": {"problem_id": 915, "library_problem_id": 98, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 98}}
{"id": 364, "code": "\nnew_X = np.array(X).astype(float)\nclf.fit(new_X, ['2', '3'])\n", "metadata": {"problem_id": 917, "library_problem_id": 100, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Surface", "perturbation_origin_id": 99}}
{"id": 365, "code": "\n<code>\nX = dataframe.iloc[:-1].astype(float)\ny = dataframe.iloc[-1, -1]\nlogReg = LogisticRegression()\nlogReg.fit(X, y)\npredict = logReg.predict(X)\n", "metadata": {"problem_id": 920, "library_problem_id": 103, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 102}}
{"id": 366, "code": "<code>\ntrain_size = 0.2\ntrain_dataframe, test_dataframe = train_test_split(features_dataframe, train_size=train_size)\ntrain_dataframe = train_dataframe.sort_values(by=\"date\")\ntest_dataframe = test_dataframe.sort_values(by=\"date\")\n", "metadata": {"problem_id": 921, "library_problem_id": 104, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 104}}
{"id": 367, "code": "\n    train_size = 0.2\n    train_dataframe, test_dataframe = train_test_split(features_dataframe, train_size=train_size)\n    train_dataframe = train_dataframe.sort_values(by=[\"date\"])\n    test_dataframe = test_dataframe.sort_values(by=[\"date\"])\n    return train_dataframe, test_dataframe\n", "metadata": {"problem_id": 923, "library_problem_id": 106, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"id": 368, "code": "cols = df.columns[2:4]\ndf[cols + '_scale'] = df.groupby('Month')[cols].apply(lambda x: scaler.fit_transform(x))\n", "metadata": {"problem_id": 924, "library_problem_id": 107, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"id": 369, "code": "<code>\ncols = myData.columns[2:4]\nmyData['new_' + cols] = myData.groupby('Month')[cols].apply(lambda x: scaler.fit_transform(x))\n", "metadata": {"problem_id": 925, "library_problem_id": 108, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 107}}
{"id": 370, "code": "<code>\nfull_results = pd.DataFrame(GridSearch_fitted.cv_results_)\nfull_results.sort_values(by='mean_fit_time', ascending=False)\n", "metadata": {"problem_id": 929, "library_problem_id": 112, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 111}}
{"id": 371, "code": "<code>\ntfidf_matrix = tfidf.fit_transform(df['description'])\ncosine_similarity_matrix = cosine_similarity(tfidf_matrix)\n", "metadata": {"problem_id": 931, "library_problem_id": 114, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"id": 372, "code": "\n<code>\noptim.param_groups[0]['lr'] = 0.001\n", "metadata": {"problem_id": 932, "library_problem_id": 0, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 373, "code": "\n<code>\noptim.param_groups[0]['lr'] = 0.0005\n", "metadata": {"problem_id": 934, "library_problem_id": 2, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 374, "code": "\n<code>\noptim.param_groups[0]['lr'] = 0.05\n", "metadata": {"problem_id": 935, "library_problem_id": 3, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"id": 375, "code": "embedded_input = torch.tensor(word2vec.wv[input_Tensor])\n", "metadata": {"problem_id": 936, "library_problem_id": 4, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 376, "code": "<code>\npx = pd.DataFrame(x.numpy())\n", "metadata": {"problem_id": 938, "library_problem_id": 6, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 6}}
{"id": 377, "code": "<code>\npx = pd.DataFrame(x.numpy())\n", "metadata": {"problem_id": 939, "library_problem_id": 7, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 6}}
{"id": 378, "code": "<code>\npx = pd.DataFrame(x.numpy())\n", "metadata": {"problem_id": 940, "library_problem_id": 8, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 6}}
{"id": 379, "code": "<code>\nx_tensor = torch.tensor(x_array)\n", "metadata": {"problem_id": 949, "library_problem_id": 17, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 16}}
{"id": 380, "code": "<code>\nmask = torch.zeros(len(lens), max(lens), dtype=torch.long)\nfor i, l in enumerate(lens):\n    mask[i, :l] = 1\n", "metadata": {"problem_id": 952, "library_problem_id": 20, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 19}}
{"id": 381, "code": "\n    result = torch.diag_embed(t)\n    ### END SOLUTION\n    return result\n", "metadata": {"problem_id": 956, "library_problem_id": 24, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 23}}
{"id": 382, "code": "\n    if a.shape[0] == 2:\n        ab = torch.stack((a, b), 0)\n    else:\n        ab = torch.stack((a, b), 0).repeat(2, 1, 1)\n    return ab\n", "metadata": {"problem_id": 959, "library_problem_id": 27, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 25}}
{"id": 383, "code": "<code>\na[ : , lengths : , : ]  = 0\n", "metadata": {"problem_id": 960, "library_problem_id": 28, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"id": 384, "code": "<code>\na[ : , : lengths , : ]  = 0\n", "metadata": {"problem_id": 962, "library_problem_id": 30, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 28}}
{"id": 385, "code": "<code>\nnew_tensors = torch.stack(list)\n", "metadata": {"problem_id": 965, "library_problem_id": 33, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 386, "code": "\n    tt = torch.tensor(lt)\n    return tt\n", "metadata": {"problem_id": 966, "library_problem_id": 34, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 387, "code": "<code>\ntensor_of_tensors = torch.stack(list_of_tensors)\n", "metadata": {"problem_id": 967, "library_problem_id": 35, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 32}}
{"id": 388, "code": "<code>\nresult = t[idx, 1 - idx]\n", "metadata": {"problem_id": 970, "library_problem_id": 38, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"id": 389, "code": "<code>\nresult = x.gather(1, ids.unsqueeze(1)).squeeze(1)\n", "metadata": {"problem_id": 971, "library_problem_id": 39, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 390, "code": "<code>\ncnt_equal = (A == B).sum()\n", "metadata": {"problem_id": 980, "library_problem_id": 48, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"id": 391, "code": "<code>\ncnt_equal = (A == B).sum()\n", "metadata": {"problem_id": 981, "library_problem_id": 49, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 48}}
{"id": 392, "code": "<code>\ncnt_equal = torch.sum(A[:x] == B[:x])\n", "metadata": {"problem_id": 984, "library_problem_id": 52, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 48}}
{"id": 393, "code": "\ntensors_31 = torch.chunk(a, 31, dim=3)\n", "metadata": {"problem_id": 986, "library_problem_id": 54, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 394, "code": "<code>\noutput[mask == 1] = clean_input_spectrogram[mask == 1]\n", "metadata": {"problem_id": 988, "library_problem_id": 56, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 56}}
{"id": 395, "code": "\n    sign_x = torch.sign(x)\n    sign_y = torch.sign(y)\n    min = torch.min(torch.abs(x), torch.abs(y))\n    signed_min = torch.where(torch.abs(x) < torch.abs(y), sign_x * min, sign_y * min)\n    return signed_min\n", "metadata": {"problem_id": 992, "library_problem_id": 60, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"id": 396, "code": "confidence_score = torch.softmax(output, dim=1)\n", "metadata": {"problem_id": 993, "library_problem_id": 61, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 397, "code": "<code>\nresult = torch.cat([a, b[:, 1:]], dim=1)\nresult[:, 1] = (a[:, 2] + b[:, 0]) / 2\n", "metadata": {"problem_id": 994, "library_problem_id": 62, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"id": 398, "code": "<code>\nresult = torch.cat([t, torch.zeros(1, 1, 4)], dim=1)\nresult = torch.cat([result, torch.zeros(1, 1, 4)], dim=1)\nresult = torch.cat([result, torch.zeros(1, 1, 4)], dim=1)\nresult = torch.cat([result, torch.zeros(1, 1, 4)], dim=1)\n", "metadata": {"problem_id": 997, "library_problem_id": 65, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 64}}
{"id": 399, "code": "<code>\nresult = torch.cat([t, torch.ones(1, 1, 4, 1) * -1], dim=2)\n", "metadata": {"problem_id": 998, "library_problem_id": 66, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 64}}
