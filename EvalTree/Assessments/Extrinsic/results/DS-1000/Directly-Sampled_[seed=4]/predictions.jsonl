{"id": 0, "code": "\nresult = df.iloc[List]\n", "metadata": {"problem_id": 0, "library_problem_id": 0, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 1, "code": "\nresult = df.iloc[List].reset_index(drop=True)\n", "metadata": {"problem_id": 1, "library_problem_id": 1, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"id": 2, "code": "\nresult = df.apply(lambda col: col.where(col.isin(col.value_counts()[col.value_counts() >= 2].index), 'other'))\n", "metadata": {"problem_id": 2, "library_problem_id": 2, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 2}}
{"id": 3, "code": "\nresult = df.apply(lambda col: col.where(col.map(col.value_counts()).ge(3), 'other'))\n", "metadata": {"problem_id": 3, "library_problem_id": 3, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 2}}
{"id": 4, "code": "\n<code>\n    df['datetime'] = df['datetime'].dt.tz_localize(None)\n    return df\n", "metadata": {"problem_id": 12, "library_problem_id": 12, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 5, "code": "\ndf['datetime'] = df['datetime'].dt.tz_localize(None)\ndf['datetime'] = df['datetime'].dt.strftime('%d-%b-%Y %H:%M:%S')\ndf = df.sort_values('datetime')\n", "metadata": {"problem_id": 13, "library_problem_id": 13, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 11}}
{"id": 6, "code": "\ndf['datetime'] = df['datetime'].dt.tz_localize(None)\ndf = df.sort_values('datetime')\n", "metadata": {"problem_id": 14, "library_problem_id": 14, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 11}}
{"id": 7, "code": "\nresult = pd.concat([df.drop('message', axis=1),\n                      df['message'].apply(lambda x: pd.Series(x[1:-1].split(', '))\n                                            .str.split(': ').apply(lambda x: x[1] if len(x) > 1 else 'none'))],\n                      axis=1)\nresult.columns = ['name', 'status', 'number', 'job', 'money', 'wife', 'group', 'kids']\n", "metadata": {"problem_id": 15, "library_problem_id": 15, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 15}}
{"id": 8, "code": "\ndf.loc[df['product'].isin(products), 'score'] *= 10\n", "metadata": {"problem_id": 16, "library_problem_id": 16, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 9, "code": "\ndf.loc[df['product'].isin(products), 'score'] = (df.loc[df['product'].isin(products), 'score'] - df['score'].min()) / (df['score'].max() - df['score'].min())\n", "metadata": {"problem_id": 19, "library_problem_id": 19, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"id": 10, "code": "\ndf['category'] = df.apply(lambda row: [col for col, val in row.items() if val == 1], axis=1)\n", "metadata": {"problem_id": 22, "library_problem_id": 22, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 20}}
{"id": 11, "code": "\ndf['Date'] = df['Date'].dt.strftime('%b-%Y')\n", "metadata": {"problem_id": 23, "library_problem_id": 23, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 23}}
{"id": 12, "code": "\ndf = df.shift(1, axis=0)\ndf.iloc[-1, 0] = df.iloc[0, 0]\ndf = df.dropna()\n", "metadata": {"problem_id": 27, "library_problem_id": 27, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 26}}
{"id": 13, "code": "\ndf.columns = [f\"X{col}{'X' if col != 'HeaderX' else ''}\" for col in df.columns]\n", "metadata": {"problem_id": 32, "library_problem_id": 32, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 30}}
{"id": 14, "code": "\nresult = df.groupby('group').agg({\"group_color\": \"first\", **{col: \"mean\" for col in df.columns if col.startswith('val')}})\n", "metadata": {"problem_id": 33, "library_problem_id": 33, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 33}}
{"id": 15, "code": "\nresult = df.loc[row_list, column_list].sum(axis=0)\n", "metadata": {"problem_id": 37, "library_problem_id": 37, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"id": 16, "code": "\nresult = df.apply(pd.Series.value_counts).fillna(0).stack().astype(float).sum(level=0)\n", "metadata": {"problem_id": 39, "library_problem_id": 39, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 17, "code": "\nresult = df.isnull().sum()\n", "metadata": {"problem_id": 40, "library_problem_id": 40, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 39}}
{"id": 18, "code": "\nresult = df.apply(pd.Series.value_counts).fillna(0).astype(int)\n", "metadata": {"problem_id": 41, "library_problem_id": 41, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 39}}
{"id": 19, "code": "\nresult = df.iloc[0].combine_first(df.iloc[1]).to_frame().T.append(df.iloc[2:])\n", "metadata": {"problem_id": 43, "library_problem_id": 43, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 20, "code": "\nresult = df.sort_index(ascending=False)\n", "metadata": {"problem_id": 46, "library_problem_id": 46, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 44}}
{"id": 21, "code": "\nresult = df.loc[df['value'] < thresh].sum().to_frame().T.append(df.loc[df['value'] >= thresh])\n", "metadata": {"problem_id": 47, "library_problem_id": 47, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 22, "code": "\nresult = df.copy()\nfor col in df.columns:\n    result[f\"exp_{col}\"] = df[col].apply(lambda x: np.exp(x))\n", "metadata": {"problem_id": 51, "library_problem_id": 51, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 50}}
{"id": 23, "code": "\nresult = df.groupby('user').apply(lambda x: pd.date_range(x['dt'].min(), x['dt'].max(), freq='D')).explode().reset_index(drop=True)\nresult['val'] = result.groupby('user')['val'].transform('max')\n", "metadata": {"problem_id": 59, "library_problem_id": 59, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 56}}
{"id": 24, "code": "\nresult = df.groupby('name').ngroup().add(1).astype(int).rename('a')\n", "metadata": {"problem_id": 62, "library_problem_id": 62, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 61}}
{"id": 25, "code": "\n<code>\n    df['name'] = df['name'].astype('category').cat.codes\n    return df\n", "metadata": {"problem_id": 63, "library_problem_id": 63, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 61}}
{"id": 26, "code": "\nresult = df.assign(ID=df.groupby(['name', 'a']).ngroup() + 1)\nresult = result.drop(['name', 'a'], axis=1)\n", "metadata": {"problem_id": 64, "library_problem_id": 64, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 61}}
{"id": 27, "code": "\ndf = df.melt(id_vars=['user', 'someBool'], var_name='date', value_name='value')\ndf = df.dropna()\n", "metadata": {"problem_id": 65, "library_problem_id": 65, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"id": 28, "code": "\n<code>\n    return df[df['c'] > 0.5][columns]\n", "metadata": {"problem_id": 70, "library_problem_id": 70, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 29, "code": "\n<code>\n    result = df[df['c'] > 0.5][columns]\n    result['sum'] = result.sum(axis=1)\n    return result\n", "metadata": {"problem_id": 71, "library_problem_id": 71, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 30, "code": "\nresult = df.drop_duplicates(subset='date', keep='first')\nresult = result[result['date'].apply(lambda x: pd.to_datetime(x, format='%m/%d/%y') + pd.Timedelta(days=X)) < pd.to_datetime(df['date'].max(), format='%m/%d/%y')]\n", "metadata": {"problem_id": 73, "library_problem_id": 73, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 73}}
{"id": 31, "code": "\nresult = df.drop_duplicates(subset='date', keep='first')\nresult = result[result['date'].apply(lambda x: pd.to_datetime(x, format='%m/%d/%y') + pd.DateOffset(weeks=X)) > pd.Timestamp.now()]\n", "metadata": {"problem_id": 75, "library_problem_id": 75, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 73}}
{"id": 32, "code": "\nresult = df.groupby(df.index // 3).agg({'col1': ['sum', 'mean']}).unstack().fillna(method='ffill').stack().reset_index(level=1, drop=True)\n", "metadata": {"problem_id": 80, "library_problem_id": 80, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 76}}
{"id": 33, "code": "\ndf['A'] = df['A'].fillna(method='ffill')\n", "metadata": {"problem_id": 82, "library_problem_id": 82, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 34, "code": "\ndf['A'] = df['A'].fillna(method='bfill').fillna(method='ffill')\n", "metadata": {"problem_id": 83, "library_problem_id": 83, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 82}}
{"id": 35, "code": "\ndf['A'] = df['A'].fillna(df['A'].replace(0, method='ffill').replace(0, method='bfill'))\n", "metadata": {"problem_id": 84, "library_problem_id": 84, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 36, "code": "\ndf['number'] = df['duration'].str.extract(r'(\\d+)')\ndf['time'] = df['duration'].str.extract(r'(\\w+)')\n\ntime_days_mapping = {'year': 365, 'month': 30, 'week': 7, 'day': 1}\ndf['time_days'] = df['time'].map(time_days_mapping)\n", "metadata": {"problem_id": 85, "library_problem_id": 85, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 37, "code": "\ndf.index = df.index.set_levels(pd.to_datetime(df.index.levels[1]), level=1)\n", "metadata": {"problem_id": 91, "library_problem_id": 91, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 91}}
{"id": 38, "code": "\n<code>\n    df.index = pd.to_datetime(df.index)\n    return df.values\n", "metadata": {"problem_id": 93, "library_problem_id": 93, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 91}}
{"id": 39, "code": "\ndf = pd.melt(df, id_vars=['Country', 'Variable'], var_name='year', value_name='value')\ndf['year'] = df['year'].astype(int)\n", "metadata": {"problem_id": 95, "library_problem_id": 95, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"id": 40, "code": "\ndf = df.loc[df.iloc[:, 2:].abs().lt(1).all(axis=1)]\n", "metadata": {"problem_id": 97, "library_problem_id": 97, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"id": 41, "code": "\ndf.replace(r'&AMP;', '&', regex=True, inplace=True)\n", "metadata": {"problem_id": 100, "library_problem_id": 100, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 100}}
{"id": 42, "code": "\ndf.replace('&lt;', '<', regex=True, inplace=True)\n", "metadata": {"problem_id": 101, "library_problem_id": 101, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 100}}
{"id": 43, "code": "\n<code>\n    df.replace('&AMP;', '&', regex=True, inplace=True)\n    return df\n", "metadata": {"problem_id": 102, "library_problem_id": 102, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 100}}
{"id": 44, "code": "\ndf.replace({'&AMP;': '&', '&LT;': '<', '&GT;': '>'}, regex=True, inplace=True)\n", "metadata": {"problem_id": 103, "library_problem_id": 103, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 100}}
{"id": 45, "code": "\ndf['state'] = df.apply(lambda row: row['col1'] if row['col2'] > 50 and row['col3'] > 50 else row['col1'] + row['col2'] + row['col3'], axis=1)\n", "metadata": {"problem_id": 111, "library_problem_id": 111, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 110}}
{"id": 46, "code": "\nresult = df.loc[test]\n", "metadata": {"problem_id": 117, "library_problem_id": 117, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 117}}
{"id": 47, "code": "\nresult = df.loc[test]\n", "metadata": {"problem_id": 118, "library_problem_id": 118, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 117}}
{"id": 48, "code": "\nresult = df.drop(test)", "metadata": {"problem_id": 119, "library_problem_id": 119, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 117}}
{"id": 49, "code": "\n<code>\n    return df.loc[test]\n", "metadata": {"problem_id": 120, "library_problem_id": 120, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 117}}
{"id": 50, "code": "\ndf2 = df.merge(df.drop('car', axis=1), on='time', suffixes=('', '_neighbour'))\ndf2 = df2[df2['car'] != df2['car_neighbour']]\ndf2['euclidean_distance'] = ((df2['x'] - df2['x_neighbour']) ** 2 + (df2['y'] - df2['y_neighbour']) ** 2) ** 0.5\ndf2 = df2.groupby('time').apply(lambda x: x.nsmallest(1, 'euclidean_distance')).reset_index(drop=True)\n", "metadata": {"problem_id": 121, "library_problem_id": 121, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 121}}
{"id": 51, "code": "\ndf['euclidean_distance'] = df.groupby('time')['x', 'y'].apply(lambda x: np.sqrt(((x - x.shift())**2).sum(axis=1)))\ndf['farmost_neighbour'] = df.groupby('time')['euclidean_distance'].idxmax()\ndf = df.drop('euclidean<code>", "metadata": {"problem_id": 122, "library_problem_id": 122, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 52, "code": "\ndf['keywords_all'] = df.apply(lambda row: '-'.join(row[col] for col in df.columns[1:] if not pd.isna(row[col])), axis=1)\n", "metadata": {"problem_id": 126, "library_problem_id": 126, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 53, "code": "\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>", "metadata": {"problem_id": 127, "library_problem_id": 127, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 127}}
{"id": 54, "code": "\nresult = df.assign(index_original=df.index[df.duplicated(subset=['col1', 'col2', '3col'], keep='first')])\n", "metadata": {"problem_id": 133, "library_problem_id": 133, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 130}}
{"id": 55, "code": "\nresult = df.loc[df.groupby(['Sp', 'Mt'])['count'].idxmax()]\n", "metadata": {"problem_id": 135, "library_problem_id": 135, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 135}}
{"id": 56, "code": "\nresult = df.loc[df.groupby(['Sp', 'Mt'])['count'].idxmax()]\n", "metadata": {"problem_id": 136, "library_problem_id": 136, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 135}}
{"id": 57, "code": "\nresult = df.loc[df.groupby(['Sp', 'Value'])['count'].idxmax()]\n", "metadata": {"problem_id": 138, "library_problem_id": 138, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 135}}
{"id": 58, "code": "\nresult = df.melt(value_vars=[(col1, col2, col3) for col1, col2, col3 in zip(df.columns[0], df.columns[1], df.columns[2])])\nresult.columns = ['variable_0', 'variable_1', 'variable_2', 'value']\n", "metadata": {"problem_id": 142, "library_problem_id": 142, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 141}}
{"id": 59, "code": "\ndf['cumsum'] = df.groupby('id')['val'].cumsum()\n", "metadata": {"problem_id": 143, "library_problem_id": 143, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 143}}
{"id": 60, "code": "\ndf['cumsum'] = df.groupby('id')['val'].cumsum()\n", "metadata": {"problem_id": 145, "library_problem_id": 145, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 143}}
{"id": 61, "code": "\nresult = df.groupby('r')['v'].sum(skipna=False)\n", "metadata": {"problem_id": 149, "library_problem_id": 149, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 148}}
{"id": 62, "code": "\nresult = df.groupby('l')['v'].apply(lambda x: x.sum(skipna=False))\n", "metadata": {"problem_id": 150, "library_problem_id": 150, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 148}}
{"id": 63, "code": "\nresult = df.corr().applymap(lambda x: 'one-to-one' if x == 1 else 'one-to-many' if x == -1 else 'many-to-one' if x == 0 else 'many-to-many')\nresult.iloc[:, :] = result.iloc[:, :].mask(result.iloc[:, :] == result.iloc[:, :].iloc[0, :], '')\n", "metadata": {"problem_id": 153, "library_problem_id": 153, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"id": 64, "code": "\nresult = df.groupby((df['SibSp'] > 0) | (df['Parch'] > 0)).mean()['Survived']\n", "metadata": {"problem_id": 157, "library_problem_id": 157, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 157}}
{"id": 65, "code": "\nresult = df.groupby((df['Survived'] > 0) | (df['Parch'] > 0)).mean()['SibSp']\n", "metadata": {"problem_id": 158, "library_problem_id": 158, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 157}}
{"id": 66, "code": "\nresult = df.groupby('cokey').apply(lambda x: x.sort_values('A'))\n", "metadata": {"problem_id": 161, "library_problem_id": 161, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 160}}
{"id": 67, "code": "\ndf.columns = pd.MultiIndex.from_tuples(df.columns)\ndf = df.stack().unstack(level=0)\n", "metadata": {"problem_id": 162, "library_problem_id": 162, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 162}}
{"id": 68, "code": "\ndf.columns = pd.MultiIndex.from_tuples(df.columns)\ndf = df.stack(level=0).swaplevel(0, 1).sort_index()\ndf.columns = pd.MultiIndex.from_product([['Caps', 'Middle', 'Lower'], df.columns.levels[1]])\n", "metadata": {"problem_id": 163, "library_problem_id": 163, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 162}}
{"id": 69, "code": "\nresult = pd.DataFrame({'birdType': someTuple[0], 'birdCount': someTuple[1]})\n", "metadata": {"problem_id": 165, "library_problem_id": 165, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 165}}
{"id": 70, "code": "\nresult = df.loc[df.sum(axis=1) != 0, df.columns[df.sum(axis=0) != 0]]\n", "metadata": {"problem_id": 169, "library_problem_id": 169, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 169}}
{"id": 71, "code": "\nresult = s.sort_values(ascending=False).sort_index()", "metadata": {"problem_id": 173, "library_problem_id": 173, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 173}}
{"id": 72, "code": "\ndf = s.sort_values(ascending=False).reset_index().rename(columns={'index': 'index', 0: '1'})\n", "metadata": {"problem_id": 174, "library_problem_id": 174, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 173}}
{"id": 73, "code": "\nresult = df.loc[df.groupby(['Sp', 'Mt'])['count'].idxmin()]\n", "metadata": {"problem_id": 179, "library_problem_id": 179, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 177}}
{"id": 74, "code": "\ndf['Date'] = df['Member'].map(dict).fillna(df['Date'])\n", "metadata": {"problem_id": 182, "library_problem_id": 182, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 181}}
{"id": 75, "code": "\ndf['Date'] = df['Member'].map(dict).fillna(df['Date'])\ndf['Date'] = pd.to_datetime(df['Date'], format='%m/%d/%Y').dt.strftime('%d-%b-%Y')\n", "metadata": {"problem_id": 184, "library_problem_id": 184, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 181}}
{"id": 76, "code": "\ndf['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%y')\ndf['Count_d'] = df.groupby('Date').Date.transform('size')\ndf['Count_m'] = df.groupby([df['Date'].dt.year, df['Date'].dt.month]).Date.transform('size')\ndf['Count_y'] = df.groupby(df['Date'].dt.year).Date.transform('size')\ndf['Count_Val'] = df.groupby(['Date', 'Val']).Date.transform('size')\ndf = df.drop_duplicates()\n", "metadata": {"problem_id": 186, "library_problem_id": 186, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 185}}
{"id": 77, "code": "\nresult1 = df.groupby('Date').agg(zero=('B', lambda x: x.eq(0).sum()),\n                                    non_zero=('B', lambda x: x.ne(0).sum()))\n\nresult2 = df.groupby('Date').agg(zero=('C', lambda x: x.eq(0).sum()),\n                                    non_zero=('C', lambda x: x.ne(0).sum()))\n", "metadata": {"problem_id": 188, "library_problem_id": 188, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 188}}
{"id": 78, "code": "\nresult1 = df.groupby('Date').apply(lambda x: x.select_dtypes(include=['number']).apply(lambda y: y.ne(y % 2).sum()))\nresult2 = df.groupby('Date').apply(lambda x: x.select_dtypes(include=['number']).apply(lambda y: y.eq(y % 2).sum()))\n", "metadata": {"problem_id": 189, "library_problem_id": 189, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 188}}
{"id": 79, "code": "\nresult = pd.pivot_table(df, values=['D', 'E'], index=['B'], aggfunc={'D': np.sum, 'E': np.mean})\n", "metadata": {"problem_id": 191, "library_problem_id": 191, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 190}}
{"id": 80, "code": "\nresult = pd.pivot_table(df, values=['D','E'], rows=['B'], aggfunc={'D': np.sum, 'E': np.mean})\n", "metadata": {"problem_id": 192, "library_problem_id": 192, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 190}}
{"id": 81, "code": "\nresult = pd.pivot_table(df, values=['D', 'E'], index=['B'], aggfunc={'D': np.max, 'E': np.min})\n", "metadata": {"problem_id": 193, "library_problem_id": 193, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 190}}
{"id": 82, "code": "\nresult = df.var2.str.split(',', expand=True).stack().reset_index(level=1, drop=True).reset_index()\nresult.columns = df.columns\n", "metadata": {"problem_id": 194, "library_problem_id": 194, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 194}}
{"id": 83, "code": "\nresult = df.var2.str.split(',', expand=True).stack().reset_index(level=1, drop=True).reset_index(name='var2')\n", "metadata": {"problem_id": 195, "library_problem_id": 195, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 194}}
{"id": 84, "code": "\nresult = df.var2.str.split('-', expand=True).stack().reset_index(level=1, drop=True).reset_index()\n", "metadata": {"problem_id": 196, "library_problem_id": 196, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 194}}
{"id": 85, "code": "\ndf[['fips', 'row']] = df['row'].str.split(' ', n=1, expand=True)\n", "metadata": {"problem_id": 199, "library_problem_id": 199, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 199}}
{"id": 86, "code": "\ndf = df.set_index('Name')\ndf = df.replace(0, np.nan)\ndf = df.cumsum(axis=1)\ndf = df.fillna(method='ffill', axis=1)\ndf = df.div(df.count(axis=1), axis=0)\ndf = df.reset_index()\n", "metadata": {"problem_id": 203, "library_problem_id": 203, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 202}}
{"id": 87, "code": "\n<code>\n    result = df.iloc[:, 1:].apply(lambda x: x.cumsum() / (x.ne(0).cumsum()), axis=1)\n    result['Name'] = df['Name']\n    return result\n", "metadata": {"problem_id": 204, "library_problem_id": 204, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 202}}
{"id": 88, "code": "\ndf['label'] = df['Close'].diff().apply(lambda x: 1 if x > 0 else 0 if x == 0 else -1)\ndf['DateTime'] = df['DateTime'].dt.strftime('%d-%b-%Y')\ndf.loc[0, 'label'] = 1\n", "metadata": {"problem_id": 208, "library_problem_id": 208, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 206}}
{"id": 89, "code": "\ndf['arrival_time'] = pd.to_datetime(df['arrival_time'])\ndf['departure_time'] = pd.to_datetime(df['departure_time'])\n\ndf['Duration'] = df['departure_time'].shift(-1) - df['arrival_time'].shift(1)\ndf.loc[df['arrival_time'] == '0', 'Duration'] = pd.NaT\ndf.loc[df['departure_time'] == '0', 'Duration'] = pd.NaT\n", "metadata": {"problem_id": 209, "library_problem_id": 209, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 209}}
{"id": 90, "code": "\ndf['arrival_time'] = pd.to_datetime(df['arrival_time'])\ndf['departure_time'] = pd.to_datetime(df['departure_time'])\n\ndf['Duration'] = df['departure_time'].shift(-1) - df['arrival_time'].shift(1)\ndf.loc[df['arrival_time'] == '0', 'Duration'] = np.nan\ndf.loc[df['arrival_time'] == '0', 'arrival_time'] = np.nan\ndf.loc[df['departure_time'] == '0', 'departure_time'] = np.nan\ndf['Duration'] = df['Duration'].dt.total_seconds()\n", "metadata": {"problem_id": 210, "library_problem_id": 210, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 209}}
{"id": 91, "code": "\nresult = df.groupby('key1').apply(lambda x: x['key2'].eq('one').sum()).reset_index(name='count')\nresult = result.reindex(columns=['key1', 'count'])\n", "metadata": {"problem_id": 212, "library_problem_id": 212, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 212}}
{"id": 92, "code": "\nmax_result = df.index.max()\nmin_result = df.index.min()\n", "metadata": {"problem_id": 215, "library_problem_id": 215, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 215}}
{"id": 93, "code": "\nresult = df[~(99 <= df['closing_price'] <= 101)]\n", "metadata": {"problem_id": 218, "library_problem_id": 218, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 217}}
{"id": 94, "code": "\ndf['SOURCE_NAME'] = df['SOURCE_NAME'].apply(lambda x: x.split('_')[0] if '_' in x else x)\n", "metadata": {"problem_id": 220, "library_problem_id": 220, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 220}}
{"id": 95, "code": "\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0])\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].iloc[:len(df) // 2].mode()[0], limit=len(df) // 2)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].iloc[len(df) // 2:].mode()[0], limit=len(df) - len(df) // 2)\n", "metadata": {"problem_id": 223, "library_problem_id": 223, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 223}}
{"id": 96, "code": "\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0])\n\nnan_count = df['Column_x'].isna().sum()\n\ndf['Column_x'].loc[df['Column_x'].isna()] = np.where(df['Column_x'].isna().cumsum() <= nan_count * 0.3, 0, np.where(df['Column_x'].isna().cumsum() <= nan_count * 0.6, 0.5, 1))\n", "metadata": {"problem_id": 224, "library_problem_id": 224, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 223}}
{"id": 97, "code": "\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0])\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].value_counts().idxmax())\n", "metadata": {"problem_id": 225, "library_problem_id": 225, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 223}}
{"id": 98, "code": "\nresult = pd.DataFrame([[(a['one'][i], b['one'][i]), (a['two'][i], b['two'][i])] for i in range(len(a))], columns=['one', 'two'])\n", "metadata": {"problem_id": 226, "library_problem_id": 226, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 226}}
{"id": 99, "code": "\nresult = pd.concat([a, b, c], axis=1).apply(tuple, axis=1).to_frame('one_b_c')", "metadata": {"problem_id": 227, "library_problem_id": 227, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 226}}
{"id": 100, "code": "\nresult = pd.concat([a, b], axis=1, join='outer').fillna(np.nan)\nresult = result.apply(lambda x: tuple(x), axis=1).to_frame(name='tuples')", "metadata": {"problem_id": 228, "library_problem_id": 228, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 226}}
{"id": 101, "code": "\nresult = pd.merge(C, D, how='outer', on='A').fillna(C)\n", "metadata": {"problem_id": 241, "library_problem_id": 241, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 240}}
{"id": 102, "code": "\nresult = df.groupby('user')[['time', 'amount']].apply(lambda x: x.values.tolist())\n", "metadata": {"problem_id": 244, "library_problem_id": 244, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 243}}
{"id": 103, "code": "\nresult = df.groupby('user').agg(lambda x: x.tolist()).apply(lambda x: x.sort_values('time', ascending=True), axis=1)\n", "metadata": {"problem_id": 245, "library_problem_id": 245, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 243}}
{"id": 104, "code": "\ndf_concatenated = pd.DataFrame(series.values.tolist(), index=series.index)\n", "metadata": {"problem_id": 247, "library_problem_id": 247, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 246}}
{"id": 105, "code": "\nresult = df.columns[df.columns.str.contains(s) & ~df.columns.str.startswith(s)]\n", "metadata": {"problem_id": 248, "library_problem_id": 248, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 248}}
{"id": 106, "code": "\nresult = df.filter(regex=f'^(?!{s}$).*{s}.*$', axis=1)\n", "metadata": {"problem_id": 249, "library_problem_id": 249, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 248}}
{"id": 107, "code": "\nresult = ','.join(str(item) for sublist in df['col1'] for item in sublist)\n", "metadata": {"problem_id": 256, "library_problem_id": 256, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 254}}
{"id": 108, "code": "\nresult = df[df.index.get_level_values('a').isin(filt[filt].index)]\n", "metadata": {"problem_id": 262, "library_problem_id": 262, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 262}}
{"id": 109, "code": "\nresult = df.iloc[0].where(df.iloc[0].eq(df.iloc[8])).dropna().index\n", "metadata": {"problem_id": 265, "library_problem_id": 265, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 264}}
{"id": 110, "code": "\nresult = df.loc[0].ne(df.loc[8]).where(df.loc[0].notna() | df.loc[8].notna()).fillna(False).index[df.loc[0].ne(df.loc[8]).where(df.loc[0].notna() | df.loc[8].notna()).fillna(False)].tolist()\n", "metadata": {"problem_id": 266, "library_problem_id": 266, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 264}}
{"id": 111, "code": "\nresult = df.sort_values('VIM', kind='stable')\n", "metadata": {"problem_id": 277, "library_problem_id": 277, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 276}}
{"id": 112, "code": "\nresult = corr.unstack().loc[lambda x: x > 0.3]\n", "metadata": {"problem_id": 281, "library_problem_id": 281, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 280}}
{"id": 113, "code": "\nresult = df.rename(columns={df.columns[-1]: 'Test'})\n", "metadata": {"problem_id": 282, "library_problem_id": 282, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 282}}
{"id": 114, "code": "\ndf['frequent'] = df.mode(axis=1)[0]\ndf['freq_count'] = df.apply(lambda row: row.value_counts().max(), axis=1)\n", "metadata": {"problem_id": 285, "library_problem_id": 285, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 284}}
{"id": 115, "code": "\ndf['frequent'] = df.apply(lambda row: row.value_counts().index.tolist(), axis=1)\ndf['freq_count'] = df.apply(lambda row: row.value_counts().max(), axis=1)\n", "metadata": {"problem_id": 286, "library_problem_id": 286, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 284}}
{"id": 116, "code": "\nresult = df.groupby([\"id1\", \"id2\"]).agg({\"foo\": \"mean\", \"bar\": \"mean\"})\n", "metadata": {"problem_id": 287, "library_problem_id": 287, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 287}}
{"id": 117, "code": "\nresult = df.groupby([\"id1\", \"id2\"]).agg({\"foo\": \"mean\", \"bar\": lambda x: x.fillna(0).mean()})\n", "metadata": {"problem_id": 288, "library_problem_id": 288, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 287}}
{"id": 118, "code": "\nresult = x[~np.isnan(x).any(axis=1)].tolist()", "metadata": {"problem_id": 294, "library_problem_id": 3, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 1}}
{"id": 119, "code": "\nb = np.eye(a.max() - a.min() + 1)[a - a.min()]\n", "metadata": {"problem_id": 297, "library_problem_id": 6, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 120, "code": "\nb = np.eye(len(a))[np.argsort(a)]", "metadata": {"problem_id": 298, "library_problem_id": 7, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 121, "code": "\nr = np.random.randint(3, size=(100, 2000)) - 1\nr_old = r.copy()\nr_new = r.copy()\n", "metadata": {"problem_id": 308, "library_problem_id": 17, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"id": 122, "code": "\nresult = np.unravel_index(np.argmax(a), a.shape)", "metadata": {"problem_id": 309, "library_problem_id": 18, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 18}}
{"id": 123, "code": "\nresult = np.unravel_index(np.argmin(a), a.shape)", "metadata": {"problem_id": 310, "library_problem_id": 19, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 124, "code": "\nresult = np.array(a)\n", "metadata": {"problem_id": 317, "library_problem_id": 26, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 125, "code": "\na = a[:, permutation]", "metadata": {"problem_id": 318, "library_problem_id": 27, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 27}}
{"id": 126, "code": "\nresult = a[permutation]\n", "metadata": {"problem_id": 319, "library_problem_id": 28, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 27}}
{"id": 127, "code": "\nresult = np.stack(np.unravel_index(np.argmin(a, axis=None), a.shape), axis=-1)\n", "metadata": {"problem_id": 322, "library_problem_id": 31, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 29}}
{"id": 128, "code": "\nresult = np.sin(np.deg2rad(degree))\n", "metadata": {"problem_id": 323, "library_problem_id": 32, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 129, "code": "\nresult = np.cos(np.deg2rad(degree))\n", "metadata": {"problem_id": 324, "library_problem_id": 33, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 130, "code": "\nresult = np.pad(A, (0, length - len(A)), mode='constant', constant_values=0)", "metadata": {"problem_id": 327, "library_problem_id": 36, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 131, "code": "\n    gcd = np.gcd(numerator, denominator)\n    return (numerator // gcd, denominator // gcd)\n", "metadata": {"problem_id": 332, "library_problem_id": 41, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 40}}
{"id": 132, "code": "\nresult = np.nan if denominator == 0 else (numerator // np.gcd(numerator, denominator), denominator // np.gcd(numerator, denominator))", "metadata": {"problem_id": 333, "library_problem_id": 42, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 40}}
{"id": 133, "code": "\nresult = a[np.arange(a.shape[0]), np.arange(a.shape[1])[::-1]]\n", "metadata": {"problem_id": 338, "library_problem_id": 47, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 45}}
{"id": 134, "code": "\nresult = [item for row in X for item in row]", "metadata": {"problem_id": 340, "library_problem_id": 49, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 135, "code": "\nresult = X.flatten('C')\n", "metadata": {"problem_id": 341, "library_problem_id": 50, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 49}}
{"id": 136, "code": "\n<code>\n    result = []\n    for row in X:\n        for cell in row:\n            result.append(cell)\n    return result\n", "metadata": {"problem_id": 342, "library_problem_id": 51, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 49}}
{"id": 137, "code": "\nresult = X.flatten(order='F')\n", "metadata": {"problem_id": 343, "library_problem_id": 52, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 49}}
{"id": 138, "code": "\np_value = scipy.stats.ttest_ind(a, b, equal_var=False).pvalue\n", "metadata": {"problem_id": 350, "library_problem_id": 59, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 59}}
{"id": 139, "code": "\nc = b[np.argsort(a, axis=0)]", "metadata": {"problem_id": 355, "library_problem_id": 64, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 140, "code": "\nresult = b[np.argsort(a.sum(axis=(1, 2)))]\n", "metadata": {"problem_id": 358, "library_problem_id": 67, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 64}}
{"id": 141, "code": "\na = np.delete(arr, 2, axis=0)", "metadata": {"problem_id": 360, "library_problem_id": 69, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 68}}
{"id": 142, "code": "\nresult = np.delete(a, del_col[np.where(del_col < a.shape[1])], axis=1)\n", "metadata": {"problem_id": 362, "library_problem_id": 71, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 143, "code": "\n    a_l = a.tolist()\n    a_l.insert(pos, element)\n    return np.asarray(a_l)\n    ### END SOLUTION\n", "metadata": {"problem_id": 365, "library_problem_id": 74, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 72}}
{"id": 144, "code": "\na = np.insert(a, pos, element, axis=0)\n", "metadata": {"problem_id": 366, "library_problem_id": 75, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 72}}
{"id": 145, "code": "\nresult = array_of_arrays.copy()\n", "metadata": {"problem_id": 367, "library_problem_id": 76, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 146, "code": "\nlow = np.min(grades)\nhigh = np.max(grades)\ninterval = np.where((ecdf(grades)(grades) < threshold) & (grades >= low) & (grades < high))[0]\nif len(interval) > 0:\n    low = grades[interval[0]]\n    high = grades[interval[-1] + 1]\nelse:\n    low = np.nan\n    high = np.nan\n", "metadata": {"problem_id": 375, "library_problem_id": 84, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 147, "code": "\na_np = a.numpy()", "metadata": {"problem_id": 379, "library_problem_id": 88, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 88}}
{"id": 148, "code": "\na_tf = tf.convert_to_tensor(a)", "metadata": {"problem_id": 380, "library_problem_id": 89, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 88}}
{"id": 149, "code": "\nresult = np.argsort(a)[::-1]\n", "metadata": {"problem_id": 381, "library_problem_id": 90, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 150, "code": "\nresult = np.power(A, n)", "metadata": {"problem_id": 384, "library_problem_id": 93, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 93}}
{"id": 151, "code": "\nresult = a.reshape(2, 2, -1, 2).swapaxes(1, 2).reshape(-1, 2, 2)\n", "metadata": {"problem_id": 387, "library_problem_id": 96, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 94}}
{"id": 152, "code": "\na = np.array(eval(string))", "metadata": {"problem_id": 394, "library_problem_id": 103, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 103}}
{"id": 153, "code": "\n<code>\n    return np.exp(np.random.uniform(np.log(min), np.log(max), n))\n", "metadata": {"problem_id": 397, "library_problem_id": 106, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"id": 154, "code": "\nresult = np.empty((0,))\n", "metadata": {"problem_id": 400, "library_problem_id": 109, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"id": 155, "code": "\nresult = np.maximum.reduceat(a, index)", "metadata": {"problem_id": 406, "library_problem_id": 115, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 114}}
{"id": 156, "code": "\nresult = np.minimum.reduceat(a, index)", "metadata": {"problem_id": 408, "library_problem_id": 117, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 114}}
{"id": 157, "code": "\nresult = np.pad(a, ((0, 0), (0, 0)), mode='constant', constant_values=0)[low_index:high_index, low_index:high_index]\n", "metadata": {"problem_id": 411, "library_problem_id": 120, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 120}}
{"id": 158, "code": "\nbin_data = data[:-len(data) % bin_size].reshape(-1, bin_size)\nbin_data_mean = np.mean(bin_data, axis=1)", "metadata": {"problem_id": 414, "library_problem_id": 123, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 123}}
{"id": 159, "code": "\nbin_data = np.array([row[max(0, len(row) - bin_size):] for row in data]).reshape(-1, bin_size).mean(axis=1)\nbin_data_mean = bin_data.reshape(data.shape[0], -1)", "metadata": {"problem_id": 419, "library_problem_id": 128, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 160, "code": "\nresult = df.values.reshape(15, 4, 5)", "metadata": {"problem_id": 424, "library_problem_id": 133, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 132}}
{"id": 161, "code": "\nresult = np.unpackbits(a.astype(np.uint8), axis=1)[:, -m:]\n", "metadata": {"problem_id": 425, "library_problem_id": 134, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 134}}
{"id": 162, "code": "\nresult = np.array([np.unpackbits(np.uint8(num))[-m:] for num in a])\nresult = np.bitwise_xor.reduce(result, axis=0)\n", "metadata": {"problem_id": 427, "library_problem_id": 136, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 134}}
{"id": 163, "code": "\nresult = (np.mean(a) - 3 * np.std(a), np.mean(a) + 3 * np.std(a))", "metadata": {"problem_id": 428, "library_problem_id": 137, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 137}}
{"id": 164, "code": "\nresult = (np.mean(a) - 2 * np.std(a), np.mean(a) + 2 * np.std(a))", "metadata": {"problem_id": 429, "library_problem_id": 138, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 137}}
{"id": 165, "code": "\n<code>\n    mean = np.mean(a)\n    std_dev = np.std(a)\n    third_std_dev = std_dev * 3\n    lower_bound = mean - third_std_dev\n    upper_bound = mean + third_std_dev\n    return (lower_bound, upper_bound)\n", "metadata": {"problem_id": 430, "library_problem_id": 139, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 137}}
{"id": 166, "code": "\na[1:, 0] = 0\na[0, 1:] = 0\n", "metadata": {"problem_id": 435, "library_problem_id": 144, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 142}}
{"id": 167, "code": "\nmask = a == np.amax(a, axis=1, keepdims=True)\n", "metadata": {"problem_id": 436, "library_problem_id": 145, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 145}}
{"id": 168, "code": "\nC = A[(A >= B[0]) & (A <= B[1]) | (A >= B[1]) & (A <= B[2])]\n", "metadata": {"problem_id": 444, "library_problem_id": 153, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"id": 169, "code": "\nresult = len(a) - rankdata(a, method='dense') + 1\n", "metadata": {"problem_id": 445, "library_problem_id": 154, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 154}}
{"id": 170, "code": "\nresult = np.argsort(rankdata(a, method='dense')[::-1])", "metadata": {"problem_id": 446, "library_problem_id": 155, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 154}}
{"id": 171, "code": "\nresult = X / np.linalg.norm(X, ord=1, axis=1, keepdims=True)\n", "metadata": {"problem_id": 452, "library_problem_id": 161, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 161}}
{"id": 172, "code": "\nresult = X / np.linalg.norm(X, axis=1, keepdims=True)\n", "metadata": {"problem_id": 453, "library_problem_id": 162, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 161}}
{"id": 173, "code": "\nresult = np.select([df['a'].str.contains(target)], [choices], default=np.nan)\n", "metadata": {"problem_id": 455, "library_problem_id": 164, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 164}}
{"id": 174, "code": "\nresult = np.sqrt(((a[:, np.newaxis] - a) ** 2).sum(axis=2))\n", "metadata": {"problem_id": 456, "library_problem_id": 165, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 165}}
{"id": 175, "code": "\nresult = np.sqrt(((a[:, np.newaxis, :] - a) ** 2).sum(axis=2))\n", "metadata": {"problem_id": 457, "library_problem_id": 166, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 165}}
{"id": 176, "code": "\nresult = np.sqrt(((a[:, None, :] - a) ** 2).sum(axis=2))\nresult[np.triu_indices_from(result, k=1)] = np.nan\n", "metadata": {"problem_id": 458, "library_problem_id": 167, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 165}}
{"id": 177, "code": "\nAVG = np.mean(NA, axis=0)", "metadata": {"problem_id": 461, "library_problem_id": 170, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 168}}
{"id": 178, "code": "\nresult = np.where(np.diff(a, axis=0) != 0)[0].reshape(-1, 1)\n", "metadata": {"problem_id": 463, "library_problem_id": 172, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 171}}
{"id": 179, "code": "\nresult = np.lib.stride_tricks.sliding_window_view(a, size)[:, :, size[0] // 2, size[1] // 2]\n", "metadata": {"problem_id": 468, "library_problem_id": 177, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 176}}
{"id": 180, "code": "\nresult = np.mean(a.real) + 1j * np.mean(a.imag)\n", "metadata": {"problem_id": 469, "library_problem_id": 178, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 178}}
{"id": 181, "code": "\na[np.eye(a.shape[0], dtype=bool)] = 0\n", "metadata": {"problem_id": 478, "library_problem_id": 187, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 187}}
{"id": 182, "code": "\nresult = np.where((x == a) & (y == b))[0]\n", "metadata": {"problem_id": 481, "library_problem_id": 190, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 189}}
{"id": 183, "code": "\nresult = np.polyfit(x, y, 2)\n", "metadata": {"problem_id": 482, "library_problem_id": 191, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 191}}
{"id": 184, "code": "\nresult = np.polyfit(x, y, degree)\n", "metadata": {"problem_id": 483, "library_problem_id": 192, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 191}}
{"id": 185, "code": "\nresult = MinMaxScaler().fit_transform(arr)", "metadata": {"problem_id": 487, "library_problem_id": 196, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 195}}
{"id": 186, "code": "\nresult = MinMaxScaler().fit_transform(a.reshape(-1, a.shape[-1])).reshape(a.shape)\n", "metadata": {"problem_id": 488, "library_problem_id": 197, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 195}}
{"id": 187, "code": "\narr_temp = arr.copy()\nmask = arr_temp < n1\nmask2 = arr_temp < n2\nmask3 = mask ^ mask2\narr[mask] = 0\narr[mask3] = arr[mask3] + 5\narr[~mask2] = 30", "metadata": {"problem_id": 490, "library_problem_id": 199, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 198}}
{"id": 188, "code": "\nresult = np.all(np.array(a) == a[0])", "metadata": {"problem_id": 493, "library_problem_id": 202, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Origin", "perturbation_origin_id": 202}}
{"id": 189, "code": "\nresult = np.pad(a, ((0, shape[0] - a.shape[0]), (0, shape[1] - a.shape[1])), mode='constant', constant_values=element)", "metadata": {"problem_id": 497, "library_problem_id": 206, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 204}}
{"id": 190, "code": "\n<code>\n    result = np.pad(arr, ((0, shape[0] - arr.shape[0]), (0, shape[1] - arr.shape[1])), mode='constant')\n    return result\n", "metadata": {"problem_id": 498, "library_problem_id": 207, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 204}}
{"id": 191, "code": "\nresult = a[np.arange(a.shape[0])[:, None], np.arange(a.shape[1]), b]\n", "metadata": {"problem_id": 501, "library_problem_id": 210, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 210}}
{"id": 192, "code": "\nresult = np.sum(a[np.arange(a.shape[0])[:, None], np.arange(a.shape[1]), b], axis=-1)\n", "metadata": {"problem_id": 504, "library_problem_id": 213, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 210}}
{"id": 193, "code": "\nresult = np.sum(a[np.arange(a.shape[0])[:, None], np.arange(a.shape[1]), b])\n", "metadata": {"problem_id": 505, "library_problem_id": 214, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 210}}
{"id": 194, "code": "\nresult = np.where(df['a'].between(1, 4), df['b'], np.nan)\n", "metadata": {"problem_id": 506, "library_problem_id": 215, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 215}}
{"id": 195, "code": "\n<code>\nfor style in ['solid', 'dashed', 'dotted', 'dashdot']:\n    y = np.random.rand(10)\n    plt.plot(x, y, linestyle=style)\n", "metadata": {"problem_id": 515, "library_problem_id": 4, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 196, "code": "\n<code>\nfor style in ['solid', 'dashed', 'dotted', 'dashdot']:\n    y = np.random.rand(10)\n    plt.plot(x, y, linestyle=style)\n", "metadata": {"problem_id": 516, "library_problem_id": 5, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 197, "code": "\nplt.fill_between(range(2, 5), x[2:5], color='red', alpha=0.5)\n\nplt.show()", "metadata": {"problem_id": 520, "library_problem_id": 9, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 198, "code": "\n<code>\nseaborn.relplot(data=df, x=\"Height (cm)\", y=\"Weight (kg)\", hue=\"Gender\", kind=\"scatter\")\nplt.show()\n", "metadata": {"problem_id": 523, "library_problem_id": 12, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 12}}
{"id": 199, "code": "\n<code>\nplt.xticks(rotation=45)\n", "metadata": {"problem_id": 533, "library_problem_id": 22, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 21}}
{"id": 200, "code": "\n<code>\nplt.xticks(np.arange(0, 2 * np.pi, np.pi / 2))\nplt.xticks(rotation=45)\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Cosine Function')\nplt.legend()\nplt.show()\n", "metadata": {"problem_id": 534, "library_problem_id": 23, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 21}}
{"id": 201, "code": "\nplt.imshow(H, cmap='gray')\nplt.show()\n\n", "metadata": {"problem_id": 537, "library_problem_id": 26, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 25}}
{"id": 202, "code": "\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>", "metadata": {"problem_id": 540, "library_problem_id": 29, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 29}}
{"id": 203, "code": "\n<code>\nplt.plot(x, y)\nplt.gca().invert_yaxis()\nplt.show()\n", "metadata": {"problem_id": 541, "library_problem_id": 30, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 204, "code": "\n<code>\nplt.xticks([0, 1.5])\n", "metadata": {"problem_id": 542, "library_problem_id": 31, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 31}}
{"id": 205, "code": "\nplt.scatter(x, y, edgecolors='black', facecolor='blue')\nplt.show()", "metadata": {"problem_id": 545, "library_problem_id": 34, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 34}}
{"id": 206, "code": "<code>\nplt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda x, pos: f'{x:,.0f}'))\n", "metadata": {"problem_id": 547, "library_problem_id": 36, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 207, "code": "\n<code>\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\nax1.plot(x, y1)\nax1.set_title('Sine Wave')\nax1.set_xlabel('x')\nax1.set_ylabel('y')\nax1.spines['top'].set_visible(False)\nax1.spines['right'].set_visible(False)\n\nax2.plot(x, y2)\nax2.set_title('Cosine Wave')\nax2.set_xlabel('x')\nax2.set_ylabel('y')\nax2.spines['top'].set_visible(False)\nax2.spines['right'].set_visible(False)\n\nplt.show()\n", "metadata": {"problem_id": 550, "library_problem_id": 39, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 38}}
{"id": 208, "code": "\nplt.xticks(np.arange(10))\nplt.grid(axis='x', which='both', linestyle='--')\nplt.show()", "metadata": {"problem_id": 553, "library_problem_id": 42, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 209, "code": "\nplt.grid(True)\n\n", "metadata": {"problem_id": 556, "library_problem_id": 45, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 210, "code": "<code>\nplt.legend(loc='lower right')\n", "metadata": {"problem_id": 557, "library_problem_id": 46, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 46}}
{"id": 211, "code": "<code>\nax.set_xticks(np.arange(data.shape[1]) + 0.5, minor=False)\nax.set_yticks(np.arange(data.shape[0]) + 0.5, minor=False)\nax.invert_yaxis()\nax.xaxis.tick_top()\n", "metadata": {"problem_id": 560, "library_problem_id": 49, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 212, "code": "\nplt.plot(x, y)\nplt.xlabel('X')\nplt.gcf().subplots_adjust(left=0.15)\n<jupyter_output>\n<empty_output>\n", "metadata": {"problem_id": 561, "library_problem_id": 50, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 50}}
{"id": 213, "code": "\n<code>\nplt.plot(x, y)\nplt.ylabel('Y')\nplt.gca().yaxis.set_ticks_position('left')\nplt.gca().yaxis.set_label_position('right')\nplt.show()\n", "metadata": {"problem_id": 564, "library_problem_id": 53, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 52}}
{"id": 214, "code": "\n<code>\nsns.jointplot(x='total_bill', y='tip', data=tips, kind='reg', color='blue')\nplt.gca().collections[0].set_color('green')\nplt.gca().collections[1].set_color('green')\n", "metadata": {"problem_id": 565, "library_problem_id": 54, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 215, "code": "\nplt.plot(x, y)\nplt.xlabel('X')\nplt.gca().spines['left'].set_color('red')\nplt.show()\n<jupyter_output>\n<empty_output>\n", "metadata": {"problem_id": 571, "library_problem_id": 60, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 59}}
{"id": 216, "code": "\nplt.axvline(x=0.22058956, color='red', linestyle='--')\nplt.axvline(x=0.33088437, color='red', linestyle='--')\nplt.axvline(x=2.20589566, color='red', linestyle='--')\n\n", "metadata": {"problem_id": 573, "library_problem_id": 62, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"id": 217, "code": "\nplt.imshow(rand_mat, cmap='hot', interpolation='nearest')\nplt.xticks(range(len(xlabels)), xlabels)\nplt.yticks(range(len(ylabels)), ylabels[::-1])\nplt.gca().invert_yaxis()\nplt.xticks(rotation=45, ha='right')\nplt.show()", "metadata": {"problem_id": 574, "library_problem_id": 63, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 218, "code": "\nplt.hist(x, edgecolor='black', linewidth=1.2)\nplt.show()\n<jupyter_output>\n<empty_output>\n", "metadata": {"problem_id": 581, "library_problem_id": 70, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 70}}
{"id": 219, "code": "\nfig, axs = plt.subplots(1, 2, figsize=(8, 4), gridspec_kw={'width_ratios': [3, 1]})\naxs[0].plot(x, y)\naxs[1].plot(x, y)\n\nfig.tight_layout()\n\n", "metadata": {"problem_id": 582, "library_problem_id": 71, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"id": 220, "code": "\nplt.hist(x, bins=bins, alpha=0.5, label='x')\nplt.hist(y, bins=bins, alpha=0.5, label='y')\nplt.legend()\nplt.show()\n\n", "metadata": {"problem_id": 583, "library_problem_id": 72, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 72}}
{"id": 221, "code": "\nplt.plot(x[:, 0], label='a')\nplt.plot(x[:, 1], label='b')\nplt.legend()\nplt.show()\n\n", "metadata": {"problem_id": 587, "library_problem_id": 76, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 222, "code": "\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>\n\n<code>", "metadata": {"problem_id": 589, "library_problem_id": 78, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 78}}
{"id": 223, "code": "\n<code>\nplt.plot(x, y, 'o')\nplt.xscale('log')\nplt.yscale('log')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.grid(True, which='both')\nplt.gca().xaxis.set_major_formatter(plt.FormatStrFormatter('%.0f'))\nplt.gca().yaxis.set_major_formatter(plt.FormatStrFormatter('%.0f'))\nplt.show()\n", "metadata": {"problem_id": 593, "library_problem_id": 82, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 224, "code": "\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\nax1.plot(x, y, label='y')\nax1.legend()\n\nax2.plot(z, a, label='a')\nax2.legend()\n\nfig.legend()\n\nplt.show()\n<jupyter_output>\n<empty_output>\n", "metadata": {"problem_id": 597, "library_problem_id": 86, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 86}}
{"id": 225, "code": "\n<code>\nplt.xticks(range(0, 10, 2) + [2.1, 3, 7.6], rotation=90)\n", "metadata": {"problem_id": 601, "library_problem_id": 90, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 226, "code": "\n<code>\nplt.yticks(rotation=-60)\nplt.gca().xaxis.set_tick_params(which='major', labelbottom=True)\n", "metadata": {"problem_id": 603, "library_problem_id": 92, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 91}}
{"id": 227, "code": "\n<code>\nplt.xticks(x, rotation=90)\nfor label in plt.gca().get_xticklabels():\n    label.set_alpha(0.5)\n", "metadata": {"problem_id": 604, "library_problem_id": 93, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 91}}
{"id": 228, "code": "\n<code>\ndf.plot(kind='line')\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.show()\n", "metadata": {"problem_id": 608, "library_problem_id": 97, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"id": 229, "code": "\n<code>\nplt.scatter(x, y, edgecolors='none', marker='|', hatch='//')\nplt.show()\n", "metadata": {"problem_id": 610, "library_problem_id": 99, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"id": 230, "code": "\nplt.scatter(x, y, marker='*', edgecolor='black', linewidth=1, s=100, facecolors='none', hatch='\\\\')\n\n", "metadata": {"problem_id": 611, "library_problem_id": 100, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"id": 231, "code": "\n<code>\nx = [1, 2, 3, 4, 5]\ny = [2, 4, 6, 8, 10]\n\nplt.plot(x, y, label='Line')\nplt.axvline(x=3, color='red', linestyle='--', label='Cutoff')\nplt.legend()\nplt.show()\n", "metadata": {"problem_id": 616, "library_problem_id": 105, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 105}}
{"id": 232, "code": "\n<code>\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.bar(range(len(height)), height, width=0.5, align='edge')\nax.set_xticks(range(len(labels)))\nax.set_xticklabels(labels)\nax.set_ylim(0, max(height) + 1)\nplt.show()\n", "metadata": {"problem_id": 617, "library_problem_id": 106, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 106}}
{"id": 233, "code": "\n<code>\nplt.pie(data, labels=l, wedgeprops={'width': 0.4})\nplt.axis('equal')\nplt.show()\n", "metadata": {"problem_id": 618, "library_problem_id": 107, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"id": 234, "code": "\n<code>\nplt.plot(x, y)\nplt.minorticks_on()\nplt.grid(which='minor', linestyle='--', color='gray')\nplt.grid(which='major', linestyle='-', color='black', alpha=0.2)\nplt.show()\n", "metadata": {"problem_id": 620, "library_problem_id": 109, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"id": 235, "code": "\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\nplt.title(\"Activity Distribution\")\nplt.axis('equal')\nplt.show()\n<jupyter_output>\n<empty_output>\n", "metadata": {"problem_id": 622, "library_problem_id": 111, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 111}}
{"id": 236, "code": "\nplt.axvline(x=55, color='green', linestyle='--')\n\n", "metadata": {"problem_id": 624, "library_problem_id": 113, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 113}}
{"id": 237, "code": "\nx = np.arange(len(blue_bar))\nwidth = 0.35\n\nplt.bar(x - width/2, blue_bar, width, label='Blue')\nplt.bar(x + width/2, orange_bar, width, label='Orange')\n\nplt.xlabel('Category')\nplt.ylabel('Value')\nplt.title('Comparison of Blue and Orange Bars')\nplt.xticks(x, ['Category 1', 'Category 2', 'Category 3'])\nplt.legend()\nplt.show()", "metadata": {"problem_id": 625, "library_problem_id": 114, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"id": 238, "code": "\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\nax1.plot(x, y, label='y')\nax1.plot(a, z, label='z')\nax1.legend()\n\nax2.plot(x, z)\n\nplt.show()\n<jupyter_output>\n<empty_output>\n", "metadata": {"problem_id": 626, "library_problem_id": 115, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 115}}
{"id": 239, "code": "\n<code>\nplt.scatter(x, y, c=y, cmap='Spectral')\nplt.colorbar()\nplt.show()\n", "metadata": {"problem_id": 627, "library_problem_id": 116, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 116}}
{"id": 240, "code": "\n<code>\nplt.plot(x, y, label='Line')\nplt.legend(handles=[plt.Line2D([], [], color='black', marker='o', markersize=0, linewidth=0, label='Line')], loc='upper left', bbox_to_anchor=(1, 1))\nplt.gca().legend_.legendHandles[0].set_markersize(0.3)\nplt.show()\n", "metadata": {"problem_id": 633, "library_problem_id": 122, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 241, "code": "\nplt.legend()\nplt.show()", "metadata": {"problem_id": 635, "library_problem_id": 124, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 242, "code": "<code>\nplt.scatter(x, y)\nplt.xlim(0, 10)\nplt.ylim(0, 10)\nplt.gca().set_clip_on(False)\n", "metadata": {"problem_id": 640, "library_problem_id": 129, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 129}}
{"id": 243, "code": "\nplt.axhline(y=0, color='white', linewidth=1)\nplt.axvline(x=0, color='white', linewidth=1)\n\n", "metadata": {"problem_id": 645, "library_problem_id": 134, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 134}}
{"id": 244, "code": "\nfig, axs = plt.subplots(4, 4, figsize=(5, 5))\nfig.subplots_adjust(wspace=0.5, hspace=0.5)\n\nfor i in range(4):\n    for j in range(4):\n        axs[i, j].plot(x, y)\n        axs[i, j].set_xticks(x)\n        axs[i, j].set_yticks(y)\n        axs[i, j].grid()\n\nplt.show()\n<jupyter_output>\n<empty_output>\n", "metadata": {"problem_id": 648, "library_problem_id": 137, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 137}}
{"id": 245, "code": "\nplt.matshow(d, cmap='viridis')\nplt.figure(figsize=(8, 8))\nplt.show()\n\n", "metadata": {"problem_id": 649, "library_problem_id": 138, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 138}}
{"id": 246, "code": "\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>\n<code>", "metadata": {"problem_id": 650, "library_problem_id": 139, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 139}}
{"id": 247, "code": "\n<code>\nplt.plot(x, y)\nplt.xticks(np.arange(10), rotation=90)\nplt.gca().xaxis.set_ticks_position('both')\nplt.show()\n", "metadata": {"problem_id": 652, "library_problem_id": 141, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 140}}
{"id": 248, "code": "\n<code>\nsns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"scatter\")\nplt.xlabel(\"Exercise Time\")\nplt.ylabel(\"Exercise Pulse\")\nplt", "metadata": {"problem_id": 655, "library_problem_id": 144, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"id": 249, "code": "\n<code>\ng = sns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"scatter\")\ng.set_axis_labels(\"Time (minutes)\", \"Pulse (bpm)\")\ng.set_titles(\"{col_name}\")\ng.set_xticklabels(rotation=45)\ng.set_ylabels(\"\")\ng.set_xlabels(\"\")\n", "metadata": {"problem_id": 656, "library_problem_id": 145, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"id": 250, "code": "\n<code>\ng = sns.FacetGrid(df, col=\"b\", hue=\"b\", sharey=False)\ng.map(sns.pointplot, \"a\", \"c\")\ng.set_xticks(df[\"a\"][::2])\ng.set_xticklabels(df[\"a\"][::2])\ng.add_legend()\nplt.show()\n", "metadata": {"problem_id": 662, "library_problem_id": 151, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 151}}
{"id": 251, "code": "\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(x, y, z)\nax.view_init(azim=100, elev=50)\nplt.show()\n<jupyter_output>\n<empty_output>\n", "metadata": {"problem_id": 663, "library_problem_id": 152, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 152}}
{"id": 252, "code": "\n<code>\nplt.plot(x, y)\nplt.xlabel('x')\nplt.ylabel('y')\nplt.xticks([])\nplt.yticks([])\nplt.show()\n", "metadata": {"problem_id": 664, "library_problem_id": 153, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 153}}
{"id": 253, "code": "\nx.assign(1)\nresult = x.numpy()\n", "metadata": {"problem_id": 666, "library_problem_id": 0, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 254, "code": "\nresult = tf.one_hot(labels, 10, dtype=tf.int32)\n", "metadata": {"problem_id": 672, "library_problem_id": 6, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 2}}
{"id": 255, "code": "\nresult = tf.compat.v1.data.make_one_shot_iterator(ds).get_next()\nresult = []\nwith tf.compat.v1.Session() as sess:\n  for _ in range(9):\n    result.append(sess.run(element))\nprint(result)\n", "metadata": {"problem_id": 673, "library_problem_id": 7, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 7}}
{"id": 256, "code": "\nresult = tf.pad(tf.ones_like(tf.expand_dims(lengths, -1)), [[0, 0], [0, 8 - tf.reduce_max(lengths)]])\nresult = tf.where(tf.sequence_mask(lengths, maxlen=8), result, 0)\n", "metadata": {"problem_id": 676, "library_problem_id": 10, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 9}}
{"id": 257, "code": "\n<code>\n    max_length = tf.reduce_max(lengths)\n    mask = tf.sequence_mask(lengths, max_length)\n    padded_mask = tf.pad(mask, [[0, 0], [0, 8 - max_length]])\n    return padded_mask\n", "metadata": {"problem_id": 678, "library_problem_id": 12, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 258, "code": "\nresult = tf.pad(tf.ones_like(tf.expand_dims(lengths, -1)), [[0, 0], [0, 8 - tf.reduce_max(lengths)]])\nresult = tf.sequence_mask(lengths, maxlen=8, dtype=tf.float32)\n", "metadata": {"problem_id": 679, "library_problem_id": 13, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 259, "code": "\n<code>\n    result = tf.reshape(tf.stack([tf.repeat(a, tf.shape(b)[0])] + [b]), (-1, tf.shape(a)[0]))\n    return result\n", "metadata": {"problem_id": 681, "library_problem_id": 15, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 14}}
{"id": 260, "code": "\nresult = tf.reshape(a, (-1, 100, 512))\n", "metadata": {"problem_id": 682, "library_problem_id": 16, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 261, "code": "\nresult = tf.expand_dims(tf.expand_dims(a, axis=0), axis=-2)\n", "metadata": {"problem_id": 684, "library_problem_id": 18, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"id": 262, "code": "\nresult = tf.reduce_sum(tf.square(tf.subtract(a, b)), axis=1)\n", "metadata": {"problem_id": 688, "library_problem_id": 22, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 22}}
{"id": 263, "code": "\nresult = tf.reduce_sum(tf.square(tf.subtract(a, b)), axis=1)\n", "metadata": {"problem_id": 689, "library_problem_id": 23, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 22}}
{"id": 264, "code": "\nresult = tf.gather_nd(x, tf.stack([row, col], axis=-1))\n", "metadata": {"problem_id": 692, "library_problem_id": 26, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 25}}
{"id": 265, "code": "\nresult = tf.einsum('bij,bjk->bik', A, B)\n", "metadata": {"problem_id": 694, "library_problem_id": 28, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"id": 266, "code": "\nresult = tf.einsum('bij,bjk->bik', A, B)\n", "metadata": {"problem_id": 695, "library_problem_id": 29, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 28}}
{"id": 267, "code": "\nresult = [item.decode('utf-8') for item in x]\n", "metadata": {"problem_id": 696, "library_problem_id": 30, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 268, "code": "\n<code>\n    result = [x_item.decode('utf-8') for x_item in x]\n    return result\n", "metadata": {"problem_id": 697, "library_problem_id": 31, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 30}}
{"id": 269, "code": "\nresult = tf.math.reduce_variance(x[..., :-1], axis=-1, keepdims=True)\n", "metadata": {"problem_id": 699, "library_problem_id": 33, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 270, "code": "\n<code>\n    non_zero_mask = tf.reduce_sum(tf.cast(x != 0, tf.float32), axis=-1)\n    non_zero_mask = tf.expand_dims(non_zero_mask, axis=-1)\n    result = tf.reduce_sum(x, axis=-2) / non_zero_mask\n    return result\n", "metadata": {"problem_id": 700, "library_problem_id": 34, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 271, "code": "\nresult = tf.random.uniform(shape=(10,), minval=1, maxval=5, dtype=tf.int32, seed=seed_x)\n", "metadata": {"problem_id": 707, "library_problem_id": 41, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"id": 272, "code": "\nresult = tf.random.uniform(shape=(114,), minval=2, maxval=6, dtype=tf.int32, seed=seed_x)", "metadata": {"problem_id": 708, "library_problem_id": 42, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 41}}
{"id": 273, "code": "\nstatistic, p_value = stats.ks_2samp(x, y)\n", "metadata": {"problem_id": 714, "library_problem_id": 3, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 3}}
{"id": 274, "code": "\nresult = optimize.minimize(lambda x: f(x[0], x[1], x[2]), initial_guess).x\n", "metadata": {"problem_id": 716, "library_problem_id": 5, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 5}}
{"id": 275, "code": "\np_values = scipy.stats.norm.cdf(z_scores)", "metadata": {"problem_id": 717, "library_problem_id": 6, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 6}}
{"id": 276, "code": "\np_values = scipy.stats.norm.cdf(z_scores, loc=mu, scale=sigma)", "metadata": {"problem_id": 718, "library_problem_id": 7, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 6}}
{"id": 277, "code": "\nresult = stats.lognorm.cdf(x, s=stddev, scale=np.exp(mu))", "metadata": {"problem_id": 720, "library_problem_id": 9, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 278, "code": "\nresult = sa.multiply(sb)", "metadata": {"problem_id": 722, "library_problem_id": 11, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"id": 279, "code": "\n<code>\n    result = sA.multiply(sB)\n    return result\n", "metadata": {"problem_id": 723, "library_problem_id": 12, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 280, "code": "\nresult = M.diagonal()", "metadata": {"problem_id": 727, "library_problem_id": 16, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 281, "code": "\nresult = scipy.optimize.linear_sum_assignment(scipy.spatial.distance.cdist(points1, points2))[1]\n", "metadata": {"problem_id": 735, "library_problem_id": 24, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 23}}
{"id": 282, "code": "\nb = b.setdiag(0)\n", "metadata": {"problem_id": 736, "library_problem_id": 25, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 283, "code": "\nresult = ndimage.label(img > threshold)[1]\n", "metadata": {"problem_id": 737, "library_problem_id": 26, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 284, "code": "\nsquare = scipy.ndimage.binary_erosion(square, iterations=1)\nsquare = scipy.ndimage.binary_dilation(square, iterations=1)\nsquare[square > 0] = 255\n", "metadata": {"problem_id": 744, "library_problem_id": 33, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 285, "code": "\nMedian = np.median(col.data)\nMode = np.argmax(np.bincount(col.data))", "metadata": {"problem_id": 747, "library_problem_id": 36, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 34}}
{"id": 286, "code": "\nresult = scipy.spatial.distance.cdist(example_array.reshape(-1, 1), example_array.reshape(-1, 1), metric='euclidean')\nresult[np.diag_indices_from(result)] = np.inf\n", "metadata": {"problem_id": 749, "library_problem_id": 38, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 38}}
{"id": 287, "code": "\n<code>\n    n = example_array.shape[0]\n    distances = scipy.spatial.distance.cdist(np.indices(example_array.shape).reshape(2, -1).T, np.indices(example_array.shape).reshape(2, -1).T, metric='euclidean')\n    result = np.zeros((n, n))\n    result[np.triu_indices(n, k=1)] = distances[np.triu_indices(n, k=1)]\n    result[np.tril_indices(n, k=-1)] = distances[np.tril_indices(n, k=-1)]\n    return result\n", "metadata": {"problem_id": 751, "library_problem_id": 40, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 38}}
{"id": 288, "code": "\np_value = stats.ranksums(pre_course_scores, during_course_scores).pvalue", "metadata": {"problem_id": 759, "library_problem_id": 48, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"id": 289, "code": "\nresult = M[row, column].toarray().flatten()\n", "metadata": {"problem_id": 770, "library_problem_id": 59, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 58}}
{"id": 290, "code": "\nnew_array = np.zeros((100, 10, 10))\nfor i in range(10):\n    for j in range(10):\n        f = scipy.interpolate.interp1d(x, array[:, i, j])\n        new_array[:, i, j] = f(x_new)\n", "metadata": {"problem_id": 771, "library_problem_id": 60, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 60}}
{"id": 291, "code": "\nprob = NormalDistro(u, o2, x)", "metadata": {"problem_id": 772, "library_problem_id": 61, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 292, "code": "\n<code>\n    dev = abs((x-u)/o2)\n    P_inner = scipy.integrate.quad(NDfx, -dev, dev)[0]\n    P_outer = 1 - P_inner\n    P = P_inner + P_outer/2\n    return P\n", "metadata": {"problem_id": 773, "library_problem_id": 62, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 61}}
{"id": 293, "code": "\nresult = sf.dct(np.eye(N), norm='ortho')", "metadata": {"problem_id": 774, "library_problem_id": 63, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 294, "code": "\nresult = sparse.diags(matrix, [-1, 0, 1], (5, 5)).toarray()\n", "metadata": {"problem_id": 775, "library_problem_id": 64, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 295, "code": "\nresult = scipy.stats.binom.pmf(np.arange(N+1), N, p).reshape(-1, N+1)\n", "metadata": {"problem_id": 776, "library_problem_id": 65, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"id": 296, "code": "\nresult = df.apply(stats.zscore, axis=1)\n", "metadata": {"problem_id": 777, "library_problem_id": 66, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"id": 297, "code": "\nresult = scipy.ndimage.zoom(x, (shape[0] / x.shape[0], shape[1] / x.shape[1]), order=1)", "metadata": {"problem_id": 785, "library_problem_id": 74, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Origin", "perturbation_origin_id": 74}}
{"id": 298, "code": "\n\ndef dN1_dt_time_varying(t, N1):\n    return -100 * N1 + np.sin(t)\n\nsol = scipy.integrate.solve_ivp(fun=dN1_dt_time_varying, t_span=time_span, y0=[N0,])\nresult = sol.y\n", "metadata": {"problem_id": 788, "library_problem_id": 77, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 77}}
{"id": 299, "code": "\n\nfor t in range (4):\n    def const(x):    \n        y=x[t]\n        return y\n    cons.append({'type':'ineq', 'fun': const})\n\nout=minimize(function, x0, method=\"SLSQP\", constraints=cons)\nx=out[\"x\"]\n", "metadata": {"problem_id": 791, "library_problem_id": 80, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 300, "code": "\nresult, error = scipy.integrate.quad(lambda x: 2 * c * x, low, high)\n", "metadata": {"problem_id": 794, "library_problem_id": 83, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 83}}
{"id": 301, "code": "\na = np.where(a > 0, 1, 0)\n", "metadata": {"problem_id": 801, "library_problem_id": 90, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 302, "code": "\na = np.where(a > 0, 1, 0)\n", "metadata": {"problem_id": 802, "library_problem_id": 91, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 90}}
{"id": 303, "code": "\nresult = np.argmin(scipy.spatial.distance.cdist(data, centroids), axis=1)\n", "metadata": {"problem_id": 803, "library_problem_id": 92, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 92}}
{"id": 304, "code": "\nresult = np.argpartition(scipy.spatial.distance.cdist(data, centroids), k, axis=0)[:k].flatten()", "metadata": {"problem_id": 805, "library_problem_id": 94, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 92}}
{"id": 305, "code": "\nresult = np.array([fsolve(lambda b: eqn(x, a, b), x0=0.5) for x, a in zip(xdata, adata)])\nresult = result[np.argsort(result[:, 0])]\n", "metadata": {"problem_id": 807, "library_problem_id": 96, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 95}}
{"id": 306, "code": "\n<code>\ndf['Time'] = pd.to_datetime(df['Time'])\ndf.set_index('Time', inplace=True)\nintegral_df = df['A'].rolling('25S').apply(integrate.trapz)\n", "metadata": {"problem_id": 810, "library_problem_id": 99, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 99}}
{"id": 307, "code": "\nweights = sciopt.fmin(lambda w: -np.sum(a['A1'] * np.log(w) - np.log(np.sum(np.exp(a['A1'] * np.log(w)), axis=0))), np.ones(a['A1'].nunique()), disp=False)\n", "metadata": {"problem_id": 812, "library_problem_id": 101, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 101}}
{"id": 308, "code": "\nresult = sciopt.fminbound(e, pmin, pmax, args=(x,y))\n", "metadata": {"problem_id": 813, "library_problem_id": 102, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 102}}
{"id": 309, "code": "\ndata1 = pd.DataFrame(data.data, columns=data.feature_names)\ndata1['target'] = data.target\n", "metadata": {"problem_id": 817, "library_problem_id": 0, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 310, "code": "\ndata1 = pd.DataFrame(data.data, columns=data.feature_names)\ndata1['target'] = data.target\n", "metadata": {"problem_id": 818, "library_problem_id": 1, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 311, "code": "\ndf_out = df.explode('Col3')\ndf_out = pd.get_dummies(df_out, columns=['Col3'])\ndf_out = df_out.groupby('Col1').sum().reset_index()\n", "metadata": {"problem_id": 821, "library_problem_id": 4, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 312, "code": "\ndf_out = df.copy()\ndf_out['Apple'] = df_out['Col3'].apply(lambda x: 1 if 'Apple' in x else 0)\ndf_out['Orange'] = df_out['Col3'].apply(lambda x: 1 if 'Orange' in x else 0)\ndf_out['Banana'] = df_out['Col3'].apply(lambda x: 1 if 'Banana' in x else 0)\ndf_out['Grape'] = df_out['Col3'].apply(lambda x: 1 if 'Grape' in x else 0)\ndf_out = df_out.drop('Col3', axis=1)\n", "metadata": {"problem_id": 822, "library_problem_id": 5, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 313, "code": "\ndf_out = df.copy()\nunique_elements = set(df['Col3'].explode().unique())\nfor element in unique_elements:\n    df_out[element] = df_out['Col3'].apply(lambda x: 1 if element in x else 0)\ndf_out.drop('Col3', axis=1, inplace=True)\n", "metadata": {"problem_id": 824, "library_problem_id": 7, "library": "Sklearn", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 314, "code": "\ndf_out = df.copy()\nunique_elements = set(df['Col3'].explode().unique())\nfor element in unique_elements:\n    df_out[element] = df_out['Col3'].apply(lambda x: 1 if element in x else 0)\ndf_out.drop('Col3', axis=1, inplace=True)\n", "metadata": {"problem_id": 825, "library_problem_id": 8, "library": "Sklearn", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 315, "code": "\nproba = np.exp(model.decision_function(x_predict)) / (1 + np.exp(model.decision_function(x_predict)))\n", "metadata": {"problem_id": 827, "library_problem_id": 10, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 316, "code": "\ndf = pd.concat([df_origin, pd.DataFrame(transform_output.toarray(), columns=transform_output.columns)], axis=1)\n", "metadata": {"problem_id": 828, "library_problem_id": 11, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"id": 317, "code": "\ndf = pd.concat([df_origin, pd.DataFrame(transform_output.toarray(), columns=transform_output.columns)], axis=1)\n", "metadata": {"problem_id": 829, "library_problem_id": 12, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 318, "code": "\n\nclf.steps.pop(1)  # delete the step at index 1\n", "metadata": {"problem_id": 831, "library_problem_id": 14, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 14}}
{"id": 319, "code": "\n\nclf.steps.pop(1)\n", "metadata": {"problem_id": 833, "library_problem_id": 16, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 14}}
{"id": 320, "code": "\n\nclf.steps.insert(1, ('poly', PolynomialFeatures()))\n", "metadata": {"problem_id": 834, "library_problem_id": 17, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"id": 321, "code": "\nproba = np.array([logreg.fit(X[train], y[train]).predict_proba(X[test])[:, 1] for train, test in cv])\n", "metadata": {"problem_id": 840, "library_problem_id": 23, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 22}}
{"id": 322, "code": "\ninversed = scaler.inverse_transform(scaled)", "metadata": {"problem_id": 841, "library_problem_id": 24, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 24}}
{"id": 323, "code": "\nmodel_name = model.__class__.__name__\n", "metadata": {"problem_id": 844, "library_problem_id": 27, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 26}}
{"id": 324, "code": "\ntf_idf_out = pipe.fit_transform(data.test)\n", "metadata": {"problem_id": 847, "library_problem_id": 30, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 29}}
{"id": 325, "code": "\n\nclf = GridSearchCV(bc, param_grid, cv=5)\nclf.fit(X_train, y_train)\nproba = clf.predict_proba(X_test)\n", "metadata": {"problem_id": 849, "library_problem_id": 32, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 326, "code": "\n\nregressor = RandomForestRegressor(n_estimators=150, min_samples_split=1.0, random_state=42)\nrgr = regressor.fit(X, y)\npredict = rgr.predict(X_test)\n", "metadata": {"problem_id": 851, "library_problem_id": 34, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 33}}
{"id": 327, "code": "\n\ntfidf = TfidfVectorizer(preprocessor=preprocess)\n", "metadata": {"problem_id": 852, "library_problem_id": 35, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Origin", "perturbation_origin_id": 35}}
{"id": 328, "code": "\ncoef = grid.best_estimator_.named_steps['model'].coef_\n", "metadata": {"problem_id": 856, "library_problem_id": 39, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 329, "code": "\ncoef = grid.best_estimator_.named_steps['model'].coef_\n", "metadata": {"problem_id": 857, "library_problem_id": 40, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 39}}
{"id": 330, "code": "\ncolumn_names = X.columns[model.get_support()]\n", "metadata": {"problem_id": 858, "library_problem_id": 41, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"id": 331, "code": "\ncolumn_names = X.columns[model.get_support()]\n", "metadata": {"problem_id": 860, "library_problem_id": 43, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 41}}
{"id": 332, "code": "\nclosest_50_samples = X[np.argsort(km.transform(X)[:, p])[:50]]\n", "metadata": {"problem_id": 862, "library_problem_id": 45, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 45}}
{"id": 333, "code": "\nclosest_100_samples = X[np.argsort(km.transform(X)[:, p])[:100]]\n", "metadata": {"problem_id": 864, "library_problem_id": 47, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 334, "code": "\n<code>\n    km.fit(X)\n    cluster_centers = km.cluster_centers_\n    pth_center = cluster_centers[p - 1]\n    distances = np.linalg.norm(X - pth_center, axis=1)\n    closest_samples = X[np.argsort(distances)[:50]]\n    return closest_samples\n", "metadata": {"problem_id": 865, "library_problem_id": 48, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 335, "code": "\nX_train = pd.get_dummies(X_train[0])\nX_train = X_train.join(X_train.drop(0, axis=1))\n", "metadata": {"problem_id": 866, "library_problem_id": 49, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 336, "code": "\nX_train = pd.get_dummies(X_train[0])\nX_train = X_train.join(X_train.drop(columns=[0]))\n", "metadata": {"problem_id": 867, "library_problem_id": 50, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 49}}
{"id": 337, "code": "\n<code>\nfrom sklearn.svm import SVR\n\nmodel = SVR(kernel='rbf')\nmodel.fit(X, y)\npredict = model.predict(X)\n", "metadata": {"problem_id": 868, "library_problem_id": 51, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 51}}
{"id": 338, "code": "\n<code>\nfrom sklearn.svm import SVR\n\nmodel = SVR(kernel='poly', degree=2)\nmodel.fit(X, y)\npredict = model.predict(X)\n", "metadata": {"problem_id": 870, "library_problem_id": 53, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 51}}
{"id": 339, "code": "\ncosine_similarities_of_queries = np.array([tfidf.transform([query]).dot(tfidf.transform(documents).T).toarray()[0] for query in queries])\n", "metadata": {"problem_id": 872, "library_problem_id": 55, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 55}}
{"id": 340, "code": "\nnew_f = pd.DataFrame(np.concatenate([np.array(x) for x in f], axis=0), columns=[f't{i}' for i in range(1, max([len(x) for x in f]) + 1)])\nnew_f = new_f.fillna(0).astype(int)\n", "metadata": {"problem_id": 876, "library_problem_id": 59, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"id": 341, "code": "\ncluster_labels = sklearn.cluster.AgglomerativeClustering(n_clusters=2, affinity='precomputed', linkage='complete').fit_predict(data_matrix)\n", "metadata": {"problem_id": 880, "library_problem_id": 63, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 342, "code": "\ncluster_labels = sklearn.cluster.AgglomerativeClustering(n_clusters=2, linkage='complete').fit_predict(data_matrix)\n", "metadata": {"problem_id": 881, "library_problem_id": 64, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 63}}
{"id": 343, "code": "\ncluster_labels = scipy.cluster.hierarchy.linkage(data_matrix, method='complete').astype(int)\ncluster_labels = scipy.cluster.hierarchy.fcluster(cluster_labels, 2, criterion='maxclust') - 1\n", "metadata": {"problem_id": 883, "library_problem_id": 66, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"id": 344, "code": "\ncluster_labels = scipy.cluster.hierarchy.fcluster(scipy.cluster.hierarchy.linkage(data_matrix, method='complete'), 2, criterion='maxclust') - 1\n", "metadata": {"problem_id": 884, "library_problem_id": 67, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 66}}
{"id": 345, "code": "\ncentered_scaled_data = sklearn.preprocessing.scale(data, with_mean=True, with_std=True)\n", "metadata": {"problem_id": 886, "library_problem_id": 69, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 69}}
{"id": 346, "code": "\ncentered_scaled_data = sklearn.preprocessing.scale(data - np.mean(data, axis=0))\n", "metadata": {"problem_id": 887, "library_problem_id": 70, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 69}}
{"id": 347, "code": "\nbox_cox_data = sklearn.preprocessing.PowerTransformer(method='box-cox').fit_transform(data)\n", "metadata": {"problem_id": 888, "library_problem_id": 71, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"id": 348, "code": "\nbox_cox_data, _ = sklearn.preprocessing.power_transform(data, method='box-cox')\n", "metadata": {"problem_id": 889, "library_problem_id": 72, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 71}}
{"id": 349, "code": "\n<code>\nfrom sklearn.preprocessing import PowerTransformer\n\ntransformer = PowerTransformer(method='yeo-johnson')\nyeo_johnson_data = transformer.fit_transform(data)\n", "metadata": {"problem_id": 891, "library_problem_id": 74, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 73}}
{"id": 350, "code": "\ntransformed_text = CountVectorizer(token_pattern=r'(?u)\\b\\w+\\b', lowercase=False).fit_transform(text)\n", "metadata": {"problem_id": 892, "library_problem_id": 75, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 75}}
{"id": 351, "code": "\n<code>\nfrom sklearn.model_selection import train_test_split\n\nX = dataset.iloc[:, :-1]\ny = dataset.iloc[:, -1]\n\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n", "metadata": {"problem_id": 893, "library_problem_id": 76, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 352, "code": "\n<code>\nfrom sklearn.model_selection import train_test_split\n\nX = dataset.iloc[:, :-1]\ny = dataset.iloc[:, -1]\n\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n", "metadata": {"problem_id": 895, "library_problem_id": 78, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 353, "code": "\n<code>\n    X = data.iloc[:, :-1]\n    y = data.iloc[:, -1]\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    return X_train, y_train, X_test, y_test\n", "metadata": {"problem_id": 896, "library_problem_id": 79, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 354, "code": "\n<code>\nkmeans = KMeans(n_clusters=2, n_init=10).fit(df['mse'].values.reshape(-1, 1))\nlabels = kmeans.labels_\n", "metadata": {"problem_id": 897, "library_problem_id": 80, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 355, "code": "\nselected_feature_names = np.asarray(vectorizer.get_feature_names())[featureSelector.get_support()]\n", "metadata": {"problem_id": 900, "library_problem_id": 83, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 82}}
{"id": 356, "code": "\nvectorizer = CountVectorizer(stop_words=\"english\", binary=True, lowercase=False, vocabulary={'Jscript', '.Net', 'TypeScript', 'NodeJS', 'Angular', 'Mongo', 'CSS', 'Python', 'PHP', 'Photoshop', 'Oracle', 'Linux', 'C++', 'Java', 'TeamCity', 'Frontend', 'Backend', 'Full stack', 'UI Design', 'Web', 'Integration', 'Database design', 'UX'})\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names()\n", "metadata": {"problem_id": 903, "library_problem_id": 86, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 85}}
{"id": 357, "code": "\nvectorizer = CountVectorizer(stop_words=\"english\", binary=True, lowercase=False, vocabulary={'Jscript', '.Net', 'TypeScript', 'SQL', 'NodeJS', 'Angular', 'Mongo', 'CSS', 'Python', 'PHP', 'Photoshop', 'Oracle', 'Linux', 'C++', 'Java', 'TeamCity', 'Frontend', 'Backend', 'Full stack', 'UI Design', 'Web', 'Integration', 'Database design', 'UX'})\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names()\n\n# Reorder feature_names to match the order in X\nfeature_names = np.array(feature_names)[np.argsort(vectorizer.vocabulary_)]\n", "metadata": {"problem_id": 904, "library_problem_id": 87, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 85}}
{"id": 358, "code": "\n<code>\nvectorizer = CountVectorizer(stop_words=\"english\", binary=True, lowercase=False, vocabulary={'Jscript', '.Net', 'TypeScript', 'NodeJS', 'Angular', 'Mongo', 'CSS', 'Python', 'PHP', 'Photoshop', 'Oracle', 'Linux', 'C++', 'Java', 'TeamCity', 'Frontend', 'Backend', 'Full stack', 'UI Design', 'Web', 'Integration', 'Database design', 'UX'})\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names()\n", "metadata": {"problem_id": 905, "library_problem_id": 88, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 85}}
{"id": 359, "code": "\ntransformed_df = df.copy()\nlabel_encoder = LabelEncoder()\ntransformed_df['Sex'] = label_encoder.fit_transform(transformed_df['Sex'])\n", "metadata": {"problem_id": 909, "library_problem_id": 92, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 91}}
{"id": 360, "code": "\nElasticNet = linear_model.ElasticNet()\nElasticNet.fit(X_train, y_train)\n\ntraining_set_score = ElasticNet.score(X_train, y_train)\ntest_set_score = ElasticNet.score(X_test, y_test)\n", "metadata": {"problem_id": 911, "library_problem_id": 94, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 94}}
{"id": 361, "code": "\ntransformed = MinMaxScaler().fit_transform(np_array.reshape(-1, 1)).reshape(np_array.shape)\n", "metadata": {"problem_id": 912, "library_problem_id": 95, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"id": 362, "code": "\ntransformed = MinMaxScaler().fit_transform(np_array.reshape(-1, 1)).reshape(np_array.shape)\n", "metadata": {"problem_id": 913, "library_problem_id": 96, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 95}}
{"id": 363, "code": "\npredict = clf.predict(b)\n", "metadata": {"problem_id": 915, "library_problem_id": 98, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 98}}
{"id": 364, "code": "\n\nnew_X = np.array(X).astype(float)\nclf.fit(new_X, ['2', '3'])\n", "metadata": {"problem_id": 917, "library_problem_id": 100, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Surface", "perturbation_origin_id": 99}}
{"id": 365, "code": "\n\nX = dataframe.iloc[:, :-1].astype(float)\ny = dataframe.iloc[:, -1]\nlogReg = LogisticRegression()\nlogReg.fit(X, y)\npredict = logReg.predict(X)\n", "metadata": {"problem_id": 920, "library_problem_id": 103, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 102}}
{"id": 366, "code": "\ntrain_size = 0.2\ntrain_dataframe, test_dataframe = train_test_split(features_dataframe, train_size=train_size)\ntrain_dataframe = train_dataframe.sort_values(by='date')\ntest_dataframe = test_dataframe.sort_values(by='date')\n", "metadata": {"problem_id": 921, "library_problem_id": 104, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 104}}
{"id": 367, "code": "\n<code>\n    train_size = 0.2\n    train_dataframe, test_dataframe = train_test_split(features_dataframe, train_size=train_size)\n    train_dataframe = train_dataframe.sort_values(by='date')\n    test_dataframe = test_dataframe.sort_values(by='date')\n    return train_dataframe, test_dataframe\n", "metadata": {"problem_id": 923, "library_problem_id": 106, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"id": 368, "code": "\ncols = df.columns[2:4]\ndf[cols + '_scale'] = df.groupby('Month')[cols].apply(lambda x: scaler.fit_transform(x))\n", "metadata": {"problem_id": 924, "library_problem_id": 107, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"id": 369, "code": "\nmyData[['new_A2', 'new_A3']] = myData.groupby('Month')[['A2', 'A3']].transform(lambda x: scaler.fit_transform(x))\n", "metadata": {"problem_id": 925, "library_problem_id": 108, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 107}}
{"id": 370, "code": "\nfull_results = pd.DataFrame(GridSearch_fitted.cv_results_)\nfull_results = full_results.sort_values('mean_fit_time', ascending=False)\n", "metadata": {"problem_id": 929, "library_problem_id": 112, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 111}}
{"id": 371, "code": "\ncosine_similarity_matrix = cosine_similarity(tfidf.fit_transform(df['description']))\n", "metadata": {"problem_id": 931, "library_problem_id": 114, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"id": 372, "code": "\n\noptim.param_groups[0]['lr'] = 0.001\n", "metadata": {"problem_id": 932, "library_problem_id": 0, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 373, "code": "\n\noptim.param_groups[0]['lr'] = 0.0005\n", "metadata": {"problem_id": 934, "library_problem_id": 2, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 374, "code": "\n\noptim.param_groups[0]['lr'] = 0.05\n", "metadata": {"problem_id": 935, "library_problem_id": 3, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"id": 375, "code": "\nembedding_weights = torch.FloatTensor(word2vec.wv.vectors)\nembedded_input = torch.nn.Embedding.from_pretrained(embedding_weights)\nembedded_input = embedded_input(input_Tensor)\n", "metadata": {"problem_id": 936, "library_problem_id": 4, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 376, "code": "\npx = pd.DataFrame(x.numpy())\n", "metadata": {"problem_id": 938, "library_problem_id": 6, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 6}}
{"id": 377, "code": "\npx = pd.DataFrame(x.detach().numpy())\n", "metadata": {"problem_id": 939, "library_problem_id": 7, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 6}}
{"id": 378, "code": "\npx = pd.DataFrame(x.numpy())\n", "metadata": {"problem_id": 940, "library_problem_id": 8, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 6}}
{"id": 379, "code": "\nx_tensor = torch.tensor(x_array)", "metadata": {"problem_id": 949, "library_problem_id": 17, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 16}}
{"id": 380, "code": "\nmask = torch.zeros(len(lens), max(lens), dtype=torch.long)\nmask[torch.arange(len(lens)), lens - 1] = 1\n", "metadata": {"problem_id": 952, "library_problem_id": 20, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 19}}
{"id": 381, "code": "\n    result = torch.diag_embed(t)\n    return result\n", "metadata": {"problem_id": 956, "library_problem_id": 24, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 23}}
{"id": 382, "code": "\n<code>\n    if a.shape[0] == 2 and b.shape[0] == 1:\n        b = b.expand(2, -1)\n    ab = torch.cat((a, b), dim=0)\n    return ab\n", "metadata": {"problem_id": 959, "library_problem_id": 27, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 25}}
{"id": 383, "code": "\na[:, lengths:, :] = 0\n", "metadata": {"problem_id": 960, "library_problem_id": 28, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"id": 384, "code": "\na[:, :lengths, :] = 0\n", "metadata": {"problem_id": 962, "library_problem_id": 30, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 28}}
{"id": 385, "code": "\nnew_tensors = torch.stack(list)\n", "metadata": {"problem_id": 965, "library_problem_id": 33, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 386, "code": "\n    tensor_of_tensors = torch.stack(lt)\n    return tensor_of_tensors\n    ### END SOLUTION\n", "metadata": {"problem_id": 966, "library_problem_id": 34, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 387, "code": "\ntensor_of_tensors = torch.stack(list_of_tensors)\n", "metadata": {"problem_id": 967, "library_problem_id": 35, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 32}}
{"id": 388, "code": "\nresult = t[np.arange(len(idx)), idx]\n", "metadata": {"problem_id": 970, "library_problem_id": 38, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"id": 389, "code": "\nresult = x.gather(1, ids.unsqueeze(1)).squeeze(1)\n", "metadata": {"problem_id": 971, "library_problem_id": 39, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 390, "code": "\ncnt_equal = torch.sum(A == B).item()", "metadata": {"problem_id": 980, "library_problem_id": 48, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"id": 391, "code": "\ncnt_equal = torch.sum(A == B).item()", "metadata": {"problem_id": 981, "library_problem_id": 49, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 48}}
{"id": 392, "code": "\ncnt_equal = torch.sum(A[-x:] == B[-x:]).item()", "metadata": {"problem_id": 984, "library_problem_id": 52, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 48}}
{"id": 393, "code": "\n\ntensors_31 = torch.chunk(a, chunk_dim, dim=3)\n", "metadata": {"problem_id": 986, "library_problem_id": 54, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 394, "code": "\noutput[mask == 1] = clean_input_spectrogram[mask == 1]\n", "metadata": {"problem_id": 988, "library_problem_id": 56, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 56}}
{"id": 395, "code": "\n<code>\n    sign_x = torch.sign(x)\n    sign_y = torch.sign(y)\n    min_abs = torch.min(torch.abs(x), torch.abs(y))\n    signed_min = sign_x * min_abs\n    mask = torch.abs(y) < torch.abs(x)\n    signed_min[mask] = sign_y[mask] * min_abs[mask]\n    return signed_min\n", "metadata": {"problem_id": 992, "library_problem_id": 60, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"id": 396, "code": "\nconfidence_score = torch.softmax(MyNet(input), dim=1)[0, classes.item()]\n", "metadata": {"problem_id": 993, "library_problem_id": 61, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 397, "code": "\nresult = torch.cat([a[:, :-1], b[:, 1:], torch.mean(a[:, -1:].unsqueeze(1) + b[:, :1], dim=1)], dim=1)\n", "metadata": {"problem_id": 994, "library_problem_id": 62, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"id": 398, "code": "\nresult = torch.cat([t, torch.zeros(1, t.shape[1], 1)], dim=2)\nresult = torch.cat([result, torch.zeros(1, t.shape[1], 1)], dim=1)\nresult = torch.cat([torch.zeros(1, t.shape[1], 1), result], dim=0)\n", "metadata": {"problem_id": 997, "library_problem_id": 65, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 64}}
{"id": 399, "code": "\nresult = torch.cat([t, torch.full((1, t.shape[1], 1), -1)], dim=2)\nresult = torch.cat([result, torch.full((1, result.shape[1], 1), -1)], dim=1)\n", "metadata": {"problem_id": 998, "library_problem_id": 66, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 64}}
