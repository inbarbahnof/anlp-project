{"id": 0, "code": "result = df.iloc[List]\n", "metadata": {"problem_id": 0, "library_problem_id": 0, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 1, "code": "result = df.iloc[List]\n", "metadata": {"problem_id": 1, "library_problem_id": 1, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"id": 2, "code": "result = df.apply(lambda x: x.where(x.map(x.value_counts()) >= 2, 'other'))\n", "metadata": {"problem_id": 2, "library_problem_id": 2, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 2}}
{"id": 3, "code": "result = df.apply(lambda x: x.where(x.map(x.value_counts()) >= 3, 'other'))\n", "metadata": {"problem_id": 3, "library_problem_id": 3, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 2}}
{"id": 4, "code": "\n    result = df['datetime'].dt.tz_localize(None)\n    ### END SOLUTION\n    return result\n\n\n\nA: You can use the dt accessor to get the datetime part of the datetime column:\ndf['datetime'] = df['datetime'].dt.tz_localize(None)\n\n", "metadata": {"problem_id": 12, "library_problem_id": 12, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 5, "code": "df['datetime'] = df['datetime'].dt.tz_localize(None)\ndf['datetime'] = df['datetime'].dt.strftime('%d-%b-%Y %H:%M:%S')\n", "metadata": {"problem_id": 13, "library_problem_id": 13, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 11}}
{"id": 6, "code": "df['datetime'] = df['datetime'].dt.tz_localize(None)\n", "metadata": {"problem_id": 14, "library_problem_id": 14, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 11}}
{"id": 7, "code": "def parse_message(message):\n    message = message.strip('[]')\n    message = message.split(', ')\n    message = [x.split(': ') for x in message]\n    message = {x[0]: x[1] for x in message}\n    return message\n\n\ndef expand_message(message):\n    message = parse_message(message)\n    return pd.Series(message)\n\n\ndf['message'] = df['message'].apply(expand_message)\ndf = df.join(df['message'].apply(pd.Series))\ndf = df.drop(columns=['message'])\n", "metadata": {"problem_id": 15, "library_problem_id": 15, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 15}}
{"id": 8, "code": "df.loc[df['product'].isin(products), 'score'] *= 10\n", "metadata": {"problem_id": 16, "library_problem_id": 16, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 9, "code": "df.loc[df['product'].isin(products), 'score'] = (df.loc[df['product'].isin(products), 'score'] - df.loc[df['product'].isin(products), 'score'].min()) / (df.loc[df['product'].isin(products), 'score'].max() - df.loc[df['product'].isin(products), 'score'].min())\n", "metadata": {"problem_id": 19, "library_problem_id": 19, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"id": 10, "code": "df['category'] = df.apply(lambda x: [k for k, v in x.items() if v == 1], axis=1)\n", "metadata": {"problem_id": 22, "library_problem_id": 22, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 20}}
{"id": 11, "code": "df['Date'] = df['Date'].dt.strftime('%b-%Y')\n", "metadata": {"problem_id": 23, "library_problem_id": 23, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 23}}
{"id": 12, "code": "df = df.shift(1, axis=0)\ndf.iloc[-1] = df.iloc[0]\ndf = df.drop(df.index[0])\n", "metadata": {"problem_id": 27, "library_problem_id": 27, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 26}}
{"id": 13, "code": "df.columns = [f\"X{col}X\" for col in df.columns]\n", "metadata": {"problem_id": 32, "library_problem_id": 32, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 30}}
{"id": 14, "code": "df.groupby('group').agg({\"group_color\": \"first\", \"val1\": \"mean\", \"val2\": \"mean\",\"val3\":\"mean\"})\n", "metadata": {"problem_id": 33, "library_problem_id": 33, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 33}}
{"id": 15, "code": "result = df.loc[row_list,column_list].sum()\n", "metadata": {"problem_id": 37, "library_problem_id": 37, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"id": 16, "code": "result = df.apply(pd.Series.value_counts).fillna(0)\n", "metadata": {"problem_id": 39, "library_problem_id": 39, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 17, "code": "result = df.isnull().sum()\n", "metadata": {"problem_id": 40, "library_problem_id": 40, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 39}}
{"id": 18, "code": "for col in df.columns:\n    print('---- {} ---'.format(col))\n    print(df[col].value_counts())\n", "metadata": {"problem_id": 41, "library_problem_id": 41, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 39}}
{"id": 19, "code": "result = df.iloc[0].append(df.iloc[1])\n", "metadata": {"problem_id": 43, "library_problem_id": 43, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 20, "code": "result = df.sort_values(by=['0','1','2'],ascending=False)\n", "metadata": {"problem_id": 46, "library_problem_id": 46, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 44}}
{"id": 21, "code": "df.loc[df['value'] < thresh, 'value'] = 'X'\ndf.groupby('value').sum()\n", "metadata": {"problem_id": 47, "library_problem_id": 47, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 47}}
{"id": 22, "code": "import numpy as np\n\n\nresult = df.copy()\nfor col in df.columns:\n    result[f\"exp_{col}\"] = np.exp(df[col])\n", "metadata": {"problem_id": 51, "library_problem_id": 51, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 50}}
{"id": 23, "code": "df['dt'] = pd.to_datetime(df['dt'])\ndf['dt'] = df.groupby('user')['dt'].transform(lambda x: pd.date_range(x.min(), x.max()))\ndf = df.explode('dt')\ndf = df.merge(df.groupby('user')['val'].max().reset_index(), on='user')\ndf = df.sort_values(['user', 'dt'])\ndf = df.reset_index(drop=True)\n", "metadata": {"problem_id": 59, "library_problem_id": 59, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 56}}
{"id": 24, "code": "df['a'] = df.groupby('name').ngroup() + 1\n", "metadata": {"problem_id": 62, "library_problem_id": 62, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 61}}
{"id": 25, "code": "\n    df['name'] = df['name'].astype('category').cat.codes\n    ### END SOLUTION\n    return df\n\n\n\nA: You can use the pandas.factorize function:\ndf['name'] = pd.factorize(df['name'])[0]\n\n", "metadata": {"problem_id": 63, "library_problem_id": 63, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 61}}
{"id": 26, "code": "df['ID'] = df.groupby(['name', 'a']).ngroup() + 1\nresult = df[['ID', 'b', 'c']]\n", "metadata": {"problem_id": 64, "library_problem_id": 64, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 61}}
{"id": 27, "code": "df = df.melt(id_vars=['user', 'someBool'], var_name='date', value_name='value')\n", "metadata": {"problem_id": 65, "library_problem_id": 65, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"id": 28, "code": "\n    return df.loc[df.c > 0.5, columns]\n    ### END SOLUTION\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "metadata": {"problem_id": 70, "library_problem_id": 70, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 29, "code": "\n    result = df[df.c > 0.5][columns]\n    result['sum'] = result.sum(axis=1)\n    ### END SOLUTION\n    return result\n\n\ndf = pd.DataFrame(np.random.rand(4,5), columns = list('abcde'))\nprint df\n          a         b         c         d         e\n0  0.945686  0.000710  0.909158  0.892892  0.326670\n1  0.919359  0.667057  0.462478  0.008204  0.473096\n2  0.976163  0.621712  0.208423  0.980471  0.048334\n3  0.459039  0.788318  0.309892  0.100539  0.753992\n\nprint f(df)\n          b         e        sum\n0  0.000710  0.326670  0.327380\n1  0.667057  0.473096  1.140153\n2  0.621712  0.048334  0.670046\n3  0.788318  0.753992  1.542310\n\n\nA: You can use the loc method to select the columns you want, then use the sum method to add the sum column:\ndf.loc[:, ['b', 'e']].sum(axis=1)\n\n", "metadata": {"problem_id": 71, "library_problem_id": 71, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 30, "code": "df['date'] = pd.to_datetime(df['date'])\ndf['date'] = df['date'].dt.date\ndf['date'] = df['date'].astype(str)\ndf['date'] = pd.to_datetime(df['date'])\ndf['date'] = df['date'].dt.date\ndf['date'] = df['date'].astype(str)\ndf['date'] = pd.to_datetime(df['date'])\ndf['date'] = df['date'].dt.date\ndf['date'] = df['date'].astype(str)\ndf['date'] = pd.to_datetime(df['date'])\ndf['date'] = df['date'].dt.date\ndf['date'] = df['date'].astype(str)\ndf['date'] = pd.to_datetime(df['date'])\ndf['date'] = df['date'].dt.date\ndf['date'] = df['date'].astype(str)\ndf['date'] = pd.to_datetime(df['date'])\ndf['date'] = df['date'].dt.date\ndf['date'] = df['date'].astype(str)\ndf['date'] = pd.to_datetime(df['date'])\ndf['date'] = df['date'].dt.date\ndf['date'] = df['date'].astype(str)\ndf['date'] = pd.to_datetime(df['date'])\ndf['date'] = df['date'].dt.date\ndf['date'] = df['date'].astype(str)\ndf['date'] = pd.to_datetime(df['date'])\ndf['date'] = df['date'].dt.date\ndf['date'] = df['date'].astype(str)\ndf['date'] = pd.to_datetime(df['date'])\ndf['date'] = df['date'].dt.date\ndf['date'] = df['date'].astype(str)\ndf['date'] = pd.to_datetime(df['date'])\ndf['date'] = df['date'].dt.date\ndf['date'] = df['date'].astype(str)\ndf['date'] = pd.to_datetime(df['date'])\ndf['date'] = df['date'].dt.date\ndf['date'] = df['date'].astype(str)\ndf['date'] = pd.to_datetime(df['date'])\ndf['date'] = df['date'].dt.date\ndf['date'] = df['date'].astype(str)\ndf['date'] = pd.to_datetime(df['date'])\ndf['date'] = df['date'].dt.date\ndf['date'] = df['date'].astype(str)\ndf['date'] = pd.to_datetime(df['date'])\ndf['date'] = df['date'].dt.date\ndf['date'] = df['date'].astype(str)\ndf['date'] = pd.to_datetime(df['date'])\ndf['date'] = df['date'].dt.date\ndf['date'] = df['date'].astype(str)\ndf['date'] = pd.to_datetime(df['date'])\ndf['date'] = df['date'].dt.date\ndf['date'] = df['date'].astype(str)\ndf['date'] = pd.to_datetime(df['date'])\ndf['date'] = df['date'].dt.date\ndf['date'] = df['date'].astype(str)\ndf['date'] = pd.to_datetime(df['date'])\ndf['date'] = df['date'].dt.date\ndf['date'] = df['date'].astype(str)\ndf['date'] = pd.to_datetime(df['date'])\ndf['date'] = df['date'].dt.date\ndf['date'] = df['date'].astype(str)\ndf['date'] = pd.to_datetime(df['date'])\ndf['date'] = df['date'].dt.date\ndf['date'] = df['date'].astype(str)\ndf['date'] = pd.to_datetime(df['date'])\ndf['date'] = df['date'].dt.date\ndf['date'] = df['date'].astype(str)\ndf['date'] = pd.to_datetime(df['date'])\ndf['date'] = df['date'].dt.date\ndf['date']", "metadata": {"problem_id": 73, "library_problem_id": 73, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 73}}
{"id": 31, "code": "df['date'] = pd.to_datetime(df['date'], format='%m/%d/%y')\ndf = df.sort_values(by='date')\ndf['date'] = df['date'].dt.strftime('%d-%b-%Y')\ndf['date'] = pd.to_datetime(df['date'], format='%d-%b-%Y')\ndf = df.set_index('date')\ndf = df.resample('W').first()\ndf = df.dropna()\ndf = df.reset_index()\ndf = df.sort_values(by='date')\ndf = df.drop_duplicates(subset=['date'], keep='first')\ndf = df.set_index('date')\ndf = df.resample('W').first()\ndf = df.dropna()\ndf = df.reset_index()\ndf = df.sort_values(by='date')\ndf = df.drop_duplicates(subset=['date'], keep='first')\ndf = df.set_index('date')\ndf = df.resample('W').first()\ndf = df.dropna()\ndf = df.reset_index()\ndf = df.sort_values(by='date')\ndf = df.drop_duplicates(subset=['date'], keep='first')\ndf = df.set_index('date')\ndf = df.resample('W').first()\ndf = df.dropna()\ndf = df.reset_index()\ndf = df.sort_values(by='date')\ndf = df.drop_duplicates(subset=['date'], keep='first')\ndf = df.set_index('date')\ndf = df.resample('W').first()\ndf = df.dropna()\ndf = df.reset_index()\ndf = df.sort_values(by='date')\ndf = df.drop_duplicates(subset=['date'], keep='first')\ndf = df.set_index('date')\ndf = df.resample('W').first()\ndf = df.dropna()\ndf = df.reset_index()\ndf = df.sort_values(by='date')\ndf = df.drop_duplicates(subset=['date'], keep='first')\ndf = df.set_index('date')\ndf = df.resample('W').first()\ndf = df.dropna()\ndf = df.reset_index()\ndf = df.sort_values(by='date')\ndf = df.drop_duplicates(subset=['date'], keep='first')\ndf = df.set_index('date')\ndf = df.resample('W').first()\ndf = df.dropna()\ndf = df.reset_index()\ndf = df.sort_values(by='date')\ndf = df.drop_duplicates(subset=['date'], keep='first')\ndf = df.set_index('date')\ndf = df.resample('W').first()\ndf = df.dropna()\ndf = df.reset_index()\ndf = df.sort_values(by='date')\ndf = df.drop_duplicates(subset=['date'], keep='first')\ndf = df.set_index('date')\ndf = df.resample('W').first()\ndf = df.dropna()\ndf = df.reset_index()\ndf = df.sort_values(by='date')\ndf = df.drop_duplicates(subset=['date'], keep='first')\ndf = df.set_index('date')\ndf = df.resample('W').first()\ndf = df.dropna()\ndf = df.reset_index()\ndf = df.sort_values(by='date')\ndf = df.drop_duplicates(subset=['date'], keep='first')\ndf = df.set_index('date')\ndf = df.resample('W').first()\ndf = df.dropna()\ndf = df.reset_index()\ndf = df.sort_values(by='date')\ndf = df.drop_duplicates(subset=['date'], keep='first')\ndf = df.set_index('date')\ndf = df.resample('W').first()\ndf = df.", "metadata": {"problem_id": 75, "library_problem_id": 75, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 73}}
{"id": 32, "code": "df.groupby(df.index // 3).sum()\n", "metadata": {"problem_id": 80, "library_problem_id": 80, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 76}}
{"id": 33, "code": "df['A'] = df['A'].fillna(method='ffill')\n", "metadata": {"problem_id": 82, "library_problem_id": 82, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 34, "code": "df['A'] = df['A'].fillna(method='bfill')\n", "metadata": {"problem_id": 83, "library_problem_id": 83, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 82}}
{"id": 35, "code": "df['A'] = df['A'].replace(0, df['A'].shift(1).fillna(0).replace(0, method='ffill'))\n", "metadata": {"problem_id": 84, "library_problem_id": 84, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 36, "code": "df['number'] = df.duration.str.extract('(\\d+)')\ndf['time'] = df.duration.str.extract('(\\w+)')\ndf['time_days'] = df.time.replace({'year': 365, 'month': 30, 'week': 7, 'day': 1})\n", "metadata": {"problem_id": 85, "library_problem_id": 85, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 37, "code": "df.index = df.index.set_levels(pd.to_datetime(df.index.levels[1]), level=1)\ndf\n", "metadata": {"problem_id": 91, "library_problem_id": 91, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 91}}
{"id": 38, "code": "\n    df.index = pd.to_datetime(df.index)\n    return df.values\n    ### END SOLUTION\n\ndf = pd.DataFrame({'x': [100, 90, 80], 'y': [7, 8, 9]}, index=['3/1/1994', '9/1/1994', '3/1/1995'])\nprint(f(df))\n", "metadata": {"problem_id": 93, "library_problem_id": 93, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 91}}
{"id": 39, "code": "df = pd.melt(df, id_vars=['Country', 'Variable'], var_name='year', value_name='value')\ndf = df.sort_values(by=['Country', 'Variable', 'year'])\ndf = df.reset_index(drop=True)\n", "metadata": {"problem_id": 95, "library_problem_id": 95, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"id": 40, "code": "df[abs(df.iloc[:, 2:]) < 1]\n", "metadata": {"problem_id": 97, "library_problem_id": 97, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"id": 41, "code": "df.replace('&AMP;', '&', regex=True)\n", "metadata": {"problem_id": 100, "library_problem_id": 100, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 100}}
{"id": 42, "code": "df.replace('&LT;', '<', regex=True)\n", "metadata": {"problem_id": 101, "library_problem_id": 101, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 100}}
{"id": 43, "code": "\n    df.replace('&AMP;', '&', regex=True, inplace=True)\n    ### END SOLUTION\n    return df\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "metadata": {"problem_id": 102, "library_problem_id": 102, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 100}}
{"id": 44, "code": "df.replace({'&AMP;': '&', '&LT;': '<', '&GT;': '>'}, regex=True)\n", "metadata": {"problem_id": 103, "library_problem_id": 103, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 100}}
{"id": 45, "code": "df['state'] = df.apply(lambda x: x['col1'] if x['col2'] > 50 and x['col3'] > 50 else x['col1'] + x['col2'] + x['col3'], axis=1)\n", "metadata": {"problem_id": 111, "library_problem_id": 111, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 110}}
{"id": 46, "code": "result = df.loc[test]\n", "metadata": {"problem_id": 117, "library_problem_id": 117, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 117}}
{"id": 47, "code": "result = df.loc[test]\n", "metadata": {"problem_id": 118, "library_problem_id": 118, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 117}}
{"id": 48, "code": "result = df.drop(test)\n", "metadata": {"problem_id": 119, "library_problem_id": 119, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 117}}
{"id": 49, "code": "\n    result = df.loc[test]\n    ### END SOLUTION\n    return result\n\n\ndf = pd.DataFrame({'alleles': ['A/C', 'A/T', 'T/A', 'C/A', 'C/T'],\n                   'chrom': [0, 0, 0, 0, 0],\n                   'pos': [3, 7, 12, 15, 18],\n                   'strand': ['+', '+', '+', '+', '+'],\n                   'assembly#': [np.nan, np.nan, np.nan, np.nan, np.nan],\n                   'center': [np.nan, np.nan, np.nan, np.nan, np.nan],\n                   'protLSID': [np.nan, np.nan, np.nan, np.nan, np.nan],\n                   'assayLSID': [np.nan, np.nan, np.nan, np.nan, np.nan]},\n                  index=['TP3', 'TP7', 'TP12', 'TP15', 'TP18'])\n\ntest = ['TP3', 'TP12', 'TP18', 'TP3']\n\nresult = f(df, test)\n\nprint(result)\n\n", "metadata": {"problem_id": 120, "library_problem_id": 120, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 117}}
{"id": 50, "code": "df2 = df.groupby('time').apply(lambda x: x.assign(nearest_neighbour=x.apply(lambda y: x.loc[x.index != y.name, 'car'].apply(lambda z: np.sqrt((y.x - z.x)**2 + (y.y - z.y)**2)).idxmin()).values, euclidean_distance=x.apply(lambda y: x.loc[x.index != y.name, 'car'].apply(lambda z: np.sqrt((y.x - z.x)**2 + (y.y - z.y)**2)).min()).values))\n", "metadata": {"problem_id": 121, "library_problem_id": 121, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 121}}
{"id": 51, "code": "df2 = df.groupby('time').apply(lambda x: x.assign(farmost_neighbour=x.apply(lambda y: x.loc[x.euclidean_distance(y).idxmin()].car, axis=1)))\n", "metadata": {"problem_id": 122, "library_problem_id": 122, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 52, "code": "df['keywords_all'] = df.apply(lambda x: '-'.join(x.dropna().astype(str)), axis=1)\n", "metadata": {"problem_id": 126, "library_problem_id": 126, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 53, "code": "df.sample(frac=0.2, random_state=0).assign(Quantity=0)\n", "metadata": {"problem_id": 127, "library_problem_id": 127, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 127}}
{"id": 54, "code": "df['index_original'] = df.duplicated(subset=['col1','col2', '3col'], keep='first').cumsum()\n", "metadata": {"problem_id": 133, "library_problem_id": 133, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 130}}
{"id": 55, "code": "result = df.loc[df.groupby(['Sp', 'Mt'])['count'].idxmax()]\n", "metadata": {"problem_id": 135, "library_problem_id": 135, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 135}}
{"id": 56, "code": "df.loc[df.groupby(['Sp','Mt'])['count'].idxmax()]\n", "metadata": {"problem_id": 136, "library_problem_id": 136, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 135}}
{"id": 57, "code": "df.loc[df.groupby(['Sp','Value'])['count'].idxmax()]\n", "metadata": {"problem_id": 138, "library_problem_id": 138, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 135}}
{"id": 58, "code": "df.columns = [list('AAAAAA'), list('BBCCDD'), list('EFGHIJ')]\ndf.columns = df.columns.to_flat_index()\ndf.columns = df.columns.map(lambda x: '_'.join(x))\ndf.columns = df.columns.str.split('_', expand=True)\ndf.columns = df.columns.map(lambda x: '_'.join(x))\ndf.columns = df.columns.str.split('_', expand=True)\ndf.columns = df.columns.map(lambda x: '_'.join(x))\ndf.columns = df.columns.str.split('_', expand=True)\ndf.columns = df.columns.map(lambda x: '_'.join(x))\ndf.columns = df.columns.str.split('_', expand=True)\ndf.columns = df.columns.map(lambda x: '_'.join(x))\ndf.columns = df.columns.str.split('_', expand=True)\ndf.columns = df.columns.map(lambda x: '_'.join(x))\ndf.columns = df.columns.str.split('_', expand=True)\ndf.columns = df.columns.map(lambda x: '_'.join(x))\ndf.columns = df.columns.str.split('_', expand=True)\ndf.columns = df.columns.map(lambda x: '_'.join(x))\ndf.columns = df.columns.str.split('_', expand=True)\ndf.columns = df.columns.map(lambda x: '_'.join(x))\ndf.columns = df.columns.str.split('_', expand=True)\ndf.columns = df.columns.map(lambda x: '_'.join(x))\ndf.columns = df.columns.str.split('_', expand=True)\ndf.columns = df.columns.map(lambda x: '_'.join(x))\ndf.columns = df.columns.str.split('_', expand=True)\ndf.columns = df.columns.map(lambda x: '_'.join(x))\ndf.columns = df.columns.str.split('_', expand=True)\ndf.columns = df.columns.map(lambda x: '_'.join(x))\ndf.columns = df.columns.str.split('_', expand=True)\ndf.columns = df.columns.map(lambda x: '_'.join(x))\ndf.columns = df.columns.str.split('_', expand=True)\ndf.columns = df.columns.map(lambda x: '_'.join(x))\ndf.columns = df.columns.str.split('_', expand=True)\ndf.columns = df.columns.map(lambda x: '_'.join(x))\ndf.columns = df.columns.str.split('_', expand=True)\ndf.columns = df.columns.map(lambda x: '_'.join(x))\ndf.columns = df.columns.str.split('_', expand=True)\ndf.columns = df.columns.map(lambda x: '_'.join(x))\ndf.columns = df.columns.str.split('_', expand=True)\ndf.columns = df.columns.map(lambda x: '_'.join(x))\ndf.columns = df.columns.str.split('_', expand=True)\ndf.columns = df.columns.map(lambda x: '_'.join(x))\ndf.columns = df.columns.str.split('_', expand=True)\ndf.columns = df.columns.map(lambda x: '_'.join(x))\ndf.columns = df.columns.str.split('_', expand=True)\ndf.columns = df.columns.map(lambda x: '_'.join(x))\ndf.columns = df.columns.str.split('_', expand=True)\ndf.columns = df.columns.map(lambda x: '_'.join(x))\ndf.columns = df.columns.str.split('_', expand=True)\ndf.columns = df.columns.map(lambda x: '_'.join(x))\ndf.columns = df.columns.str.split('_', expand=True)\ndf.columns = df.columns.map(lambda x: '_'.join(x))\ndf.columns = df.columns.str.split('_', expand=True)\ndf.columns = df.columns.map", "metadata": {"problem_id": 142, "library_problem_id": 142, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 141}}
{"id": 59, "code": "df['cumsum'] = df.groupby('id').cumsum()['val']\n", "metadata": {"problem_id": 143, "library_problem_id": 143, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 143}}
{"id": 60, "code": "df['cumsum'] = df.groupby('id').cumsum()['val']\ndf\n", "metadata": {"problem_id": 145, "library_problem_id": 145, "library": "Pandas", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 143}}
{"id": 61, "code": "df.groupby('r')['v'].sum()\n", "metadata": {"problem_id": 149, "library_problem_id": 149, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 148}}
{"id": 62, "code": "df.groupby('l')['v'].sum()\n", "metadata": {"problem_id": 150, "library_problem_id": 150, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 148}}
{"id": 63, "code": "result = df.corr()\n", "metadata": {"problem_id": 153, "library_problem_id": 153, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"id": 64, "code": "df['Has Family'] = (df['SibSp'] > 0) | (df['Parch'] > 0)\ndf.groupby('Has Family').mean()\n", "metadata": {"problem_id": 157, "library_problem_id": 157, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 157}}
{"id": 65, "code": "df['Has Family'] = (df['Survived'] > 0) | (df['Parch'] > 0)\ndf['No Family'] = (df['Survived'] == 0) & (df['Parch'] == 0)\n\nresult = df.groupby(['Has Family', 'No Family'])['SibSp'].mean()\n", "metadata": {"problem_id": 158, "library_problem_id": 158, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 157}}
{"id": 66, "code": "result = df.groupby('cokey').apply(lambda x: x.sort_values('A'))\n", "metadata": {"problem_id": 161, "library_problem_id": 161, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 160}}
{"id": 67, "code": "df.columns = pd.MultiIndex.from_tuples(df.columns)\ndf.columns = df.columns.swaplevel(0,1)\ndf.columns = df.columns.sortlevel(0)\ndf\n", "metadata": {"problem_id": 162, "library_problem_id": 162, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 162}}
{"id": 68, "code": "df.columns = pd.MultiIndex.from_tuples(df.columns)\ndf = df.stack(level=0).swaplevel(0,1).sort_index()\ndf.columns = df.columns.map(lambda x: x[1])\ndf = df.unstack(level=0)\n", "metadata": {"problem_id": 163, "library_problem_id": 163, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 162}}
{"id": 69, "code": "result = pd.DataFrame(list(someTuple)).T\nresult.columns = ['birdType', 'birdCount']\n", "metadata": {"problem_id": 165, "library_problem_id": 165, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 165}}
{"id": 70, "code": "result = df.loc[df.sum(axis=1) != 0]\n", "metadata": {"problem_id": 169, "library_problem_id": 169, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 169}}
{"id": 71, "code": "result = s.sort_values(ascending=False)\n", "metadata": {"problem_id": 173, "library_problem_id": 173, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 173}}
{"id": 72, "code": "df = s.sort_values(ascending=False).reset_index()\n", "metadata": {"problem_id": 174, "library_problem_id": 174, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 173}}
{"id": 73, "code": "df.loc[df.groupby(['Sp', 'Mt'])['count'].idxmin()]\n", "metadata": {"problem_id": 179, "library_problem_id": 179, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 177}}
{"id": 74, "code": "df['Date'] = df['Member'].map(dict).fillna(df['Member'])\n", "metadata": {"problem_id": 182, "library_problem_id": 182, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 181}}
{"id": 75, "code": "df['Date'] = df['Member'].map(dict).fillna(df['Member'])\ndf['Date'] = pd.to_datetime(df['Date'], format='%m/%d/%Y').dt.strftime('%d-%b-%Y')\n", "metadata": {"problem_id": 184, "library_problem_id": 184, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 181}}
{"id": 76, "code": "df['Date'] = pd.to_datetime(df['Date'], format= '%d/%m/%y')\ndf['Count_d'] = df.Date.map(df.groupby('Date').size())\ndf['Count_m'] = df.Date.map(df.groupby(df['Date'].dt.month).size())\ndf['Count_y'] = df.Date.map(df.groupby(df['Date'].dt.year).size())\ndf['Count_Val'] = df.Date.map(df.groupby('Val').size())\n", "metadata": {"problem_id": 186, "library_problem_id": 186, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 185}}
{"id": 77, "code": "result1 = df.groupby('Date').apply(lambda x: x.eq(0).sum())\nresult2 = df.groupby('Date').apply(lambda x: x.ne(0).sum())\n", "metadata": {"problem_id": 188, "library_problem_id": 188, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 188}}
{"id": 78, "code": "result1 = df.groupby('Date').apply(lambda x: x.apply(lambda y: y % 2 == 0).sum())\nresult2 = df.groupby('Date').apply(lambda x: x.apply(lambda y: y % 2 == 1).sum())\n", "metadata": {"problem_id": 189, "library_problem_id": 189, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 188}}
{"id": 79, "code": "result = pd.pivot_table(df, values=['D','E'], index=['B'], aggfunc=[np.sum, np.mean])\n", "metadata": {"problem_id": 191, "library_problem_id": 191, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 190}}
{"id": 80, "code": "result = df.groupby('B').agg({'D':'sum', 'E':'mean'})\n", "metadata": {"problem_id": 192, "library_problem_id": 192, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 190}}
{"id": 81, "code": "result = df.pivot_table(index=['B'], aggfunc={'D': np.max, 'E': np.min})\n", "metadata": {"problem_id": 193, "library_problem_id": 193, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 190}}
{"id": 82, "code": "result = df.var2.str.split(',', expand=True).stack().reset_index(level=1, drop=True).to_frame('var2').join(df)\n", "metadata": {"problem_id": 194, "library_problem_id": 194, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 194}}
{"id": 83, "code": "result = df.var2.str.split(',', expand=True).stack().reset_index(level=1, drop=True).to_frame('var2').join(df)\n", "metadata": {"problem_id": 195, "library_problem_id": 195, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 194}}
{"id": 84, "code": "result = df.var2.str.split('-', expand=True).stack().reset_index(level=1, drop=True).to_frame('var2')\nresult.index.name = 'index'\nresult = result.reset_index().merge(df, on='index')\nresult = result[['var1', 'var2']]\n", "metadata": {"problem_id": 196, "library_problem_id": 196, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 194}}
{"id": 85, "code": "df['fips'] = df['row'].str[:5]\ndf['row'] = df['row'].str[6:]\n", "metadata": {"problem_id": 199, "library_problem_id": 199, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 199}}
{"id": 86, "code": "df['2001'] = df['2001'].cumsum()\ndf['2002'] = df['2002'].cumsum()\ndf['2003'] = df['2003'].cumsum()\ndf['2004'] = df['2004'].cumsum()\ndf['2005'] = df['2005'].cumsum()\ndf['2006'] = df['2006'].cumsum()\n\ndf['2001'] = df['2001'] / df.index\ndf['2002'] = df['2002'] / df.index\ndf['2003'] = df['2003'] / df.index\ndf['2004'] = df['2004'] / df.index\ndf['2005'] = df['2005'] / df.index\ndf['2006'] = df['2006'] / df.index\n\ndf\n", "metadata": {"problem_id": 203, "library_problem_id": 203, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 202}}
{"id": 87, "code": "\n    result = df.copy()\n    result['2001'] = df['2001'].cumsum()\n    result['2002'] = df['2002'].cumsum()\n    result['2003'] = df['2003'].cumsum()\n    result['2004'] = df['2004'].cumsum()\n    result['2005'] = df['2005'].cumsum()\n    result['2006'] = df['2006'].cumsum()\n    result['2001'] = result['2001'] / (result['2001'] != 0).cumsum()\n    result['2002'] = result['2002'] / (result['2002'] != 0).cumsum()\n    result['2003'] = result['2003'] / (result['2003'] != 0).cumsum()\n    result['2004'] = result['2004'] / (result['2004'] != 0).cumsum()\n    result['2005'] = result['2005'] / (result['2005'] != 0).cumsum()\n    result['2006'] = result['2006'] / (result['2006'] != 0).cumsum()\n    ### END SOLUTION\n    return result\n\n\nA: You can use cumsum and cumcount:\ndf.iloc[:,1:] = df.iloc[:,1:].cumsum() / df.iloc[:,1:].cumcount()\n\nOutput:\n      Name  2001  2002  2003  2004  2005  2006\n0   Name1  2.00  3.50  3.50  3.50  3.75  4.88\n1   Name2  1.00  2.50  2.25  2.25  3.13  3.13\n2   Name3  0.00  5.00  5.00  5.00  5.00  3.50\n\n", "metadata": {"problem_id": 204, "library_problem_id": 204, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 202}}
{"id": 88, "code": "df['label'] = df['Close'].diff().apply(lambda x: 1 if x > 0 else -1)\ndf['DateTime'] = df['DateTime'].dt.strftime('%d-%b-%Y')\ndf.loc[0, 'label'] = 1\ndf\n", "metadata": {"problem_id": 208, "library_problem_id": 208, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 206}}
{"id": 89, "code": "df['arrival_time'] = pd.to_datetime(df['arrival_time'])\ndf['departure_time'] = pd.to_datetime(df['departure_time'])\ndf['Duration'] = df['departure_time'] - df['arrival_time']\ndf\n", "metadata": {"problem_id": 209, "library_problem_id": 209, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 209}}
{"id": 90, "code": "df['arrival_time'] = pd.to_datetime(df['arrival_time'])\ndf['departure_time'] = pd.to_datetime(df['departure_time'])\ndf['Duration'] = df['departure_time'] - df['arrival_time']\ndf['Duration'] = df['Duration'].dt.total_seconds()\ndf\n", "metadata": {"problem_id": 210, "library_problem_id": 210, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 209}}
{"id": 91, "code": "result = df.groupby('key1').key2.apply(lambda x: x.eq('one').sum()).reset_index()\n", "metadata": {"problem_id": 212, "library_problem_id": 212, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 212}}
{"id": 92, "code": "max_result = df.index.max()\nmin_result = df.index.min()\n", "metadata": {"problem_id": 215, "library_problem_id": 215, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 215}}
{"id": 93, "code": "df = df[~((99 <= df['closing_price']) & (df['closing_price'] <= 101))]\n", "metadata": {"problem_id": 218, "library_problem_id": 218, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 217}}
{"id": 94, "code": "df['SOURCE_NAME'] = df['SOURCE_NAME'].str.split('_').str[0]\ndf\n", "metadata": {"problem_id": 220, "library_problem_id": 220, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 220}}
{"id": 95, "code": "df['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\ndf", "metadata": {"problem_id": 223, "library_problem_id": 223, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 223}}
{"id": 96, "code": "df['Column_x'] = df['Column_x'].fillna(df['Column_x'].mode()[0], inplace= True)\n\ndf['Column_x'] = df['Column_x'].fillna(0, inplace= True)\n\ndf['Column_x'] = df['Column_x'].fillna(0.5, inplace= True)\n\ndf['Column_x'] = df['Column_x'].fillna(1, inplace= True)\n", "metadata": {"problem_id": 224, "library_problem_id": 224, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 223}}
{"id": 97, "code": "df['Column_x'] = df['Column_x'].fillna(0)\ndf['Column_x'] = df['Column_x'].astype(int)\ndf['Column_x'] = df['Column_x'].replace(0,1)\ndf['Column_x'] = df['Column_x'].replace(1,0)\ndf['Column_x'] = df['Column_x'].replace(0,1)\ndf['Column_x'] = df['Column_x'].replace(1,0)\ndf['Column_x'] = df['Column_x'].replace(0,1)\ndf['Column_x'] = df['Column_x'].replace(1,0)\ndf['Column_x'] = df['Column_x'].replace(0,1)\ndf['Column_x'] = df['Column_x'].replace(1,0)\ndf['Column_x'] = df['Column_x'].replace(0,1)\ndf['Column_x'] = df['Column_x'].replace(1,0)\ndf['Column_x'] = df['Column_x'].replace(0,1)\ndf['Column_x'] = df['Column_x'].replace(1,0)\ndf['Column_x'] = df['Column_x'].replace(0,1)\ndf['Column_x'] = df['Column_x'].replace(1,0)\ndf['Column_x'] = df['Column_x'].replace(0,1)\ndf['Column_x'] = df['Column_x'].replace(1,0)\ndf['Column_x'] = df['Column_x'].replace(0,1)\ndf['Column_x'] = df['Column_x'].replace(1,0)\ndf['Column_x'] = df['Column_x'].replace(0,1)\ndf['Column_x'] = df['Column_x'].replace(1,0)\ndf['Column_x'] = df['Column_x'].replace(0,1)\ndf['Column_x'] = df['Column_x'].replace(1,0)\ndf['Column_x'] = df['Column_x'].replace(0,1)\ndf['Column_x'] = df['Column_x'].replace(1,0)\ndf['Column_x'] = df['Column_x'].replace(0,1)\ndf['Column_x'] = df['Column_x'].replace(1,0)\ndf['Column_x'] = df['Column_x'].replace(0,1)\ndf['Column_x'] = df['Column_x'].replace(1,0)\ndf['Column_x'] = df['Column_x'].replace(0,1)\ndf['Column_x'] = df['Column_x'].replace(1,0)\ndf['Column_x'] = df['Column_x'].replace(0,1)\ndf['Column_x'] = df['Column_x'].replace(1,0)\ndf['Column_x'] = df['Column_x'].replace(0,1)\ndf['Column_x'] = df['Column_x'].replace(1,0)\ndf['Column_x'] = df['Column_x'].replace(0,1)\ndf['Column_x'] = df['Column_x'].replace(1,0)\ndf['Column_x'] = df['Column_x'].replace(0,1)\ndf['Column_x'] = df['Column_x'].replace(1,0)\ndf['Column_x'] = df['Column_x'].replace(0,1)\ndf['Column_x'] = df['Column_x'].replace(1,0)\ndf['Column_x'] = df['Column_x'].replace(0,1)\ndf['Column_x'] = df['Column_x'].replace(1,0)\ndf['Column_x'] = df['Column_x'].replace(0,1)\ndf['Column_x'] = df['Column_x'].replace(1,0)\ndf['Column_x'] = df['Column_x'].replace(0,1)\ndf['Column_x'] = df['Column_x'].replace(1,0)\ndf['Column_x'] = df['Column_x'].replace(0,1)\ndf['Column_x'] = df['Column_x'].replace(1,0)\ndf['Column_x'] = df['Column_x'].replace(0,1)\ndf['Column_x']", "metadata": {"problem_id": 225, "library_problem_id": 225, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 223}}
{"id": 98, "code": "result = pd.DataFrame([[(a.iloc[0,0], b.iloc[0,0]), (a.iloc[0,1], b.iloc[0,1])],\n                       [(a.iloc[1,0], b.iloc[1,0]), (a.iloc[1,1], b.iloc[1,1])]],\n                      columns=['one', 'two'])\n", "metadata": {"problem_id": 226, "library_problem_id": 226, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 226}}
{"id": 99, "code": "result = pd.concat([a,b,c], axis=1)\n", "metadata": {"problem_id": 227, "library_problem_id": 227, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 226}}
{"id": 100, "code": "a_b = pd.DataFrame(np.array([[1, 5],[2, 6],[3, 7],[4, 8],[np.nan, 9],[np.nan, 10]]), columns=['one', 'two'])\n", "metadata": {"problem_id": 228, "library_problem_id": 228, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 226}}
{"id": 101, "code": "result = pd.concat([C, D]).drop_duplicates(subset=[\"A\"], keep=\"last\")\n", "metadata": {"problem_id": 241, "library_problem_id": 241, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 240}}
{"id": 102, "code": "result = df.groupby('user').agg(lambda x: x.tolist())\n", "metadata": {"problem_id": 244, "library_problem_id": 244, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 243}}
{"id": 103, "code": "result = df.groupby('user').agg(lambda x: x.tolist())\n", "metadata": {"problem_id": 245, "library_problem_id": 245, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 243}}
{"id": 104, "code": "df = pd.DataFrame(series.values.tolist(), index=series.index)\n", "metadata": {"problem_id": 247, "library_problem_id": 247, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 246}}
{"id": 105, "code": "result = [col for col in df.columns if s in col]\n", "metadata": {"problem_id": 248, "library_problem_id": 248, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 248}}
{"id": 106, "code": "result = df.filter(regex=s)\n", "metadata": {"problem_id": 249, "library_problem_id": 249, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 248}}
{"id": 107, "code": "result = ','.join(str(x) for x in df.col1.sum())\n", "metadata": {"problem_id": 256, "library_problem_id": 256, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 254}}
{"id": 108, "code": "result = df.loc[filt.index, :]\n", "metadata": {"problem_id": 262, "library_problem_id": 262, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 262}}
{"id": 109, "code": "def equalp(x, y):\n    return (x == y) or (np.isnan(x) and np.isnan(y))\n\ndef equal_columns(df):\n    return [c for c in df.columns if df.loc[:, c].apply(equalp, args=(df.loc[0, c],)).all()]\n\nequal_columns(df)\n", "metadata": {"problem_id": 265, "library_problem_id": 265, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 264}}
{"id": 110, "code": "def equalp(x, y):\n    return (x == y) or (np.isnan(x) and np.isnan(y))\n\ndef equal_columns(df):\n    return [c for c in df.columns if df.loc[0].apply(equalp, args=(df.loc[8][c],)).all()]\n\nequal_columns(df)\n", "metadata": {"problem_id": 266, "library_problem_id": 266, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 264}}
{"id": 111, "code": "result = df.sort_values(by='VIM', ascending=True)\n", "metadata": {"problem_id": 277, "library_problem_id": 277, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 276}}
{"id": 112, "code": "result = corr[corr > 0.3]\n", "metadata": {"problem_id": 281, "library_problem_id": 281, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 280}}
{"id": 113, "code": "df.columns[-1] = 'Test'\n", "metadata": {"problem_id": 282, "library_problem_id": 282, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 282}}
{"id": 114, "code": "df['frequent'] = df.apply(lambda x: x.value_counts().index[0], axis=1)\ndf['freq_count'] = df.apply(lambda x: x.value_counts().values[0], axis=1)\n", "metadata": {"problem_id": 285, "library_problem_id": 285, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 284}}
{"id": 115, "code": "def get_frequent(row):\n    return [k for k, v in row.value_counts().items() if v == max(row.value_counts())]\n\ndf['frequent'] = df.apply(get_frequent, axis=1)\ndf['freq_count'] = df.apply(lambda row: max(row.value_counts()), axis=1)\n", "metadata": {"problem_id": 286, "library_problem_id": 286, "library": "Pandas", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 284}}
{"id": 116, "code": "result = df.groupby([\"id1\",\"id2\"])[\"foo\",\"bar\"].mean()\n", "metadata": {"problem_id": 287, "library_problem_id": 287, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 287}}
{"id": 117, "code": "result = df.groupby([\"id1\",\"id2\"])[\"foo\",\"bar\"].mean()\n", "metadata": {"problem_id": 288, "library_problem_id": 288, "library": "Pandas", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 287}}
{"id": 118, "code": "result = x[~np.isnan(x).any(axis=1)]\n", "metadata": {"problem_id": 294, "library_problem_id": 3, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 1}}
{"id": 119, "code": "b = np.zeros((len(a), a.max()+1))\nb[np.arange(len(a)), a] = 1\n", "metadata": {"problem_id": 297, "library_problem_id": 6, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 120, "code": "b = np.zeros((len(a), len(a)))\nb[np.arange(len(a)), a.argsort()] = 1\n", "metadata": {"problem_id": 298, "library_problem_id": 7, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 121, "code": "r = np.random.randint(3, size=(100, 2000)) - 1\nr_old = r.copy()\nr_new = r.copy()\n", "metadata": {"problem_id": 308, "library_problem_id": 17, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"id": 122, "code": "result = np.unravel_index(a.argmax(), a.shape)\n", "metadata": {"problem_id": 309, "library_problem_id": 18, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 18}}
{"id": 123, "code": "result = np.unravel_index(np.argmin(a), a.shape)\n", "metadata": {"problem_id": 310, "library_problem_id": 19, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 124, "code": "result = np.array(a)\n", "metadata": {"problem_id": 317, "library_problem_id": 26, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 125, "code": "a = a[:, permutation]\n", "metadata": {"problem_id": 318, "library_problem_id": 27, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 27}}
{"id": 126, "code": "result = a[permutation]\n", "metadata": {"problem_id": 319, "library_problem_id": 28, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 27}}
{"id": 127, "code": "result = np.argwhere(a == a.min())\n", "metadata": {"problem_id": 322, "library_problem_id": 31, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 29}}
{"id": 128, "code": "result = np.sin(np.deg2rad(degree))\n", "metadata": {"problem_id": 323, "library_problem_id": 32, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 129, "code": "result = np.cos(np.deg2rad(degree))\n", "metadata": {"problem_id": 324, "library_problem_id": 33, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 130, "code": "result = np.pad(A, (0, length - len(A)), 'constant', constant_values=(0))\n", "metadata": {"problem_id": 327, "library_problem_id": 36, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 131, "code": "\n    result = np.gcd(numerator, denominator)\n    ### END SOLUTION\n    return result\n", "metadata": {"problem_id": 332, "library_problem_id": 41, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 40}}
{"id": 132, "code": "def reduce_fraction(numerator, denominator):\n    if denominator == 0:\n        return (np.nan, np.nan)\n    gcd = np.gcd(numerator, denominator)\n    return (numerator // gcd, denominator // gcd)\n", "metadata": {"problem_id": 333, "library_problem_id": 42, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 40}}
{"id": 133, "code": "diagonal = np.diag_indices(5)\nresult = a[diagonal]\n", "metadata": {"problem_id": 338, "library_problem_id": 47, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 45}}
{"id": 134, "code": "result = []\nfor row in X:\n    for element in row:\n        result.append(element)\n", "metadata": {"problem_id": 340, "library_problem_id": 49, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 135, "code": "result = []\nfor row in X:\n    for element in row:\n        result.append(element)\n", "metadata": {"problem_id": 341, "library_problem_id": 50, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 49}}
{"id": 136, "code": "\n    result = []\n    for i in range(X.shape[0]):\n        for j in range(X.shape[1]):\n            result.append(X[i,j])\n    ### END SOLUTION\n    return result\n", "metadata": {"problem_id": 342, "library_problem_id": 51, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 49}}
{"id": 137, "code": "result = []\nfor row in X:\n    for element in row:\n        result.append(element)\n", "metadata": {"problem_id": 343, "library_problem_id": 52, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 49}}
{"id": 138, "code": "p_value = scipy.stats.ttest_ind(a, b, equal_var=False)[1]\n", "metadata": {"problem_id": 350, "library_problem_id": 59, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 59}}
{"id": 139, "code": "sort_indices = np.argsort(a, axis=0)\nc = b[sort_indices]\n", "metadata": {"problem_id": 355, "library_problem_id": 64, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 140, "code": "result = b[np.argsort(a.sum(axis=(1, 2)))]\n", "metadata": {"problem_id": 358, "library_problem_id": 67, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 64}}
{"id": 141, "code": "a = np.delete(a, 2, axis=0)\n", "metadata": {"problem_id": 360, "library_problem_id": 69, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 68}}
{"id": 142, "code": "result = np.delete(a, del_col, axis=1)\n", "metadata": {"problem_id": 362, "library_problem_id": 71, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 143, "code": "\n    a_l = a.tolist()\n    a_l.insert(pos, element)\n    a = np.asarray(a_l)\n    return a\n    ### END SOLUTION\n", "metadata": {"problem_id": 365, "library_problem_id": 74, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 72}}
{"id": 144, "code": "a = np.insert(a, pos, element, axis=0)\n", "metadata": {"problem_id": 366, "library_problem_id": 75, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 72}}
{"id": 145, "code": "result = array_of_arrays[:]\n", "metadata": {"problem_id": 367, "library_problem_id": 76, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 146, "code": "def ecdf(x):\n  # normalize X to sum to 1\n  x = x / np.sum(x)\n  return np.cumsum(x)\n\n# compute ecdf(grades)\necdf_grades = ecdf(grades)\n\n# compute the longest interval [low, high) that satisfies ECDF(x) < threshold\nlow = ...\nhigh = ...\n", "metadata": {"problem_id": 375, "library_problem_id": 84, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 147, "code": "a_np = a.numpy()\n", "metadata": {"problem_id": 379, "library_problem_id": 88, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 88}}
{"id": 148, "code": "a_tf = tf.convert_to_tensor(a)\n", "metadata": {"problem_id": 380, "library_problem_id": 89, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 88}}
{"id": 149, "code": "result = np.argsort(a)[::-1]\n", "metadata": {"problem_id": 381, "library_problem_id": 90, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 150, "code": "result = A**n\n", "metadata": {"problem_id": 384, "library_problem_id": 93, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 93}}
{"id": 151, "code": "result = np.array([[[1,5],[2,6]],\n                   [[9,13],[10,14]],\n                   [[3,7],[4,8]],\n                   [[11,15],[12,16]]])\n", "metadata": {"problem_id": 387, "library_problem_id": 96, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 94}}
{"id": 152, "code": "a = np.array(string)\n", "metadata": {"problem_id": 394, "library_problem_id": 103, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 103}}
{"id": 153, "code": "\n    result = np.random.uniform(np.log(min), np.log(max), n)\n    result = np.exp(result)\n    ### END SOLUTION\n    return result\n\n\nA: You can use numpy.random.uniform to generate the uniform distribution, and then use numpy.log to get the log-uniform distribution.\nimport numpy as np\n\ndef log_uniform(min, max, size):\n    return np.exp(np.random.uniform(np.log(min), np.log(max), size))\n\n# Example usage\nmin_val = 1\nmax_val = 10\nsize = 10000\n\nsamples = log_uniform(min_val, max_val, size)\n\n", "metadata": {"problem_id": 397, "library_problem_id": 106, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"id": 154, "code": "result = np.array([])\n", "metadata": {"problem_id": 400, "library_problem_id": 109, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"id": 155, "code": "result = np.max(a[index == np.arange(index.max()+1)], axis=1)\n", "metadata": {"problem_id": 406, "library_problem_id": 115, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 114}}
{"id": 156, "code": "result = np.array([a[i] for i in index if i >= 0])\n", "metadata": {"problem_id": 408, "library_problem_id": 117, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 114}}
{"id": 157, "code": "result = np.pad(a, ((0, 0), (0, 0)), 'constant', constant_values=0)[low_index:high_index, low_index:high_index]\n", "metadata": {"problem_id": 411, "library_problem_id": 120, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 120}}
{"id": 158, "code": "bin_data = data.reshape(-1, bin_size)\nbin_data_mean = bin_data.mean(axis=1)\n", "metadata": {"problem_id": 414, "library_problem_id": 123, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 123}}
{"id": 159, "code": "bin_data = np.array([np.array_split(row, len(row)/bin_size) for row in data])\nbin_data_mean = np.array([np.mean(row, axis=0) for row in bin_data])\n", "metadata": {"problem_id": 419, "library_problem_id": 128, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 160, "code": "result = df.values.reshape(15, 4, 5)\n", "metadata": {"problem_id": 424, "library_problem_id": 133, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 132}}
{"id": 161, "code": "result = np.unpackbits(a.view(np.uint8), axis=1)[:, -m:]\n", "metadata": {"problem_id": 425, "library_problem_id": 134, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 134}}
{"id": 162, "code": "result = np.unpackbits(np.uint8(a), axis=1)[:, -m:]\n", "metadata": {"problem_id": 427, "library_problem_id": 136, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 134}}
{"id": 163, "code": "mu = np.mean(a)\nsigma = np.std(a)\nresult = (mu - 3*sigma, mu + 3*sigma)\n", "metadata": {"problem_id": 428, "library_problem_id": 137, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 137}}
{"id": 164, "code": "mu = np.mean(a)\nsigma = np.std(a)\nresult = (mu - 2*sigma, mu + 2*sigma)\n", "metadata": {"problem_id": 429, "library_problem_id": 138, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 137}}
{"id": 165, "code": "\n    mean = np.mean(a)\n    std = np.std(a)\n    result = (mean - 3*std, mean + 3*std)\n    ### END SOLUTION\n    return result\n\nprint(f())\n", "metadata": {"problem_id": 430, "library_problem_id": 139, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 137}}
{"id": 166, "code": "a[1, :] = 0\na[:, 0] = 0\n", "metadata": {"problem_id": 435, "library_problem_id": 144, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 142}}
{"id": 167, "code": "mask = a == a.max(axis=1, keepdims=True)\n", "metadata": {"problem_id": 436, "library_problem_id": 145, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 145}}
{"id": 168, "code": "C = np.array([2,3,3,3,5,6,7])\n", "metadata": {"problem_id": 444, "library_problem_id": 153, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"id": 169, "code": "rankdata(a, method='dense').astype(int)\n", "metadata": {"problem_id": 445, "library_problem_id": 154, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 154}}
{"id": 170, "code": "result = np.argsort(rankdata(a, method='dense'))[::-1]\n", "metadata": {"problem_id": 446, "library_problem_id": 155, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 154}}
{"id": 171, "code": "l1 = X.sum(axis=1)\nprint l1\nprint X/l1.reshape(5,1)\n", "metadata": {"problem_id": 452, "library_problem_id": 161, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 161}}
{"id": 172, "code": "result = X / np.linalg.norm(X, axis=1, keepdims=True)\n", "metadata": {"problem_id": 453, "library_problem_id": 162, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 161}}
{"id": 173, "code": "result = np.select([df['a'].str.contains(target)], choices, default=np.nan)\n", "metadata": {"problem_id": 455, "library_problem_id": 164, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 164}}
{"id": 174, "code": "result = np.zeros((a.shape[0], a.shape[0]))\nfor i in range(a.shape[0]):\n    for j in range(a.shape[0]):\n        result[i, j] = np.linalg.norm(a[i] - a[j])\n", "metadata": {"problem_id": 456, "library_problem_id": 165, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 165}}
{"id": 175, "code": "result = np.zeros((a.shape[0], a.shape[0]))\nfor i in range(a.shape[0]):\n    for j in range(a.shape[0]):\n        result[i, j] = np.linalg.norm(a[i] - a[j])\n", "metadata": {"problem_id": 457, "library_problem_id": 166, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 165}}
{"id": 176, "code": "result = np.zeros((a.shape[0], a.shape[0]))\nfor i in range(a.shape[0]):\n    for j in range(i, a.shape[0]):\n        result[i, j] = np.linalg.norm(a[i] - a[j])\n", "metadata": {"problem_id": 458, "library_problem_id": 167, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 165}}
{"id": 177, "code": "AVG = np.mean(NA, axis=0)\n", "metadata": {"problem_id": 461, "library_problem_id": 170, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 168}}
{"id": 178, "code": "result = np.unique(a, return_index=True)[0]\n", "metadata": {"problem_id": 463, "library_problem_id": 172, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 171}}
{"id": 179, "code": "result = [a[i:i+size[0], j:j+size[1]] for i in range(a.shape[0]-size[0]+1) for j in range(a.shape[1]-size[1]+1)]\n", "metadata": {"problem_id": 468, "library_problem_id": 177, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 176}}
{"id": 180, "code": "result = np.mean(a)\n", "metadata": {"problem_id": 469, "library_problem_id": 178, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 178}}
{"id": 181, "code": "a[np.triu_indices(a.shape[0],1)] = 0\n", "metadata": {"problem_id": 478, "library_problem_id": 187, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 187}}
{"id": 182, "code": "result = np.where(x == a)[0]\nresult = result[y[result] == b]\n", "metadata": {"problem_id": 481, "library_problem_id": 190, "library": "Numpy", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 189}}
{"id": 183, "code": "x = np.array(x)\ny = np.array(y)\n\nA = np.array([x**2, x, np.ones(len(x))]).T\n\na, b, c = np.linalg.lstsq(A, y, rcond=None)[0]\n\nresult = [a, b, c]\n", "metadata": {"problem_id": 482, "library_problem_id": 191, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 191}}
{"id": 184, "code": "x = np.array(x)\ny = np.array(y)\n\ndef f(x, a, b, c, d):\n    return a + b * x + c * x ** 2 + d * x ** 3\n\ndef error(a, b, c, d):\n    return np.sum((y - f(x, a, b, c, d)) ** 2)\n\nresult = np.zeros(degree + 1)\nfor i in range(degree + 1):\n    result[i] = minimize(error, x0=0, args=(0, 0, 0)).x[i]\n", "metadata": {"problem_id": 483, "library_problem_id": 192, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 191}}
{"id": 185, "code": "result = MinMaxScaler().fit_transform(arr)\n", "metadata": {"problem_id": 487, "library_problem_id": 196, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 195}}
{"id": 186, "code": "scaler = MinMaxScaler()\nresult = scaler.fit_transform(a.reshape(-1, a.shape[-1])).reshape(a.shape)\n", "metadata": {"problem_id": 488, "library_problem_id": 197, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 195}}
{"id": 187, "code": "arr_temp = arr.copy()\nmask = arr_temp < n1\nmask2 = arr_temp < n2\nmask3 = mask ^ mask2\narr[mask] = 0\narr[mask3] = arr[mask3] + 5\narr[~mask2] = 30\n", "metadata": {"problem_id": 490, "library_problem_id": 199, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 198}}
{"id": 188, "code": "result = np.array_equal(*a)\n", "metadata": {"problem_id": 493, "library_problem_id": 202, "library": "Numpy", "test_case_cnt": 5, "perturbation_type": "Origin", "perturbation_origin_id": 202}}
{"id": 189, "code": "result = np.pad(a, ((0, shape[0] - a.shape[0]), (0, shape[1] - a.shape[1])), 'constant', constant_values=element)\n", "metadata": {"problem_id": 497, "library_problem_id": 206, "library": "Numpy", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 204}}
{"id": 190, "code": "\n    result = np.zeros(shape)\n    result[:arr.shape[0], :arr.shape[1]] = arr\n    ### END SOLUTION\n    return result\n\n\nA: You can use np.pad:\nimport numpy as np\n\narr = np.ones((41,13))\n\ndef f(arr, shape=(93,13)):\n    return np.pad(arr, ((0, shape[0]-arr.shape[0]), (0, shape[1]-arr.shape[1])), 'constant')\n\nprint(f(arr))\n\nOutput:\n[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]", "metadata": {"problem_id": 498, "library_problem_id": 207, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 204}}
{"id": 191, "code": "result = a[np.arange(a.shape[0]), np.arange(a.shape[1]), b]\n", "metadata": {"problem_id": 501, "library_problem_id": 210, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 210}}
{"id": 192, "code": "result = np.sum(a[np.arange(a.shape[0]), np.arange(a.shape[1]), b])\n", "metadata": {"problem_id": 504, "library_problem_id": 213, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 210}}
{"id": 193, "code": "result = np.sum(a[np.arange(a.shape[0]), np.arange(a.shape[1]), b])\n", "metadata": {"problem_id": 505, "library_problem_id": 214, "library": "Numpy", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 210}}
{"id": 194, "code": "result = df.loc[(df['a'] > 1) & (df['a'] <= 4), 'b']\n", "metadata": {"problem_id": 506, "library_problem_id": 215, "library": "Numpy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 215}}
{"id": 195, "code": "for i, ls in enumerate(('-', '--', '-.', ':')):\n    plt.plot(x, np.random.rand(10), linestyle=ls, label=ls)\n", "metadata": {"problem_id": 515, "library_problem_id": 4, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 196, "code": "for i, ls in enumerate(('-', '--', '-.', ':')):\n    plt.plot(x, np.random.rand(10), linestyle=ls, label=ls)\n", "metadata": {"problem_id": 516, "library_problem_id": 5, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 197, "code": "plt.axvspan(2, 4, color='red', alpha=0.5)\n", "metadata": {"problem_id": 520, "library_problem_id": 9, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 198, "code": "seaborn.relplot(data=df, x=\"Height (cm)\", y=\"Weight (kg)\", hue=\"Gender\")\n", "metadata": {"problem_id": 523, "library_problem_id": 12, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 12}}
{"id": 199, "code": "plt.xticks(rotation=45)\n", "metadata": {"problem_id": 533, "library_problem_id": 22, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 21}}
{"id": 200, "code": "plt.xticks(np.arange(0, 2 * np.pi, 2 * np.pi / 5))\n", "metadata": {"problem_id": 534, "library_problem_id": 23, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 21}}
{"id": 201, "code": "plt.imshow(H, cmap='gray')\nplt.show()\n", "metadata": {"problem_id": 537, "library_problem_id": 26, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 25}}
{"id": 202, "code": "plt.title(myTitle, wrap=True)\n", "metadata": {"problem_id": 540, "library_problem_id": 29, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 29}}
{"id": 203, "code": "plt.gca().invert_yaxis()\n", "metadata": {"problem_id": 541, "library_problem_id": 30, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 204, "code": "plt.xticks([0, 1.5])\nplt.yticks([0, 1.5])\n", "metadata": {"problem_id": 542, "library_problem_id": 31, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 31}}
{"id": 205, "code": "plt.scatter(x, y, edgecolor='black', facecolor='blue')\n", "metadata": {"problem_id": 545, "library_problem_id": 34, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 34}}
{"id": 206, "code": "plt.ticklabel_format(style=\"plain\", axis=\"y\")\n", "metadata": {"problem_id": 547, "library_problem_id": 36, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 207, "code": "fig, ax = plt.subplots(2, 1, sharex=True, sharey=True)\nax[0].plot(x, y1)\nax[1].plot(x, y2)\nax[0].set_title('sin(x)')\nax[1].set_title('cos(x)')\nax[0].set_ylabel('sin(x)')\nax[1].set_ylabel('cos(x)')\nax[0].set_xlabel('x')\nax[1].set_xlabel('x')\nax[0].spines['top'].set_visible(False)\nax[0].spines['right'].set_visible(False)\nax[1].spines['top'].set_visible(False)\nax[1].spines['right'].set_visible(False)\nax[0].spines['bottom'].set_visible(False)\nax[1].spines['bottom'].set_visible(False)\nax[0].spines['left'].set_visible(False)\nax[1].spines['left'].set_visible(False)\n", "metadata": {"problem_id": 550, "library_problem_id": 39, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 38}}
{"id": 208, "code": "plt.xticks(np.arange(0, 10, 2))\nplt.grid(axis='x', which='both')\n", "metadata": {"problem_id": 553, "library_problem_id": 42, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 42}}
{"id": 209, "code": "plt.grid(True)\n", "metadata": {"problem_id": 556, "library_problem_id": 45, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 42}}
{"id": 210, "code": "plt.legend(loc=\"lower right\")\n", "metadata": {"problem_id": 557, "library_problem_id": 46, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 46}}
{"id": 211, "code": "ax.xaxis.tick_top()\n", "metadata": {"problem_id": 560, "library_problem_id": 49, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 212, "code": "plt.plot(x, y)\nplt.xlabel(\"X\")\nplt.xlim(0, 10)\nplt.ylim(0, 10)\nplt.show()\n", "metadata": {"problem_id": 561, "library_problem_id": 50, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 50}}
{"id": 213, "code": "plt.plot(x, y)\nplt.yticks(np.arange(10), np.arange(10))\nplt.ylabel(\"Y\")\nplt.show()\n", "metadata": {"problem_id": 564, "library_problem_id": 53, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 52}}
{"id": 214, "code": "sns.jointplot(x='total_bill', y='tip', data=tips, kind='reg', color='green', scatter_kws={'color': 'blue'})\n", "metadata": {"problem_id": 565, "library_problem_id": 54, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 215, "code": "plt.plot(x, y)\nplt.xlabel(\"X\")\nplt.xticks(color=\"red\")\n", "metadata": {"problem_id": 571, "library_problem_id": 60, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 59}}
{"id": 216, "code": "plt.axvline(0.22058956, color='red')\nplt.axvline(0.33088437, color='red')\nplt.axvline(2.20589566, color='red')\n", "metadata": {"problem_id": 573, "library_problem_id": 62, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"id": 217, "code": "plt.imshow(rand_mat, cmap=\"hot\")\nplt.xticks(range(4), xlabels)\nplt.yticks(range(4), ylabels[::-1])\nplt.ylabel(\"Y-axis\")\nplt.xlabel(\"X-axis\")\nplt.show()\n", "metadata": {"problem_id": 574, "library_problem_id": 63, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 218, "code": "plt.hist(x, edgecolor='k', linewidth=1.2)\n", "metadata": {"problem_id": 581, "library_problem_id": 70, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 70}}
{"id": 219, "code": "fig, axes = plt.subplots(1, 2, figsize=(10, 5))\naxes[0].set_box_aspect(10)\naxes[1].set_box_aspect(10)\n", "metadata": {"problem_id": 582, "library_problem_id": 71, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"id": 220, "code": "plt.hist(x, bins=bins, alpha=0.5)\nplt.hist(y, bins=bins, alpha=0.5)\nplt.show()\n", "metadata": {"problem_id": 583, "library_problem_id": 72, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 72}}
{"id": 221, "code": "plt.plot(x[:, 0], label=\"a\")\nplt.plot(x[:, 1], label=\"b\")\nplt.legend()\n", "metadata": {"problem_id": 587, "library_problem_id": 76, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 222, "code": "plt.plot(points)\nplt.yscale('log')\n", "metadata": {"problem_id": 589, "library_problem_id": 78, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 78}}
{"id": 223, "code": "plt.loglog(x, y, 'o')\nplt.xticks([1, 10, 100, 1000])\nplt.yticks([1, 10, 100, 1000])\nplt.xlabel('x')\nplt.ylabel('y')\nplt.show()\n", "metadata": {"problem_id": 593, "library_problem_id": 82, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 224, "code": "fig, (ax1, ax2) = plt.subplots(1, 2)\nax1.plot(x, y, label='y')\nax2.plot(z, a, label='a')\nfig.legend()\n", "metadata": {"problem_id": 597, "library_problem_id": 86, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 86}}
{"id": 225, "code": "plt.xticks(range(0, 10, 2), [2.1, 3, 7.6])\n", "metadata": {"problem_id": 601, "library_problem_id": 90, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 226, "code": "plt.yticks(rotation=-60)\nplt.xticks(rotation=90, verticalalignment='top')\n", "metadata": {"problem_id": 603, "library_problem_id": 92, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 91}}
{"id": 227, "code": "plt.xticks(x, alpha=0.5)\n", "metadata": {"problem_id": 604, "library_problem_id": 93, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 91}}
{"id": 228, "code": "df.plot(kind=\"line\", xlabel=\"X\", ylabel=\"Y\")\n", "metadata": {"problem_id": 608, "library_problem_id": 97, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 97}}
{"id": 229, "code": "plt.scatter(x, y, marker=(5, 1), edgecolors='none')\n", "metadata": {"problem_id": 610, "library_problem_id": 99, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"id": 230, "code": "plt.scatter(x, y, marker='*', s=100)\n", "metadata": {"problem_id": 611, "library_problem_id": 100, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 98}}
{"id": 231, "code": "plt.axvline(x=3, color='red', label='cutoff')\nplt.legend()\n", "metadata": {"problem_id": 616, "library_problem_id": 105, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 105}}
{"id": 232, "code": "fig, ax = plt.subplots(subplot_kw=dict(projection=\"polar\"))\nax.bar(labels, height)\n", "metadata": {"problem_id": 617, "library_problem_id": 106, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 106}}
{"id": 233, "code": "plt.pie(data, labels=l, wedgeprops={\"width\": 0.4})\n", "metadata": {"problem_id": 618, "library_problem_id": 107, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"id": 234, "code": "plt.plot(x, y)\nplt.minorticks_on()\nplt.grid(which='minor', linestyle='--', linewidth=0.5, color='gray')\nplt.grid(which='major', linestyle='-', linewidth=0.5, color='gray')\n", "metadata": {"problem_id": 620, "library_problem_id": 109, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"id": 235, "code": "plt.pie(sizes, labels=labels, colors=colors, autopct=\"%1.1f%%\", wedgeprops={\"linewidth\": 3, \"edgecolor\": \"white\"})\n", "metadata": {"problem_id": 622, "library_problem_id": 111, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 111}}
{"id": 236, "code": "plt.axvline(x=55, color=\"green\")\n", "metadata": {"problem_id": 624, "library_problem_id": 113, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 113}}
{"id": 237, "code": "plt.bar(np.arange(len(blue_bar)), blue_bar, color='blue')\nplt.bar(np.arange(len(orange_bar)) + len(blue_bar), orange_bar, color='orange')\n", "metadata": {"problem_id": 625, "library_problem_id": 114, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"id": 238, "code": "fig, ax = plt.subplots(1, 2)\nax[0].plot(x, y, label='y')\nax[0].plot(a, z, label='z')\nax[0].legend()\n", "metadata": {"problem_id": 626, "library_problem_id": 115, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 115}}
{"id": 239, "code": "plt.scatter(x, y, c=y, cmap='Spectral')\n", "metadata": {"problem_id": 627, "library_problem_id": 116, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 116}}
{"id": 240, "code": "plt.plot(x, y, label=\"Line\", marker=\"o\")\nplt.legend(handlelength=0.3)\n", "metadata": {"problem_id": 633, "library_problem_id": 122, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 241, "code": "plt.legend(loc=\"upper left\", ncol=2)\n", "metadata": {"problem_id": 635, "library_problem_id": 124, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 242, "code": "plt.scatter(x, y)\nplt.xlim(0, 10)\nplt.ylim(0, 10)\nplt.gca().set_clip_on(False)\n", "metadata": {"problem_id": 640, "library_problem_id": 129, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 129}}
{"id": 243, "code": "plt.contour(x, y, z, colors='white')\n", "metadata": {"problem_id": 645, "library_problem_id": 134, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 134}}
{"id": 244, "code": "fig, axes = plt.subplots(4, 4, figsize=(5, 5))\nfor i in range(4):\n    for j in range(4):\n        axes[i, j].plot(x, y)\n        axes[i, j].set_xticks([])\n        axes[i, j].set_yticks([])\nfig.subplots_adjust(wspace=0.5, hspace=0.5)\n", "metadata": {"problem_id": 648, "library_problem_id": 137, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 137}}
{"id": 245, "code": "plt.matshow(d, cmap=plt.cm.Blues, fignum=1, figsize=(8, 8))\n", "metadata": {"problem_id": 649, "library_problem_id": 138, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 138}}
{"id": 246, "code": "ax = plt.gca()\nax.set_position([0, 0, 1, 1])\nax.axis(\"off\")\nax.table(cellText=df.values, colLabels=df.columns, loc=\"center\")\n", "metadata": {"problem_id": 650, "library_problem_id": 139, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 139}}
{"id": 247, "code": "plt.plot(x, y)\nplt.xticks(x, rotation=90)\nplt.show()\n", "metadata": {"problem_id": 652, "library_problem_id": 141, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 140}}
{"id": 248, "code": "sns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"swarm\")\nplt.xlabel(\"Exercise Time\")\nplt.ylabel(\"Exercise Pulse\")\n", "metadata": {"problem_id": 655, "library_problem_id": 144, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"id": 249, "code": "sns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"scatter\")\nplt.ylabel(\"\")\nplt.show()\n", "metadata": {"problem_id": 656, "library_problem_id": 145, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 143}}
{"id": 250, "code": "g = sns.FacetGrid(df, col=\"b\", hue=\"b\", sharey=False)\ng.map(sns.pointplot, \"a\", \"c\")\nfor ax in g.axes.flat:\n    ax.set_xticks(ax.get_xticks()[::2])\n    ax.set_xticklabels(ax.get_xticks()[::2])\n", "metadata": {"problem_id": 662, "library_problem_id": 151, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 151}}
{"id": 251, "code": "fig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(x, y, z)\nax.view_init(azim=100, elev=50)\n", "metadata": {"problem_id": 663, "library_problem_id": 152, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 152}}
{"id": 252, "code": "plt.plot(x, y)\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.xticks([])\nplt.yticks([])\n", "metadata": {"problem_id": 664, "library_problem_id": 153, "library": "Matplotlib", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 153}}
{"id": 253, "code": "x.assign(1)\n", "metadata": {"problem_id": 666, "library_problem_id": 0, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 254, "code": "result = tf.one_hot(labels, depth=10, dtype=tf.int32)\n", "metadata": {"problem_id": 672, "library_problem_id": 6, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 2}}
{"id": 255, "code": "def my_map_func(i):\n  return [[i, i+1, i+2]]       # Fyi [[i], [i+1], [i+2]] throws an exception\nds = tf.data.Dataset.from_tensor_slices(input)\nds = ds.flat_map(lambda input: tf.compat.v1.py_func(\n  func=my_map_func, inp=[input], Tout=[tf.int64]\n))\nelement = tf.compat.v1.data.make_one_shot_iterator(ds).get_next()\nresult = []\nwith tf.compat.v1.Session() as sess:\n  for _ in range(9):\n    result.append(sess.run(element))\nprint(result)\n", "metadata": {"problem_id": 673, "library_problem_id": 7, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 7}}
{"id": 256, "code": "max_length = tf.reduce_max(lengths)\nmask = tf.sequence_mask(lengths, max_length)\n", "metadata": {"problem_id": 676, "library_problem_id": 10, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 9}}
{"id": 257, "code": "\n    result = tf.one_hot(lengths, depth=8)\n    ### END SOLUTION\n    return result\n\nprint(f())\n", "metadata": {"problem_id": 678, "library_problem_id": 12, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 258, "code": "max_length = tf.reduce_max(lengths)\nmask = tf.sequence_mask(lengths, max_length)\n", "metadata": {"problem_id": 679, "library_problem_id": 13, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 9}}
{"id": 259, "code": "\n    result = tf.reshape(tf.stack([tf.tile(a, [len(b)]) , tf.repeat(b, len(a))]), [-1, 2])\n    ### END SOLUTION\n    return result\n\nprint(f())\n", "metadata": {"problem_id": 681, "library_problem_id": 15, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 14}}
{"id": 260, "code": "result = tf.reshape(a, (50, 100, 512))\n", "metadata": {"problem_id": 682, "library_problem_id": 16, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 261, "code": "result = tf.expand_dims(a, axis=0)\nresult = tf.expand_dims(result, axis=-1)\n", "metadata": {"problem_id": 684, "library_problem_id": 18, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 16}}
{"id": 262, "code": "result = tf.reduce_sum(tf.square(tf.subtract(a, b)), axis=1)\n", "metadata": {"problem_id": 688, "library_problem_id": 22, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 22}}
{"id": 263, "code": "result = tf.reduce_sum(tf.square(tf.subtract(a, b)), axis=0)\n", "metadata": {"problem_id": 689, "library_problem_id": 23, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 22}}
{"id": 264, "code": "m = tf.gather_nd(x, tf.stack([row, col], axis=1))\n", "metadata": {"problem_id": 692, "library_problem_id": 26, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 25}}
{"id": 265, "code": "result = tf.einsum('bns,bns->bn', A, B)\n", "metadata": {"problem_id": 694, "library_problem_id": 28, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"id": 266, "code": "result = tf.einsum('bij,bjk->bik', A, B)\n", "metadata": {"problem_id": 695, "library_problem_id": 29, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 28}}
{"id": 267, "code": "result = [i.decode('utf-8') for i in x]\n", "metadata": {"problem_id": 696, "library_problem_id": 30, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 30}}
{"id": 268, "code": "\n    result = [i.decode('utf-8') for i in x]\n    ### END SOLUTION\n    return result\n\nprint(f())\n", "metadata": {"problem_id": 697, "library_problem_id": 31, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 30}}
{"id": 269, "code": "# Solution\n\n# Get the number of non-zero features\nnum_features = tf.reduce_sum(tf.cast(x != 0, tf.float32), axis=-1)\n\n# Compute the mean of the non-zero features\nmean = tf.reduce_sum(x, axis=-1) / num_features\n\n# Compute the variance of the non-zero features\nvar = tf.reduce_sum((x - mean) ** 2, axis=-1) / (num_features - 1)\n\n# Compute the standard deviation of the non-zero features\nstd = tf.sqrt(var)\n\n# Compute the result\nresult = tf.where(x == 0, 0., std)\n", "metadata": {"problem_id": 699, "library_problem_id": 33, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 270, "code": "\n    ### END SOLUTION\n    return result\n\nprint(f())\n", "metadata": {"problem_id": 700, "library_problem_id": 34, "library": "Tensorflow", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 271, "code": "import tensorflow as tf\n\nseed_x = 10\n### return the tensor as variable 'result'\n", "metadata": {"problem_id": 707, "library_problem_id": 41, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"id": 272, "code": "import tensorflow as tf\n\nseed_x = 10\n### return the tensor as variable 'result'\n", "metadata": {"problem_id": 708, "library_problem_id": 42, "library": "Tensorflow", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 41}}
{"id": 273, "code": "statistic, p_value = stats.ks_2samp(x, y)\n", "metadata": {"problem_id": 714, "library_problem_id": 3, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 3}}
{"id": 274, "code": "def f(c):\n  return sqrt((sin(pi/2) + sin(0) + sin(c) - 2)**2 + (cos(pi/2) + cos(0) + cos(c) - 1)**2)\n\ndef f_multi(c):\n  a, b, c = c\n  return sqrt((a+b-c)-2)**2 + ((3*a-b-c))**2 + sin(b) + cos(b) + 4\n\nresult = optimize.minimize(f_multi, initial_guess)\n", "metadata": {"problem_id": 716, "library_problem_id": 5, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 5}}
{"id": 275, "code": "p_values = scipy.stats.norm.cdf(z_scores)\n", "metadata": {"problem_id": 717, "library_problem_id": 6, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 6}}
{"id": 276, "code": "p_values = scipy.stats.norm.cdf(z_scores, loc=mu, scale=sigma)\n", "metadata": {"problem_id": 718, "library_problem_id": 7, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 6}}
{"id": 277, "code": "dist = stats.lognorm(mu,loc=stddev)\nresult = dist.cdf(x)\n", "metadata": {"problem_id": 720, "library_problem_id": 9, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 278, "code": "result = sa.multiply(sb)\n", "metadata": {"problem_id": 722, "library_problem_id": 11, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"id": 279, "code": "\n    result = sA.multiply(sB)\n    ### END SOLUTION\n    return result\n\nf()\n", "metadata": {"problem_id": 723, "library_problem_id": 12, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 280, "code": "result = M.diagonal()\n", "metadata": {"problem_id": 727, "library_problem_id": 16, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 16}}
{"id": 281, "code": "def cost(x, points1, points2):\n    return np.sum(np.sum(np.abs(points1[x.astype(int)] - points2), axis=1))\n\ndef solve(points1, points2):\n    N = points1.shape[0]\n    x0 = np.arange(N)\n    np.random.shuffle(x0)\n    res = scipy.optimize.minimize(cost, x0, args=(points1, points2), method='Nelder-Mead')\n    return res.x\n\nresult = solve(points1, points2)\n", "metadata": {"problem_id": 735, "library_problem_id": 24, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 23}}
{"id": 282, "code": "b = sparse.csr_matrix(a)\nb.setdiag(0)\n", "metadata": {"problem_id": 736, "library_problem_id": 25, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 25}}
{"id": 283, "code": "result = ndimage.label(img > threshold)[0]\n", "metadata": {"problem_id": 737, "library_problem_id": 26, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 284, "code": "import numpy as np\nimport scipy.ndimage\nsquare = np.zeros((32, 32))\nsquare[10:-10, 10:-10] = np.random.randint(1, 255, size = (12, 12))\nnp.random.seed(12)\nx, y = (32*np.random.random((2, 20))).astype(int)\nsquare[x, y] = np.random.randint(1, 255, size = (20,))\n\nsquare = scipy.ndimage.grey_erosion(square, size = (3, 3))\nsquare = scipy.ndimage.grey_dilation(square, size = (3, 3))\n\n", "metadata": {"problem_id": 744, "library_problem_id": 33, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 285, "code": "Median = np.median(col)\nMode = np.argmax(np.bincount(col))\n", "metadata": {"problem_id": 747, "library_problem_id": 36, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 34}}
{"id": 286, "code": "from scipy.spatial.distance import cdist\n\n# Get unique IDs\nunique_ids = np.unique(example_array)\n\n# Get coordinates of unique IDs\ncoords = np.where(example_array == unique_ids[:, None, None])\n\n# Calculate pairwise distances\ndistances = cdist(coords[0], coords[1], metric='euclidean')\n\n# Convert distances to metres\ndistances = distances * 10\n\n# Convert to a 2D array\ndistances = distances.reshape(unique_ids.shape[0], unique_ids.shape[0])\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :, None]\n\n# Convert to a 3D array\ndistances = distances[:, :,", "metadata": {"problem_id": 749, "library_problem_id": 38, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 38}}
{"id": 287, "code": "\n    ### END SOLUTION\n    return result\n\n\nA: I'm not sure if this is what you're looking for, but here's a solution that uses scipy.spatial.distance.cdist to calculate the pairwise distances between all points in the array.\nimport numpy as np\nimport scipy.spatial.distance\n\nexample_arr = np.array([[0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0],\n                        [0, 0, 2, 0, 2, 2, 0, 6, 0, 3, 3, 3],\n                        [0, 0, 0, 0, 2, 2, 0, 0, 0, 3, 3, 3],\n                        [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0],\n                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3],\n                        [1, 1, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3],\n                        [1, 1, 1, 0, 0, 0, 3, 3, 3, 0, 0, 3],\n                        [1, 1, 1, 0, 0, 0, 3, 3, 3, 0, 0, 0],\n                        [1, 1, 1, 0, 0, 0, 3, 3, 3, 0, 0, 0],\n                        [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                        [1, 0, 1, 0, 0, 0, 0, 5, 5, 0, 0, 0],\n                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]])\n\n# Get the indices of all non-zero elements in the array\nnonzero_indices = np.argwhere(example_arr)\n\n# Calculate the pairwise distances between all non-zero elements\ndistances = scipy.spatial.distance.cdist(nonzero_indices, nonzero_indices)\n\n# Print the distances\nprint(distances)\n\nThis will output a 2D array of distances between all non-zero elements in the array. The distances are calculated using the Euclidean distance metric, which is the default in scipy.spatial.distance.cdist.\n", "metadata": {"problem_id": 751, "library_problem_id": 40, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 38}}
{"id": 288, "code": "p_value = stats.ranksums(pre_course_scores, during_course_scores).pvalue\n", "metadata": {"problem_id": 759, "library_problem_id": 48, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"id": 289, "code": "result = M[row, column].toarray()\n", "metadata": {"problem_id": 770, "library_problem_id": 59, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 58}}
{"id": 290, "code": "new_array = np.zeros((100, 10, 10))\nfor i in range(10):\n    for j in range(10):\n        f = scipy.interpolate.interp1d(x, array[:, i, j])\n        new_array[:, i, j] = f(x_new)\n", "metadata": {"problem_id": 771, "library_problem_id": 60, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 60}}
{"id": 291, "code": "def NormalDistro(u,o2,x):\n    dev = abs((x-u)/o2)\n    P_inner = scipy.integrate.quad(NDfx,-dev,dev)\n    P_outer = 1 - P_inner\n    P = P_inner + P_outer/2\n    return(P)\nprob = NormalDistro(u,o2,x)\n", "metadata": {"problem_id": 772, "library_problem_id": 61, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 292, "code": "\n    dev = abs((x-u)/o2)\n    P_inner = scipy.integrate.quad(NDfx,-dev,dev)\n    P_outer = 1 - P_inner\n    P = P_inner + P_outer/2\n    return(P)\n    ### END SOLUTION\n\n\nA: I think you are missing the parentheses in the call to scipy.integrate.\nTry this:\nP_inner = scipy.integrate.quad(NDfx,-dev,dev)\n\n", "metadata": {"problem_id": 773, "library_problem_id": 62, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 61}}
{"id": 293, "code": "result = np.zeros((N,N))\nfor i in range(N):\n    for j in range(N):\n        result[i,j] = np.cos(np.pi*(i+0.5)*j/N)\nresult = result * np.sqrt(2/N)\n", "metadata": {"problem_id": 774, "library_problem_id": 63, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 294, "code": "diags = [matrix[1, :-1], matrix[0, :], matrix[1, 1:]]\noffsets = [-1, 0, 1]\nresult = sparse.diags(diags, offsets, shape=(5, 5)).toarray()\n", "metadata": {"problem_id": 775, "library_problem_id": 64, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 295, "code": "M = np.zeros((N+1, N+1))\nfor i in range(N+1):\n    for j in range(i+1):\n        M[i,j] = scipy.stats.binom.pmf(j, i, p)\n", "metadata": {"problem_id": 776, "library_problem_id": 65, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 65}}
{"id": 296, "code": "result = df.apply(stats.zscore)\n", "metadata": {"problem_id": 777, "library_problem_id": 66, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"id": 297, "code": "result = scipy.ndimage.zoom(x, shape, order=1)\n", "metadata": {"problem_id": 785, "library_problem_id": 74, "library": "Scipy", "test_case_cnt": 4, "perturbation_type": "Origin", "perturbation_origin_id": 74}}
{"id": 298, "code": "\ndef dN1_dt_simple(t, N1):\n    return -100 * N1 + np.sin(t)\nsol = solve_ivp(fun=dN1_dt_simple, t_span=time_span, y0=[N0,])\nresult = sol.y\n", "metadata": {"problem_id": 788, "library_problem_id": 77, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 77}}
{"id": 299, "code": "\nfor t in range (4):\n    def const(x):    \n        y=x[t]\n        return y\n    cons.append({'type':'ineq', 'fun': const})\n", "metadata": {"problem_id": 791, "library_problem_id": 80, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 300, "code": "result, error = scipy.integrate.quad(lambda x: 2*x*c, low, high)\n", "metadata": {"problem_id": 794, "library_problem_id": 83, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 83}}
{"id": 301, "code": "a = np.where(a > 0, 1, 0)\n", "metadata": {"problem_id": 801, "library_problem_id": 90, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 302, "code": "a = np.where(a > 0, 1, 0)\n", "metadata": {"problem_id": 802, "library_problem_id": 91, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 90}}
{"id": 303, "code": "# calculate distance matrix\ndist = scipy.spatial.distance.cdist(data, centroids, 'euclidean')\n# find closest element to each centroid\nresult = np.argmin(dist, axis=0)\n", "metadata": {"problem_id": 803, "library_problem_id": 92, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 92}}
{"id": 304, "code": "# compute distance matrix\ndist = scipy.spatial.distance.cdist(data, centroids)\n# find closest element to each centroid\nresult = np.argpartition(dist, k, axis=0)[:k]\n", "metadata": {"problem_id": 805, "library_problem_id": 94, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 92}}
{"id": 305, "code": "result = []\nfor x, a in zip(xdata, adata):\n    b = fsolve(eqn, x0=0.5, args=(a, x))\n    result.append(b)\nresult = np.array(result)\n", "metadata": {"problem_id": 807, "library_problem_id": 96, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 95}}
{"id": 306, "code": "df['Time'] = pd.to_datetime(df['Time'])\ndf.set_index('Time', inplace=True)\ndf.index = df.index.tz_localize('UTC')\ndf.index = df.index.tz_convert('US/Eastern')\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None)\ndf.index = df.index.tz_localize(None", "metadata": {"problem_id": 810, "library_problem_id": 99, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 99}}
{"id": 307, "code": "def multinomial_log_likelihood(weights, data):\n    return np.sum(data * np.log(weights))\n\ndef multinomial_log_likelihood_gradient(weights, data):\n    return data - weights\n\ndef multinomial_log_likelihood_hessian(weights, data):\n    return -np.diag(data)\n\ndef multinomial_log_likelihood_hessian_product(weights, data, v):\n    return -data * v\n\ndef multinomial_log_likelihood_hessian_product_direction(weights, data, v):\n    return -np.sum(data * v)\n\ndef multinomial_log_likelihood_hessian_product_direction_product(weights, data, v, w):\n    return -np.sum(data * v * w)\n\ndef multinomial_log_likelihood_hessian_product_direction_product_direction(weights, data, v, w):\n    return -np.sum(data * v * w)\n\ndef multinomial_log_likelihood_hessian_product_direction_product_direction_product(weights, data, v, w, x):\n    return -np.sum(data * v * w * x)\n\ndef multinomial_log_likelihood_hessian_product_direction_product_direction_product_direction(weights, data, v, w, x, y):\n    return -np.sum(data * v * w * x * y)\n\ndef multinomial_log_likelihood_hessian_product_direction_product_direction_product_direction_product(weights, data, v, w, x, y, z):\n    return -np.sum(data * v * w * x * y * z)\n\ndef multinomial_log_likelihood_hessian_product_direction_product_direction_product_direction_product_direction(weights, data, v, w, x, y, z, a):\n    return -np.sum(data * v * w * x * y * z * a)\n\ndef multinomial_log_likelihood_hessian_product_direction_product_direction_product_direction_product_direction_product(weights, data, v, w, x, y, z, a, b):\n    return -np.sum(data * v * w * x * y * z * a * b)\n\ndef multinomial_log_likelihood_hessian_product_direction_product_direction_product_direction_product_direction_product_direction(weights, data, v, w, x, y, z, a, b, c):\n    return -np.sum(data * v * w * x * y * z * a * b * c)\n\ndef multinomial_log_likelihood_hessian_product_direction_product_direction_product_direction_product_direction_product_direction_product(weights, data, v, w, x, y, z, a, b, c, d):\n    return -np.sum(data * v * w * x * y * z * a * b * c * d)\n\ndef multinomial_log_likelihood_hessian_product_direction_product_direction_product_direction_product_direction_product_direction_product_direction(weights, data, v, w, x, y, z, a, b, c, d, e):\n    return -np.sum(data * v * w * x * y * z * a * b * c * d * e)\n\ndef multinomial_log_likelihood_hessian_product_direction_product_direction_product_direction_product_direction_product_direction_product_direction_product(weights, data, v, w, x, y, z, a, b, c, d, e, f):\n    return -np.sum(data * v * w * x * y * z * a * b * c * d * e * f)\n\ndef multinomial_log_likelihood_hessian_product_direction_product_direction_product_direction_product_direction_product_direction_product_direction_product_direction(weights, data, v, w, x, y, z, a, b,", "metadata": {"problem_id": 812, "library_problem_id": 101, "library": "Scipy", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 101}}
{"id": 308, "code": "popt = sciopt.fminbound(e, pmin, pmax, args=(x,y))\n", "metadata": {"problem_id": 813, "library_problem_id": 102, "library": "Scipy", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 102}}
{"id": 309, "code": "data1 = pd.DataFrame(data.data, columns=data.feature_names)\ndata1['target'] = data.target\n", "metadata": {"problem_id": 817, "library_problem_id": 0, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 310, "code": "data1 = pd.DataFrame(data.data, columns=data.feature_names)\ndata1['target'] = data.target\n", "metadata": {"problem_id": 818, "library_problem_id": 1, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 311, "code": "df_out = pd.get_dummies(df.Col3.apply(pd.Series).stack()).sum(level=0)\ndf_out.index = df.index\ndf_out = df.join(df_out)\ndf_out = df_out.drop('Col3', axis=1)\n", "metadata": {"problem_id": 821, "library_problem_id": 4, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 312, "code": "df_out = pd.get_dummies(df.Col3.apply(pd.Series).stack()).sum(level=0)\ndf_out.index = df.index\ndf_out = df.join(df_out)\ndf_out = df_out.drop('Col3', axis=1)\n", "metadata": {"problem_id": 822, "library_problem_id": 5, "library": "Sklearn", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 313, "code": "df_out = pd.get_dummies(df.Col3.apply(pd.Series).stack()).sum(level=0)\ndf_out.index = df.index\ndf_out = df.join(df_out)\ndf_out = df_out.drop('Col3', axis=1)\n", "metadata": {"problem_id": 824, "library_problem_id": 7, "library": "Sklearn", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 314, "code": "df_out = pd.get_dummies(df.Col3.apply(pd.Series).stack()).sum(level=0)\ndf_out.index = df.index\ndf_out = df.join(df_out)\ndf_out = df_out.drop('Col3', axis=1)\n", "metadata": {"problem_id": 825, "library_problem_id": 8, "library": "Sklearn", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 315, "code": "from sklearn.calibration import CalibratedClassifierCV\nmodel = CalibratedClassifierCV(base_estimator=model, cv=5)\nmodel.fit(X, y)\nproba = model.predict_proba(x_predict)\n", "metadata": {"problem_id": 827, "library_problem_id": 10, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 9}}
{"id": 316, "code": "df = pd.concat([df_origin, pd.DataFrame(transform_output.toarray())], axis=1)\n", "metadata": {"problem_id": 828, "library_problem_id": 11, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 11}}
{"id": 317, "code": "df = pd.concat([df_origin, pd.DataFrame(transform_output.toarray(), columns=['col1', 'col2', 'col3'])], axis=1)\n", "metadata": {"problem_id": 829, "library_problem_id": 12, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 11}}
{"id": 318, "code": "\nclf.steps\n", "metadata": {"problem_id": 831, "library_problem_id": 14, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 14}}
{"id": 319, "code": "\nclf.steps\n", "metadata": {"problem_id": 833, "library_problem_id": 16, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 14}}
{"id": 320, "code": "\nclf.steps.insert(1, ('poly', PolynomialFeatures()))\n", "metadata": {"problem_id": 834, "library_problem_id": 17, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"id": 321, "code": "proba = []\nfor train_index, test_index in cv:\n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n    logreg.fit(X_train, y_train)\n    proba.append(logreg.predict_proba(X_test))\nproba = np.concatenate(proba)\n", "metadata": {"problem_id": 840, "library_problem_id": 23, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 22}}
{"id": 322, "code": "inversed = scaler.inverse_transform(scaled)\n", "metadata": {"problem_id": 841, "library_problem_id": 24, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 24}}
{"id": 323, "code": "model_name = model.__class__.__name__\n", "metadata": {"problem_id": 844, "library_problem_id": 27, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 26}}
{"id": 324, "code": "pipe.fit_transform(data.test)\ntf_idf_out = pipe.named_steps[\"tf_idf\"]\n", "metadata": {"problem_id": 847, "library_problem_id": 30, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 29}}
{"id": 325, "code": "\nclf = GridSearchCV(bc, param_grid, cv=5)\nclf.fit(X_train, y_train)\nproba = clf.predict_proba(X_test)\n", "metadata": {"problem_id": 849, "library_problem_id": 32, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 326, "code": "\nregressor = RandomForestRegressor(n_estimators=150, min_samples_split=1.0, random_state=42)\nrgr = regressor.fit(X,y)\npredict = rgr.predict(X_test)\n", "metadata": {"problem_id": 851, "library_problem_id": 34, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 33}}
{"id": 327, "code": "\ntfidf = TfidfVectorizer(preprocessor=preprocess)\n", "metadata": {"problem_id": 852, "library_problem_id": 35, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Origin", "perturbation_origin_id": 35}}
{"id": 328, "code": "grid.fit(X, y)\ncoef = grid.best_estimator_.named_steps['model'].coef_\n", "metadata": {"problem_id": 856, "library_problem_id": 39, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 329, "code": "grid.fit(X, y)\ncoef = grid.best_estimator_.named_steps['model'].coef_\n", "metadata": {"problem_id": 857, "library_problem_id": 40, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 39}}
{"id": 330, "code": "column_names = X.columns\n", "metadata": {"problem_id": 858, "library_problem_id": 41, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 41}}
{"id": 331, "code": "column_names = X.columns[model.get_support()]\n", "metadata": {"problem_id": 860, "library_problem_id": 43, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 41}}
{"id": 332, "code": "km.fit(X)\ncenters = km.cluster_centers_\nclosest_50_samples = X[np.argsort(np.linalg.norm(X - centers[p], axis=1))[:50]]\n", "metadata": {"problem_id": 862, "library_problem_id": 45, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 45}}
{"id": 333, "code": "km.fit(X)\ncenters = km.cluster_centers_\np_center = centers[p]\ndistances = np.linalg.norm(X - p_center, axis=1)\nclosest_100_samples = X[np.argsort(distances)[:100]]\n", "metadata": {"problem_id": 864, "library_problem_id": 47, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 334, "code": "\n    km.fit(X)\n    centers = km.cluster_centers_\n    distances = np.linalg.norm(X - centers[p], axis=1)\n    samples = X[np.argsort(distances)[:50]]\n    ### END SOLUTION\n    return samples\n", "metadata": {"problem_id": 865, "library_problem_id": 48, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 335, "code": "# convert categorical variable to matrix and merge back with original training data\nX_train = pd.get_dummies(X_train)\n", "metadata": {"problem_id": 866, "library_problem_id": 49, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 336, "code": "# get unique values\nunique_values = np.unique(X_train[0])\n\n# create a dictionary with unique values as keys and 0 as values\nd = dict(zip(unique_values, [0] * len(unique_values)))\n\n# create a list of dictionaries with unique values as keys and 1 as values\nX_train = [dict(zip(unique_values, [0] * len(unique_values))) for _ in range(len(X_train))]\n\n# update the dictionary with 1 for the corresponding key\nfor i in range(len(X_train)):\n    X_train[i][X_train[i][0]] = 1\n\n# convert the list of dictionaries to a dataframe\nX_train = pd.DataFrame(X_train)\n", "metadata": {"problem_id": 867, "library_problem_id": 50, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 49}}
{"id": 337, "code": "from sklearn.svm import SVR\nsvr = SVR(kernel='rbf')\nsvr.fit(X, y)\npredict = svr.predict(X)\n", "metadata": {"problem_id": 868, "library_problem_id": 51, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 51}}
{"id": 338, "code": "from sklearn.svm import SVR\nsvr = SVR(kernel='poly', degree=2)\nsvr.fit(X, y)\npredict = svr.predict(X)\n", "metadata": {"problem_id": 870, "library_problem_id": 53, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 51}}
{"id": 339, "code": "cosine_similarities_of_queries = []\nfor query in queries:\n    query_tfidf = tfidf.transform([query])\n    cosine_similarities_of_queries.append(\n        np.array(\n            [\n                query_tfidf.dot(tfidf.transform([document]).T).toarray()[0][0]\n                for document in documents\n            ]\n        )\n    )\ncosine_similarities_of_queries = pd.DataFrame(\n    cosine_similarities_of_queries, columns=documents\n)\n", "metadata": {"problem_id": 872, "library_problem_id": 55, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 55}}
{"id": 340, "code": "f = [\n    ['t1'],\n    ['t2', 't5', 't7'],\n    ['t1', 't2', 't3', 't4', 't5'],\n    ['t4', 't5', 't6']\n]\n\nf = pd.DataFrame(f)\nf = f.apply(pd.Series.value_counts).fillna(0)\nf = f.astype(int)\nf\n", "metadata": {"problem_id": 876, "library_problem_id": 59, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"id": 341, "code": "# create a distance matrix\ndist_matrix = np.zeros((len(data_matrix), len(data_matrix)))\nfor i in range(len(data_matrix)):\n    for j in range(len(data_matrix)):\n        dist_matrix[i, j] = np.linalg.norm(data_matrix[i] - data_matrix[j])\n\n# cluster\ncluster_labels = sklearn.cluster.AgglomerativeClustering(n_clusters=2, affinity='precomputed').fit_predict(dist_matrix)\n", "metadata": {"problem_id": 880, "library_problem_id": 63, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 63}}
{"id": 342, "code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "metadata": {"problem_id": 881, "library_problem_id": 64, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 63}}
{"id": 343, "code": "from scipy.cluster.hierarchy import linkage, fcluster\n\n# Compute the linkage matrix\nZ = linkage(data_matrix, 'ward')\n\n# Compute the cluster labels\ncluster_labels = fcluster(Z, 2, criterion='maxclust')\n", "metadata": {"problem_id": 883, "library_problem_id": 66, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 66}}
{"id": 344, "code": "from scipy.cluster.hierarchy import linkage, fcluster\n\nlinkage_matrix = linkage(data_matrix, \"single\")\ncluster_labels = fcluster(linkage_matrix, 2, criterion='maxclust')\n", "metadata": {"problem_id": 884, "library_problem_id": 67, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 66}}
{"id": 345, "code": "from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(data)\ncentered_scaled_data = scaler.transform(data)\n", "metadata": {"problem_id": 886, "library_problem_id": 69, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 69}}
{"id": 346, "code": "from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\ncentered_scaled_data = scaler.fit_transform(data)\n", "metadata": {"problem_id": 887, "library_problem_id": 70, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 69}}
{"id": 347, "code": "from scipy.stats import boxcox\nbox_cox_data = boxcox(data)\n", "metadata": {"problem_id": 888, "library_problem_id": 71, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 71}}
{"id": 348, "code": "from scipy.stats import boxcox\nbox_cox_data = boxcox(data)[0]\n", "metadata": {"problem_id": 889, "library_problem_id": 72, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 71}}
{"id": 349, "code": "from sklearn.preprocessing import PowerTransformer\npt = PowerTransformer(method='yeo-johnson')\nyeo_johnson_data = pt.fit_transform(data)\n", "metadata": {"problem_id": 891, "library_problem_id": 74, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 73}}
{"id": 350, "code": "vectorizer = CountVectorizer(token_pattern=r\"(?u)\\b\\w\\w+\\b\")\nvectorizer.fit(text)\ntransformed_text = vectorizer.transform(text)\n", "metadata": {"problem_id": 892, "library_problem_id": 75, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 75}}
{"id": 351, "code": "from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(dataset.iloc[:,:-1], dataset.iloc[:,-1], test_size=0.2, random_state=42)\n", "metadata": {"problem_id": 893, "library_problem_id": 76, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 352, "code": "from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(dataset.iloc[:,:-1], dataset.iloc[:,-1], test_size=0.33, random_state=42)\n", "metadata": {"problem_id": 895, "library_problem_id": 78, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 353, "code": "\n    from sklearn.model_selection import train_test_split\n    x_train, x_test, y_train, y_test = train_test_split(data.iloc[:,:-1], data.iloc[:,-1], test_size=0.2, random_state=42)\n    ### END SOLUTION\n    return x_train, y_train, x_test, y_test\n\n\nA: You can use sklearn.model_selection.train_test_split to split your data into training and testing sets.\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n\nA: You can use sklearn.model_selection.train_test_split to split your data into training and testing sets.\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n\nA: You can use sklearn.model_selection.train_test_split to split your data into training and testing sets.\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n\nA: You can use sklearn.model_selection.train_test_split to split your data into training and testing sets.\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n\nA: You can use sklearn.model_selection.train_test_split to split your data into training and testing sets.\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n\nA: You can use sklearn.model_selection.train_test_split to split your data into training and testing sets.\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n\nA: You can use sklearn.model_selection.train_test_split to split your data into training and testing sets.\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n\nA: You can use sklearn.model_selection.train_test_split to split your data into training and testing sets.\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n\nA: You can use sklearn.model_selection.train_test_split to split your data into training and testing sets.\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n\nA: You can use sklearn.model_selection.train_test_split to split your data into training and testing sets.\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n\nA: You can use sklearn.model_selection.train_test_split to split your data into training and testing sets.\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_", "metadata": {"problem_id": 896, "library_problem_id": 79, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 76}}
{"id": 354, "code": "kmeans = KMeans(n_clusters=2, n_init=10).fit(df['mse'].values.reshape(-1, 1))\nlabels = kmeans.predict(df['mse'].values.reshape(-1, 1))\n", "metadata": {"problem_id": 897, "library_problem_id": 80, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 355, "code": "feature_selector = sklearn.feature_selection.SelectKBest(k=100)\nX_new = feature_selector.fit_transform(X, y)\nselected_feature_names = np.asarray(vectorizer.get_feature_names())[feature_selector.get_support()]\n", "metadata": {"problem_id": 900, "library_problem_id": 83, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 82}}
{"id": 356, "code": "vectorizer = CountVectorizer(stop_words=\"english\",binary=True,lowercase=False,vocabulary={'Jscript','.Net','TypeScript','NodeJS','Angular','Mongo','CSS','Python','PHP','Photoshop','Oracle','Linux','C++',\"Java\",'TeamCity','Frontend','Backend','Full stack', 'UI Design', 'Web','Integration','Database design','UX'})\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names()\n", "metadata": {"problem_id": 903, "library_problem_id": 86, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 85}}
{"id": 357, "code": "vectorizer = CountVectorizer(stop_words=\"english\", binary=True, lowercase=False, vocabulary={'Jscript', '.Net', 'TypeScript', 'SQL', 'NodeJS', 'Angular', 'Mongo', 'CSS', 'Python', 'PHP', 'Photoshop', 'Oracle', 'Linux', 'C++', \"Java\", 'TeamCity', 'Frontend', 'Backend', 'Full stack', 'UI Design', 'Web', 'Integration', 'Database design', 'UX'})\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names()\n", "metadata": {"problem_id": 904, "library_problem_id": 87, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 85}}
{"id": 358, "code": "vectorizer = CountVectorizer(stop_words=\"english\", binary=True, lowercase=False, vocabulary={'Jscript', '.Net', 'TypeScript', 'NodeJS', 'Angular', 'Mongo', 'CSS', 'Python', 'PHP', 'Photoshop', 'Oracle', 'Linux', 'C++', \"Java\", 'TeamCity', 'Frontend', 'Backend', 'Full stack', 'UI Design', 'Web', 'Integration', 'Database design', 'UX'})\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names()\n", "metadata": {"problem_id": 905, "library_problem_id": 88, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 85}}
{"id": 359, "code": "le = LabelEncoder()\ndf['Sex'] = le.fit_transform(df['Sex'])\n", "metadata": {"problem_id": 909, "library_problem_id": 92, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 91}}
{"id": 360, "code": "ElasticNet = linear_model.ElasticNet()\nElasticNet.fit(X_train, y_train)\ntraining_set_score = ElasticNet.score(X_train, y_train)\ntest_set_score = ElasticNet.score(X_test, y_test)\n", "metadata": {"problem_id": 911, "library_problem_id": 94, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 94}}
{"id": 361, "code": "scaler = MinMaxScaler()\ntransformed = scaler.fit_transform(np_array)\n", "metadata": {"problem_id": 912, "library_problem_id": 95, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 95}}
{"id": 362, "code": "scaler = MinMaxScaler()\ntransformed = scaler.fit_transform(np_array)\n", "metadata": {"problem_id": 913, "library_problem_id": 96, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 95}}
{"id": 363, "code": "close_buy1 = close[:-1]\nm5 = ma_50[:-1]\nm10 = ma_100[:-1]\nma20 = ma_200[:-1]\nb = np.concatenate([close_buy1, m5, m10, ma20], axis=1)\n\npredict = clf.predict(b)\n", "metadata": {"problem_id": 915, "library_problem_id": 98, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 98}}
{"id": 364, "code": "\nnew_X = np.array(X)\nclf.fit(new_X, ['2', '3'])\n", "metadata": {"problem_id": 917, "library_problem_id": 100, "library": "Sklearn", "test_case_cnt": 0, "perturbation_type": "Surface", "perturbation_origin_id": 99}}
{"id": 365, "code": "\n# X = dataframe.iloc[-1:].astype(float)\n# y = dataframe.iloc[:,-1]\n# logReg = LogisticRegression()\n# logReg.fit(X[:None],y)\n# predict = logReg.predict(X[:None])\n", "metadata": {"problem_id": 920, "library_problem_id": 103, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 102}}
{"id": 366, "code": "train_size = 0.2\ntrain_dataframe, test_dataframe = train_test_split(features_dataframe, train_size=train_size)\n", "metadata": {"problem_id": 921, "library_problem_id": 104, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 104}}
{"id": 367, "code": "\n    train_size = 0.2\n    train_dataframe, test_dataframe = train_test_split(features_dataframe, train_size=train_size)\n    train_dataframe = train_dataframe.sort([\"date\"])\n    test_dataframe = test_dataframe.sort([\"date\"])\n    ### END SOLUTION\n    return train_dataframe, test_dataframe\n", "metadata": {"problem_id": 923, "library_problem_id": 106, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"id": 368, "code": "cols = df.columns[2:4]\ndf[cols + '_scale'] = df.groupby('Month')[cols].apply(lambda x: scaler.fit_transform(x))\n", "metadata": {"problem_id": 924, "library_problem_id": 107, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"id": 369, "code": "cols = myData.columns[2:4]\nmyData['new_' + cols[0]] = myData.groupby('Month')[cols[0]].transform(lambda x: scaler.fit_transform(x.values.reshape(-1,1)))\nmyData['new_' + cols[1]] = myData.groupby('Month')[cols[1]].transform(lambda x: scaler.fit_transform(x.values.reshape(-1,1)))\n", "metadata": {"problem_id": 925, "library_problem_id": 108, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 107}}
{"id": 370, "code": "full_results = pd.DataFrame(GridSearch_fitted.cv_results_)\nfull_results.sort_values(by='mean_fit_time', ascending=False)\n", "metadata": {"problem_id": 929, "library_problem_id": 112, "library": "Sklearn", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 111}}
{"id": 371, "code": "tfidf_matrix = tfidf.fit_transform(df['description'])\ncosine_similarity_matrix = sklearn.metrics.pairwise.cosine_similarity(tfidf_matrix)\n", "metadata": {"problem_id": 931, "library_problem_id": 114, "library": "Sklearn", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"id": 372, "code": "\noptim.param_groups[0]['lr'] = 0.001\n", "metadata": {"problem_id": 932, "library_problem_id": 0, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 373, "code": "\noptim.param_groups[0]['lr'] = 0.0005\n", "metadata": {"problem_id": 934, "library_problem_id": 2, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 0}}
{"id": 374, "code": "\noptim.param_groups[0]['lr'] = 0.005\n", "metadata": {"problem_id": 935, "library_problem_id": 3, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 0}}
{"id": 375, "code": "embedding_weights = torch.from_numpy(word2vec.wv.vectors)\nembedded_input = torch.nn.Embedding.from_pretrained(embedding_weights)\n", "metadata": {"problem_id": 936, "library_problem_id": 4, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 376, "code": "px = pd.DataFrame(x.numpy())\n", "metadata": {"problem_id": 938, "library_problem_id": 6, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 6}}
{"id": 377, "code": "x = torch.rand(4,4)\npx = pd.DataFrame(x.numpy())\n", "metadata": {"problem_id": 939, "library_problem_id": 7, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 6}}
{"id": 378, "code": "px = pd.DataFrame(x.numpy())\n", "metadata": {"problem_id": 940, "library_problem_id": 8, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 6}}
{"id": 379, "code": "x_tensor = torch.tensor(x_array)\n", "metadata": {"problem_id": 949, "library_problem_id": 17, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 16}}
{"id": 380, "code": "mask = torch.zeros(len(lens), max(lens))\nfor i, l in enumerate(lens):\n    mask[i, :l] = 1\n", "metadata": {"problem_id": 952, "library_problem_id": 20, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 19}}
{"id": 381, "code": "\n    result = torch.diag(t)\n    ### END SOLUTION\n    return result\n", "metadata": {"problem_id": 956, "library_problem_id": 24, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 23}}
{"id": 382, "code": "\n    ab = torch.stack((a, b), 0)\n    ### END SOLUTION\n    return ab\n", "metadata": {"problem_id": 959, "library_problem_id": 27, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 25}}
{"id": 383, "code": "a = torch.zeros_like(a)\nfor i in range(len(lengths)):\n    a[i, :lengths[i], :] = a[i, :lengths[i], :]\n", "metadata": {"problem_id": 960, "library_problem_id": 28, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 28}}
{"id": 384, "code": "a = torch.zeros_like(a)\nfor i in range(len(lengths)):\n    a[i, :lengths[i], :] = a[i, :lengths[i], :]\n", "metadata": {"problem_id": 962, "library_problem_id": 30, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 28}}
{"id": 385, "code": "new_tensors = torch.stack(list)\n", "metadata": {"problem_id": 965, "library_problem_id": 33, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 386, "code": "\n    tt = torch.tensor(lt)\n    ### END SOLUTION\n    return tt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "metadata": {"problem_id": 966, "library_problem_id": 34, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 32}}
{"id": 387, "code": "tensor_of_tensors = torch.stack(list_of_tensors)\n", "metadata": {"problem_id": 967, "library_problem_id": 35, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 32}}
{"id": 388, "code": "result = t[np.arange(len(idx)), idx]\n", "metadata": {"problem_id": 970, "library_problem_id": 38, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 36}}
{"id": 389, "code": "result = x[np.arange(len(ids)), ids.squeeze()]\n", "metadata": {"problem_id": 971, "library_problem_id": 39, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 39}}
{"id": 390, "code": "cnt_equal = (A == B).sum()\n", "metadata": {"problem_id": 980, "library_problem_id": 48, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 48}}
{"id": 391, "code": "cnt_equal = (A == B).sum()\n", "metadata": {"problem_id": 981, "library_problem_id": 49, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 48}}
{"id": 392, "code": "cnt_equal = (A == B).sum()\n", "metadata": {"problem_id": 984, "library_problem_id": 52, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 48}}
{"id": 393, "code": "\ntensors_31 = torch.chunk(a, 31, dim=3)\n", "metadata": {"problem_id": 986, "library_problem_id": 54, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 394, "code": "output = torch.where(mask == 1, clean_input_spectrogram, output)\n", "metadata": {"problem_id": 988, "library_problem_id": 56, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 56}}
{"id": 395, "code": "\n    sign_x = torch.sign(x)\n    sign_y = torch.sign(y)\n    min = torch.min(torch.abs(x), torch.abs(y))\n    signed_min = torch.where(torch.abs(x) < torch.abs(y), sign_x * min, sign_y * min)\n    ### END SOLUTION\n    return signed_min\n", "metadata": {"problem_id": 992, "library_problem_id": 60, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 58}}
{"id": 396, "code": "confidence_score = torch.nn.functional.softmax(MyNet(input), dim=1)\n", "metadata": {"problem_id": 993, "library_problem_id": 61, "library": "Pytorch", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 61}}
{"id": 397, "code": "a = torch.Tensor([[1, 2, 3], [1, 2, 3]])\nb = torch.Tensor([[5, 6, 7], [5, 6, 7]])\n\na = [[1 2 3]    b = [[5 6 7]\n     [1 2 3]]        [5 6 7]]\nI want to combine the two tensors and have them partially overlap by a single column, with the average being taken for those elements that overlap.\n\ne.g.\n\nresult = [[1 2 4 6 7]\n          [1 2 4 6 7]]\nThe first two columns are the first two columns of 'a'. The last two columns are the last two columns of 'b'. The middle column is the average of 'a's last column and 'b's first column.\n\nI know how to merge two tensors side by side or in a new dimension. But doing this eludes me.\n\nCan anyone help?\n", "metadata": {"problem_id": 994, "library_problem_id": 62, "library": "Pytorch", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"id": 398, "code": "t = torch.arange(4).reshape(1,2,2).float()\nprint(t)\nnew=torch.tensor([[0., 0., 0.,0.]])\nprint(new)\nr = torch.stack([t,new])\nprint(r)\n", "metadata": {"problem_id": 997, "library_problem_id": 65, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 64}}
{"id": 399, "code": "t = torch.arange(8).reshape(1,4,2).float()\nprint(t)\nnew=torch.tensor([[-1, -1, -1, -1,]])\nprint(new)\nr = torch.stack([t,new])\nprint(r)\n", "metadata": {"problem_id": 998, "library_problem_id": 66, "library": "Pytorch", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 64}}
